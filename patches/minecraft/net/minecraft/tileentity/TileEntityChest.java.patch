--- ../src-base/minecraft/net/minecraft/tileentity/TileEntityChest.java
+++ ../src-work/minecraft/net/minecraft/tileentity/TileEntityChest.java
@@ -5,6 +5,7 @@
 import net.minecraft.block.BlockChest;
 import net.minecraft.entity.player.EntityPlayer;
 import net.minecraft.entity.player.InventoryPlayer;
+import net.minecraft.init.Blocks;
 import net.minecraft.init.SoundEvents;
 import net.minecraft.inventory.Container;
 import net.minecraft.inventory.ContainerChest;
@@ -22,7 +23,11 @@
 import net.minecraft.util.datafix.walkers.ItemStackDataLists;
 import net.minecraft.util.math.AxisAlignedBB;
 import net.minecraft.util.math.BlockPos;
+import org.bukkit.craftbukkit.entity.CraftHumanEntity;
+import org.bukkit.entity.HumanEntity;
 
+import java.util.List;
+
 public class TileEntityChest extends TileEntityLockableLoot implements ITickable
 {
     private NonNullList<ItemStack> field_145985_p = NonNullList.<ItemStack>func_191197_a(27, ItemStack.field_190927_a);
@@ -36,7 +41,30 @@
     public int field_145987_o;
     private int field_145983_q;
     private BlockChest.Type field_145982_r;
+    // CraftBukkit start - add fields and methods
+    public List<HumanEntity> transaction = new java.util.ArrayList<HumanEntity>();
+    private int maxStack = 64;
 
+    public List<ItemStack> getContents() {
+        return this.field_145985_p;
+    }
+
+    public void onOpen(CraftHumanEntity who) {
+        transaction.add(who);
+    }
+
+    public void onClose(CraftHumanEntity who) {
+        transaction.remove(who);
+    }
+
+    public List<HumanEntity> getViewers() {
+        return transaction;
+    }
+
+    public void setMaxStackSize(int size) {
+        maxStack = size;
+    }
+    // CraftBukkit end
     public TileEntityChest()
     {
     }
@@ -116,6 +144,7 @@
     {
         super.func_145836_u();
         this.field_145984_a = false;
+        doubleChestHandler = null;
     }
 
     @SuppressWarnings("incomplete-switch")
@@ -322,11 +351,21 @@
             {
                 this.field_145987_o = 0;
             }
+            int oldPower = Math.max(0, Math.min(15, this.field_145987_o)); // CraftBukkit - Get power before new viewer is added
 
+
             ++this.field_145987_o;
             this.field_145850_b.func_175641_c(this.field_174879_c, this.func_145838_q(), 1, this.field_145987_o);
             this.field_145850_b.func_175685_c(this.field_174879_c, this.func_145838_q(), false);
+            // CraftBukkit start - Call redstone event
+            if (this.func_145838_q() == Blocks.field_150447_bR) {
+                int newPower = Math.max(0, Math.min(15, this.field_145987_o));
 
+                if (oldPower != newPower) {
+                    org.bukkit.craftbukkit.event.CraftEventFactory.callRedstoneChange(field_145850_b, field_174879_c.func_177958_n(), field_174879_c.func_177956_o(), field_174879_c.func_177952_p(), oldPower, newPower);
+                }
+            }
+            // CraftBukkit end
             if (this.func_145980_j() == BlockChest.Type.TRAP)
             {
                 this.field_145850_b.func_175685_c(this.field_174879_c.func_177977_b(), this.func_145838_q(), false);
@@ -338,17 +377,47 @@
     {
         if (!p_174886_1_.func_175149_v() && this.func_145838_q() instanceof BlockChest)
         {
+            int oldPower = Math.max(0, Math.min(15, this.field_145987_o)); // CraftBukkit - Get power before new viewer is added
+
             --this.field_145987_o;
             this.field_145850_b.func_175641_c(this.field_174879_c, this.func_145838_q(), 1, this.field_145987_o);
             this.field_145850_b.func_175685_c(this.field_174879_c, this.func_145838_q(), false);
 
-            if (this.func_145980_j() == BlockChest.Type.TRAP)
-            {
+            // CraftBukkit start - Call redstone event
+            if (this.func_145980_j() == BlockChest.Type.TRAP) {
+                int newPower = Math.max(0, Math.min(15, this.field_145987_o));
+
+                if (oldPower != newPower) {
+                    org.bukkit.craftbukkit.event.CraftEventFactory.callRedstoneChange(field_145850_b, field_174879_c.func_177958_n(), field_174879_c.func_177956_o(), field_174879_c.func_177952_p(), oldPower, newPower);
+                }
                 this.field_145850_b.func_175685_c(this.field_174879_c.func_177977_b(), this.func_145838_q(), false);
             }
+            // CraftBukkit end
         }
     }
 
+    public net.minecraftforge.items.VanillaDoubleChestItemHandler doubleChestHandler;
+
+    @SuppressWarnings("unchecked")
+    @Override
+    public <T> T getCapability(net.minecraftforge.common.capabilities.Capability<T> capability, @Nullable net.minecraft.util.EnumFacing facing)
+    {
+        if (capability == net.minecraftforge.items.CapabilityItemHandler.ITEM_HANDLER_CAPABILITY)
+        {
+            if(doubleChestHandler == null || doubleChestHandler.needsRefresh())
+                doubleChestHandler = net.minecraftforge.items.VanillaDoubleChestItemHandler.get(this);
+            if (doubleChestHandler != null && doubleChestHandler != net.minecraftforge.items.VanillaDoubleChestItemHandler.NO_ADJACENT_CHESTS_INSTANCE)
+                return (T) doubleChestHandler;
+        }
+        return super.getCapability(capability, facing);
+    }
+
+    public net.minecraftforge.items.IItemHandler getSingleChestHandler()
+    {
+        return super.getCapability(net.minecraftforge.items.CapabilityItemHandler.ITEM_HANDLER_CAPABILITY, null);
+    }
+
+
     public void func_145843_s()
     {
         super.func_145843_s();
@@ -386,4 +455,10 @@
     {
         return this.field_145985_p;
     }
+    // CraftBukkit start
+    @Override
+    public boolean func_183000_F() {
+        return true;
+    }
+    // CraftBukkit end
 }
