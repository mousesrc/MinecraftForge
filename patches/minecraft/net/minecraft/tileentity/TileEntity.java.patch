--- ../src-base/minecraft/net/minecraft/tileentity/TileEntity.java
+++ ../src-work/minecraft/net/minecraft/tileentity/TileEntity.java
@@ -20,56 +20,59 @@
 import net.minecraftforge.fml.relauncher.SideOnly;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
+import org.bukkit.inventory.InventoryHolder;
 
-public abstract class TileEntity
+public abstract class TileEntity implements net.minecraftforge.common.capabilities.ICapabilitySerializable<NBTTagCompound>
 {
-    private static final Logger field_145852_a = LogManager.getLogger();
-    private static final RegistryNamespaced < ResourceLocation, Class <? extends TileEntity >> field_190562_f = new RegistryNamespaced();
-    protected World field_145850_b;
-    protected BlockPos field_174879_c = BlockPos.field_177992_a;
-    protected boolean field_145846_f;
-    private int field_145847_g = -1;
-    protected Block field_145854_h;
+    private static final Logger LOGGER = LogManager.getLogger();
+    private static final RegistryNamespaced < ResourceLocation, Class <? extends TileEntity >> REGISTRY = net.minecraftforge.fml.common.registry.GameData.getTileEntityRegistry();
+    public World world;
+    protected BlockPos pos = BlockPos.ORIGIN;
+    protected boolean tileEntityInvalid;
+    private int blockMetadata = -1;
+    protected Block blockType;
 
-    private static void func_190560_a(String p_190560_0_, Class <? extends TileEntity > p_190560_1_)
+    private static void register(String p_190560_0_, Class <? extends TileEntity > p_190560_1_)
     {
-        field_190562_f.func_82595_a(new ResourceLocation(p_190560_0_), p_190560_1_);
+        REGISTRY.putObject(new ResourceLocation(p_190560_0_), p_190560_1_);
     }
 
     @Nullable
-    public static ResourceLocation func_190559_a(Class <? extends TileEntity > p_190559_0_)
+    public static ResourceLocation getKey(Class <? extends TileEntity > p_190559_0_)
     {
-        return (ResourceLocation)field_190562_f.func_177774_c(p_190559_0_);
+        return (ResourceLocation)REGISTRY.getNameForObject(p_190559_0_);
     }
 
-    public World func_145831_w()
+    public World getWorld()
     {
-        return this.field_145850_b;
+        return this.world;
     }
 
-    public void func_145834_a(World p_145834_1_)
+    public void setWorld(World worldIn)
     {
-        this.field_145850_b = p_145834_1_;
+        this.world = worldIn;
     }
 
-    public boolean func_145830_o()
+    public boolean hasWorld()
     {
-        return this.field_145850_b != null;
+        return this.world != null;
     }
 
-    public void func_145839_a(NBTTagCompound p_145839_1_)
+    public void readFromNBT(NBTTagCompound compound)
     {
-        this.field_174879_c = new BlockPos(p_145839_1_.func_74762_e("x"), p_145839_1_.func_74762_e("y"), p_145839_1_.func_74762_e("z"));
+        this.pos = new BlockPos(compound.getInteger("x"), compound.getInteger("y"), compound.getInteger("z"));
+        if (compound.hasKey("ForgeData")) this.customTileData = compound.getCompoundTag("ForgeData");
+        if (this.capabilities != null && compound.hasKey("ForgeCaps")) this.capabilities.deserializeNBT(compound.getCompoundTag("ForgeCaps"));
     }
 
-    public NBTTagCompound func_189515_b(NBTTagCompound p_189515_1_)
+    public NBTTagCompound writeToNBT(NBTTagCompound compound)
     {
-        return this.func_189516_d(p_189515_1_);
+        return this.writeInternal(compound);
     }
 
-    private NBTTagCompound func_189516_d(NBTTagCompound p_189516_1_)
+    private NBTTagCompound writeInternal(NBTTagCompound compound)
     {
-        ResourceLocation resourcelocation = (ResourceLocation)field_190562_f.func_177774_c(this.getClass());
+        ResourceLocation resourcelocation = (ResourceLocation)REGISTRY.getNameForObject(this.getClass());
 
         if (resourcelocation == null)
         {
@@ -77,23 +80,26 @@
         }
         else
         {
-            p_189516_1_.func_74778_a("id", resourcelocation.toString());
-            p_189516_1_.func_74768_a("x", this.field_174879_c.func_177958_n());
-            p_189516_1_.func_74768_a("y", this.field_174879_c.func_177956_o());
-            p_189516_1_.func_74768_a("z", this.field_174879_c.func_177952_p());
-            return p_189516_1_;
+            compound.setString("id", resourcelocation.toString());
+            compound.setInteger("x", this.pos.getX());
+            compound.setInteger("y", this.pos.getY());
+            compound.setInteger("z", this.pos.getZ());
+            if (this.customTileData != null) compound.setTag("ForgeData", this.customTileData);
+            if (this.capabilities != null) compound.setTag("ForgeCaps", this.capabilities.serializeNBT());
+            return compound;
         }
     }
 
     @Nullable
-    public static TileEntity func_190200_a(World p_190200_0_, NBTTagCompound p_190200_1_)
+    public static TileEntity create(World worldIn, NBTTagCompound compound)
     {
         TileEntity tileentity = null;
-        String s = p_190200_1_.func_74779_i("id");
+        String s = compound.getString("id");
+        Class <? extends TileEntity > oclass = null;
 
         try
         {
-            Class <? extends TileEntity > oclass = (Class)field_190562_f.func_82594_a(new ResourceLocation(s));
+            oclass = (Class)REGISTRY.getObject(new ResourceLocation(s));
 
             if (oclass != null)
             {
@@ -102,149 +108,152 @@
         }
         catch (Throwable throwable1)
         {
-            field_145852_a.error("Failed to create block entity {}", new Object[] {s, throwable1});
+            LOGGER.error("Failed to create block entity {}", new Object[] {s, throwable1});
+            net.minecraftforge.fml.common.FMLLog.log.error("A TileEntity {}({}) has thrown an exception during loading, its state cannot be restored. Report this to the mod author",
+                    s, oclass == null ? null : oclass.getName(), throwable1);
         }
 
         if (tileentity != null)
         {
             try
             {
-                tileentity.func_190201_b(p_190200_0_);
-                tileentity.func_145839_a(p_190200_1_);
+                tileentity.setWorldCreate(worldIn);
+                tileentity.readFromNBT(compound);
             }
             catch (Throwable throwable)
             {
-                field_145852_a.error("Failed to load data for block entity {}", new Object[] {s, throwable});
+                LOGGER.error("Failed to load data for block entity {}", new Object[] {s, throwable});
+                net.minecraftforge.fml.common.FMLLog.log.error("A TileEntity {}({}) has thrown an exception during loading, its state cannot be restored. Report this to the mod author",
+                        s, oclass.getName(), throwable);
                 tileentity = null;
             }
         }
         else
         {
-            field_145852_a.warn("Skipping BlockEntity with id {}", new Object[] {s});
+            LOGGER.warn("Skipping BlockEntity with id {}", new Object[] {s});
         }
 
         return tileentity;
     }
 
-    protected void func_190201_b(World p_190201_1_)
+    protected void setWorldCreate(World worldIn)
     {
     }
 
-    public int func_145832_p()
+    public int getBlockMetadata()
     {
-        if (this.field_145847_g == -1)
+        if (this.blockMetadata == -1)
         {
-            IBlockState iblockstate = this.field_145850_b.func_180495_p(this.field_174879_c);
-            this.field_145847_g = iblockstate.func_177230_c().func_176201_c(iblockstate);
+            IBlockState iblockstate = this.world.getBlockState(this.pos);
+            this.blockMetadata = iblockstate.getBlock().getMetaFromState(iblockstate);
         }
 
-        return this.field_145847_g;
+        return this.blockMetadata;
     }
 
-    public void func_70296_d()
+    public void markDirty()
     {
-        if (this.field_145850_b != null)
+        if (this.world != null)
         {
-            IBlockState iblockstate = this.field_145850_b.func_180495_p(this.field_174879_c);
-            this.field_145847_g = iblockstate.func_177230_c().func_176201_c(iblockstate);
-            this.field_145850_b.func_175646_b(this.field_174879_c, this);
+            IBlockState iblockstate = this.world.getBlockState(this.pos);
+            this.blockMetadata = iblockstate.getBlock().getMetaFromState(iblockstate);
+            this.world.markChunkDirty(this.pos, this);
 
-            if (this.func_145838_q() != Blocks.field_150350_a)
+            if (this.getBlockType() != Blocks.AIR)
             {
-                this.field_145850_b.func_175666_e(this.field_174879_c, this.func_145838_q());
+                this.world.updateComparatorOutputLevel(this.pos, this.getBlockType());
             }
         }
     }
 
-    @SideOnly(Side.CLIENT)
-    public double func_145835_a(double p_145835_1_, double p_145835_3_, double p_145835_5_)
+    public double getDistanceSq(double x, double y, double z)
     {
-        double d0 = (double)this.field_174879_c.func_177958_n() + 0.5D - p_145835_1_;
-        double d1 = (double)this.field_174879_c.func_177956_o() + 0.5D - p_145835_3_;
-        double d2 = (double)this.field_174879_c.func_177952_p() + 0.5D - p_145835_5_;
+        double d0 = (double)this.pos.getX() + 0.5D - x;
+        double d1 = (double)this.pos.getY() + 0.5D - y;
+        double d2 = (double)this.pos.getZ() + 0.5D - z;
         return d0 * d0 + d1 * d1 + d2 * d2;
     }
 
     @SideOnly(Side.CLIENT)
-    public double func_145833_n()
+    public double getMaxRenderDistanceSquared()
     {
         return 4096.0D;
     }
 
-    public BlockPos func_174877_v()
+    public BlockPos getPos()
     {
-        return this.field_174879_c;
+        return this.pos;
     }
 
-    public Block func_145838_q()
+    public Block getBlockType()
     {
-        if (this.field_145854_h == null && this.field_145850_b != null)
+        if (this.blockType == null && this.world != null)
         {
-            this.field_145854_h = this.field_145850_b.func_180495_p(this.field_174879_c).func_177230_c();
+            this.blockType = this.world.getBlockState(this.pos).getBlock();
         }
 
-        return this.field_145854_h;
+        return this.blockType;
     }
 
     @Nullable
-    public SPacketUpdateTileEntity func_189518_D_()
+    public SPacketUpdateTileEntity getUpdatePacket()
     {
         return null;
     }
 
-    public NBTTagCompound func_189517_E_()
+    public NBTTagCompound getUpdateTag()
     {
-        return this.func_189516_d(new NBTTagCompound());
+        return this.writeInternal(new NBTTagCompound());
     }
 
-    public boolean func_145837_r()
+    public boolean isInvalid()
     {
-        return this.field_145846_f;
+        return this.tileEntityInvalid;
     }
 
-    public void func_145843_s()
+    public void invalidate()
     {
-        this.field_145846_f = true;
+        this.tileEntityInvalid = true;
     }
 
-    public void func_145829_t()
+    public void validate()
     {
-        this.field_145846_f = false;
+        this.tileEntityInvalid = false;
     }
 
-    public boolean func_145842_c(int p_145842_1_, int p_145842_2_)
+    public boolean receiveClientEvent(int id, int type)
     {
         return false;
     }
 
-    public void func_145836_u()
+    public void updateContainingBlockInfo()
     {
-        this.field_145854_h = null;
-        this.field_145847_g = -1;
+        this.blockType = null;
+        this.blockMetadata = -1;
     }
 
-    public void func_145828_a(CrashReportCategory p_145828_1_)
+    public void addInfoToCrashReport(CrashReportCategory reportCategory)
     {
-        p_145828_1_.func_189529_a("Name", new ICrashReportDetail<String>()
+        reportCategory.setDetail("Name", new ICrashReportDetail<String>()
         {
             public String call() throws Exception
             {
-                return TileEntity.field_190562_f.func_177774_c(TileEntity.this.getClass()) + " // " + TileEntity.this.getClass().getCanonicalName();
+                return TileEntity.REGISTRY.getNameForObject(TileEntity.this.getClass()) + " // " + TileEntity.this.getClass().getCanonicalName();
             }
         });
 
-        if (this.field_145850_b != null)
+        if (this.world != null)
         {
-            CrashReportCategory.func_180523_a(p_145828_1_, this.field_174879_c, this.func_145838_q(), this.func_145832_p());
-            p_145828_1_.func_189529_a("Actual block type", new ICrashReportDetail<String>()
+            CrashReportCategory.addBlockInfo(reportCategory, this.pos, this.getBlockType(), this.getBlockMetadata());
+            reportCategory.setDetail("Actual block type", new ICrashReportDetail<String>()
             {
                 public String call() throws Exception
                 {
-                    int i = Block.func_149682_b(TileEntity.this.field_145850_b.func_180495_p(TileEntity.this.field_174879_c).func_177230_c());
+                    int i = Block.getIdFromBlock(TileEntity.this.world.getBlockState(TileEntity.this.pos).getBlock());
 
                     try
                     {
-                        return String.format("ID #%d (%s // %s)", new Object[] {Integer.valueOf(i), Block.func_149729_e(i).func_149739_a(), Block.func_149729_e(i).getClass().getCanonicalName()});
+                        return String.format("ID #%d (%s // %s)", new Object[] {Integer.valueOf(i), Block.getBlockById(i).getUnlocalizedName(), Block.getBlockById(i).getClass().getCanonicalName()});
                     }
                     catch (Throwable var3)
                     {
@@ -252,12 +261,12 @@
                     }
                 }
             });
-            p_145828_1_.func_189529_a("Actual block data value", new ICrashReportDetail<String>()
+            reportCategory.setDetail("Actual block data value", new ICrashReportDetail<String>()
             {
                 public String call() throws Exception
                 {
-                    IBlockState iblockstate = TileEntity.this.field_145850_b.func_180495_p(TileEntity.this.field_174879_c);
-                    int i = iblockstate.func_177230_c().func_176201_c(iblockstate);
+                    IBlockState iblockstate = TileEntity.this.world.getBlockState(TileEntity.this.pos);
+                    int i = iblockstate.getBlock().getMetaFromState(iblockstate);
 
                     if (i < 0)
                     {
@@ -273,55 +282,261 @@
         }
     }
 
-    public void func_174878_a(BlockPos p_174878_1_)
+    public void setPos(BlockPos posIn)
     {
-        this.field_174879_c = p_174878_1_.func_185334_h();
+        this.pos = posIn.toImmutable();
     }
 
-    public boolean func_183000_F()
+    public boolean onlyOpsCanSetNbt()
     {
         return false;
     }
 
     @Nullable
-    public ITextComponent func_145748_c_()
+    public ITextComponent getDisplayName()
     {
         return null;
     }
 
-    public void func_189667_a(Rotation p_189667_1_)
+    public void rotate(Rotation rotationIn)
     {
     }
 
-    public void func_189668_a(Mirror p_189668_1_)
+    public void mirror(Mirror mirrorIn)
     {
     }
 
+    // -- BEGIN FORGE PATCHES --
+    /**
+     * Called when you receive a TileEntityData packet for the location this
+     * TileEntity is currently in. On the client, the NetworkManager will always
+     * be the remote server. On the server, it will be whomever is responsible for
+     * sending the packet.
+     *
+     * @param net The NetworkManager the packet originated from
+     * @param pkt The data packet
+     */
+    public void onDataPacket(net.minecraft.network.NetworkManager net, net.minecraft.network.play.server.SPacketUpdateTileEntity pkt)
+    {
+    }
+
+    /**
+     * Called when the chunk's TE update tag, gotten from {@link #getUpdateTag()}, is received on the client.
+     * <p>
+     * Used to handle this tag in a special way. By default this simply calls {@link #readFromNBT(NBTTagCompound)}.
+     *
+     * @param tag The {@link NBTTagCompound} sent from {@link #getUpdateTag()}
+     */
+    public void handleUpdateTag(NBTTagCompound tag)
+    {
+        this.readFromNBT(tag);
+    }
+
+    /**
+     * Called when the chunk this TileEntity is on is Unloaded.
+     */
+    public void onChunkUnload()
+    {
+    }
+
+    private boolean isVanilla = getClass().getName().startsWith("net.minecraft.");
+    /**
+     * Called from Chunk.setBlockIDWithMetadata and Chunk.fillChunk, determines if this tile entity should be re-created when the ID, or Metadata changes.
+     * Use with caution as this will leave straggler TileEntities, or create conflicts with other TileEntities if not used properly.
+     *
+     * @param world Current world
+     * @param pos Tile's world position
+     * @param oldState The old ID of the block
+     * @param newState The new ID of the block (May be the same)
+     * @return true forcing the invalidation of the existing TE, false not to invalidate the existing TE
+     */
+    public boolean shouldRefresh(World world, BlockPos pos, IBlockState oldState, IBlockState newSate)
+    {
+        return isVanilla ? (oldState.getBlock() != newSate.getBlock()) : oldState != newSate;
+    }
+
+    public boolean shouldRenderInPass(int pass)
+    {
+        return pass == 0;
+    }
+
+    /**
+     * Sometimes default render bounding box: infinite in scope. Used to control rendering on {@link TileEntitySpecialRenderer}.
+     */
+    public static final net.minecraft.util.math.AxisAlignedBB INFINITE_EXTENT_AABB = new net.minecraft.util.math.AxisAlignedBB(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
+    /**
+     * Return an {@link AxisAlignedBB} that controls the visible scope of a {@link TileEntitySpecialRenderer} associated with this {@link TileEntity}
+     * Defaults to the collision bounding box {@link Block#getCollisionBoundingBoxFromPool(World, int, int, int)} associated with the block
+     * at this location.
+     *
+     * @return an appropriately size {@link AxisAlignedBB} for the {@link TileEntity}
+     */
+    @SideOnly(Side.CLIENT)
+    public net.minecraft.util.math.AxisAlignedBB getRenderBoundingBox()
+    {
+        net.minecraft.util.math.AxisAlignedBB bb = INFINITE_EXTENT_AABB;
+        Block type = getBlockType();
+        BlockPos pos = getPos();
+        if (type == Blocks.ENCHANTING_TABLE)
+        {
+            bb = new net.minecraft.util.math.AxisAlignedBB(pos, pos.add(1, 1, 1));
+        }
+        else if (type == Blocks.CHEST || type == Blocks.TRAPPED_CHEST)
+        {
+            bb = new net.minecraft.util.math.AxisAlignedBB(pos.add(-1, 0, -1), pos.add(2, 2, 2));
+        }
+        else if (type == Blocks.STRUCTURE_BLOCK)
+        {
+            bb = INFINITE_EXTENT_AABB;
+        }
+        else if (type != null && type != Blocks.BEACON)
+        {
+            net.minecraft.util.math.AxisAlignedBB cbb = null;
+            try
+            {
+                cbb = world.getBlockState(getPos()).getCollisionBoundingBox(world, pos).offset(pos);
+            }
+            catch (Exception e)
+            {
+                // We have to capture any exceptions that may occur here because BUKKIT servers like to send
+                // the tile entity data BEFORE the chunk data, you know, the OPPOSITE of what vanilla does!
+                // So we can not GARENTEE that the world state is the real state for the block...
+                // So, once again in the long line of US having to accommodate BUKKIT breaking things,
+                // here it is, assume that the TE is only 1 cubic block. Problem with this is that it may
+                // cause the TileEntity renderer to error further down the line! But alas, nothing we can do.
+                cbb = new net.minecraft.util.math.AxisAlignedBB(getPos().add(-1, 0, -1), getPos().add(1, 1, 1));
+            }
+            if (cbb != null) bb = cbb;
+        }
+        return bb;
+    }
+
+    /**
+     * Checks if this tile entity knows how to render its 'breaking' overlay effect.
+     * If this returns true, The TileEntitySpecialRenderer will be called again with break progress set.
+     * @return True to re-render tile with breaking effect.
+     */
+    public boolean canRenderBreaking()
+    {
+        Block block = this.getBlockType();
+        return (block instanceof net.minecraft.block.BlockChest ||
+                block instanceof net.minecraft.block.BlockEnderChest ||
+                block instanceof net.minecraft.block.BlockSign ||
+                block instanceof net.minecraft.block.BlockSkull);
+    }
+
+    private NBTTagCompound customTileData;
+
+    /**
+     * Gets a {@link NBTTagCompound} that can be used to store custom data for this tile entity.
+     * It will be written, and read from disc, so it persists over world saves.
+     *
+     * @return A compound tag for custom data
+     */
+    public NBTTagCompound getTileData()
+    {
+        if (this.customTileData == null)
+        {
+            this.customTileData = new NBTTagCompound();
+        }
+        return this.customTileData;
+    }
+
+    /**
+     * Determines if the player can overwrite the NBT data of this tile entity while they place it using a ItemStack.
+     * Added as a fix for MC-75630 - Exploit with signs and command blocks
+     * @return True to prevent NBT copy, false to allow.
+     */
+    public boolean restrictNBTCopy()
+    {
+        return this instanceof TileEntityCommandBlock ||
+               this instanceof TileEntityMobSpawner ||
+               this instanceof TileEntitySign;
+    }
+
+
+    /**
+     * Called when this is first added to the world (by {@link World#addTileEntity(TileEntity)}).
+     * Override instead of adding {@code if (firstTick)} stuff in update.
+     */
+    public void onLoad()
+    {
+        // NOOP
+    }
+
+    /**
+     * If the TileEntitySpecialRenderer associated with this TileEntity can be batched in with another renderers, and won't access the GL state.
+     * If TileEntity returns true, then TESR should have the same functionality as (and probably extend) the FastTESR class.
+     */
+    public boolean hasFastRenderer()
+    {
+        return false;
+    }
+
+    private net.minecraftforge.common.capabilities.CapabilityDispatcher capabilities;
+    public TileEntity()
+    {
+        capabilities = net.minecraftforge.event.ForgeEventFactory.gatherCapabilities(this);
+    }
+
+    @Override
+    public boolean hasCapability(net.minecraftforge.common.capabilities.Capability<?> capability, @Nullable net.minecraft.util.EnumFacing facing)
+    {
+        return capabilities == null ? false : capabilities.hasCapability(capability, facing);
+    }
+
+    @Override
+    @Nullable
+    public <T> T getCapability(net.minecraftforge.common.capabilities.Capability<T> capability, @Nullable net.minecraft.util.EnumFacing facing)
+    {
+        return capabilities == null ? null : capabilities.getCapability(capability, facing);
+    }
+
+    public void deserializeNBT(NBTTagCompound nbt)
+    {
+        this.readFromNBT(nbt);
+    }
+
+    public NBTTagCompound serializeNBT()
+    {
+        NBTTagCompound ret = new NBTTagCompound();
+        this.writeToNBT(ret);
+        return ret;
+    }
+
     static
     {
-        func_190560_a("furnace", TileEntityFurnace.class);
-        func_190560_a("chest", TileEntityChest.class);
-        func_190560_a("ender_chest", TileEntityEnderChest.class);
-        func_190560_a("jukebox", BlockJukebox.TileEntityJukebox.class);
-        func_190560_a("dispenser", TileEntityDispenser.class);
-        func_190560_a("dropper", TileEntityDropper.class);
-        func_190560_a("sign", TileEntitySign.class);
-        func_190560_a("mob_spawner", TileEntityMobSpawner.class);
-        func_190560_a("noteblock", TileEntityNote.class);
-        func_190560_a("piston", TileEntityPiston.class);
-        func_190560_a("brewing_stand", TileEntityBrewingStand.class);
-        func_190560_a("enchanting_table", TileEntityEnchantmentTable.class);
-        func_190560_a("end_portal", TileEntityEndPortal.class);
-        func_190560_a("beacon", TileEntityBeacon.class);
-        func_190560_a("skull", TileEntitySkull.class);
-        func_190560_a("daylight_detector", TileEntityDaylightDetector.class);
-        func_190560_a("hopper", TileEntityHopper.class);
-        func_190560_a("comparator", TileEntityComparator.class);
-        func_190560_a("flower_pot", TileEntityFlowerPot.class);
-        func_190560_a("banner", TileEntityBanner.class);
-        func_190560_a("structure_block", TileEntityStructure.class);
-        func_190560_a("end_gateway", TileEntityEndGateway.class);
-        func_190560_a("command_block", TileEntityCommandBlock.class);
-        func_190560_a("shulker_box", TileEntityShulkerBox.class);
+        register("furnace", TileEntityFurnace.class);
+        register("chest", TileEntityChest.class);
+        register("ender_chest", TileEntityEnderChest.class);
+        register("jukebox", BlockJukebox.TileEntityJukebox.class);
+        register("dispenser", TileEntityDispenser.class);
+        register("dropper", TileEntityDropper.class);
+        register("sign", TileEntitySign.class);
+        register("mob_spawner", TileEntityMobSpawner.class);
+        register("noteblock", TileEntityNote.class);
+        register("piston", TileEntityPiston.class);
+        register("brewing_stand", TileEntityBrewingStand.class);
+        register("enchanting_table", TileEntityEnchantmentTable.class);
+        register("end_portal", TileEntityEndPortal.class);
+        register("beacon", TileEntityBeacon.class);
+        register("skull", TileEntitySkull.class);
+        register("daylight_detector", TileEntityDaylightDetector.class);
+        register("hopper", TileEntityHopper.class);
+        register("comparator", TileEntityComparator.class);
+        register("flower_pot", TileEntityFlowerPot.class);
+        register("banner", TileEntityBanner.class);
+        register("structure_block", TileEntityStructure.class);
+        register("end_gateway", TileEntityEndGateway.class);
+        register("command_block", TileEntityCommandBlock.class);
+        register("shulker_box", TileEntityShulkerBox.class);
+    }  // CraftBukkit start - add method
+    public InventoryHolder getOwner() {
+        if (world == null) return null;
+        org.bukkit.block.BlockState state = world.getWorld().getBlockAt(pos.getX(), pos.getY(), pos.getZ()).getState();
+        if (state instanceof InventoryHolder) return (InventoryHolder) state;
+        return null;
     }
+    // CraftBukkit end
+
 }
