--- ../src-base/minecraft/net/minecraft/network/NetHandlerPlayServer.java
+++ ../src-work/minecraft/net/minecraft/network/NetHandlerPlayServer.java
@@ -8,8 +8,12 @@
 import io.netty.util.concurrent.GenericFutureListener;
 import java.io.IOException;
 import java.util.Collections;
+import java.util.HashSet;
 import java.util.List;
 import java.util.Set;
+import java.util.concurrent.ExecutionException;
+import java.util.concurrent.atomic.AtomicIntegerFieldUpdater;
+
 import net.minecraft.block.BlockCommandBlock;
 import net.minecraft.block.material.Material;
 import net.minecraft.block.state.IBlockState;
@@ -17,6 +21,7 @@
 import net.minecraft.crash.CrashReportCategory;
 import net.minecraft.crash.ICrashReportDetail;
 import net.minecraft.entity.Entity;
+import net.minecraft.entity.EntityLiving;
 import net.minecraft.entity.IJumpingMount;
 import net.minecraft.entity.MoverType;
 import net.minecraft.entity.item.EntityBoat;
@@ -38,10 +43,9 @@
 import net.minecraft.inventory.EntityEquipmentSlot;
 import net.minecraft.inventory.IInventory;
 import net.minecraft.inventory.Slot;
-import net.minecraft.item.ItemElytra;
+import net.minecraft.item.*;
 import net.minecraft.item.ItemStack;
-import net.minecraft.item.ItemWritableBook;
-import net.minecraft.item.ItemWrittenBook;
+import net.minecraft.nbt.NBTBase;
 import net.minecraft.nbt.NBTTagCompound;
 import net.minecraft.nbt.NBTTagList;
 import net.minecraft.nbt.NBTTagString;
@@ -73,17 +77,7 @@
 import net.minecraft.network.play.client.CPacketUpdateSign;
 import net.minecraft.network.play.client.CPacketUseEntity;
 import net.minecraft.network.play.client.CPacketVehicleMove;
-import net.minecraft.network.play.server.SPacketBlockChange;
-import net.minecraft.network.play.server.SPacketChat;
-import net.minecraft.network.play.server.SPacketConfirmTransaction;
-import net.minecraft.network.play.server.SPacketDisconnect;
-import net.minecraft.network.play.server.SPacketHeldItemChange;
-import net.minecraft.network.play.server.SPacketKeepAlive;
-import net.minecraft.network.play.server.SPacketMoveVehicle;
-import net.minecraft.network.play.server.SPacketPlayerPosLook;
-import net.minecraft.network.play.server.SPacketRespawn;
-import net.minecraft.network.play.server.SPacketSetSlot;
-import net.minecraft.network.play.server.SPacketTabComplete;
+import net.minecraft.network.play.server.*;
 import net.minecraft.server.MinecraftServer;
 import net.minecraft.stats.AchievementList;
 import net.minecraft.tileentity.CommandBlockBaseLogic;
@@ -102,6 +96,7 @@
 import net.minecraft.util.Rotation;
 import net.minecraft.util.math.BlockPos;
 import net.minecraft.util.math.MathHelper;
+import net.minecraft.util.math.RayTraceResult;
 import net.minecraft.util.math.Vec3d;
 import net.minecraft.util.text.ITextComponent;
 import net.minecraft.util.text.TextComponentString;
@@ -109,427 +104,738 @@
 import net.minecraft.util.text.TextFormatting;
 import net.minecraft.world.GameType;
 import net.minecraft.world.WorldServer;
+import net.minecraftforge.common.ForgeHooks;
 import org.apache.commons.lang3.StringUtils;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
+import org.bukkit.Location;
+import org.bukkit.craftbukkit.block.CraftBlock;
+import org.bukkit.craftbukkit.block.CraftSign;
+import org.bukkit.craftbukkit.entity.CraftPlayer;
+import org.bukkit.craftbukkit.event.CraftEventFactory;
+import org.bukkit.craftbukkit.inventory.CraftInventoryView;
+import org.bukkit.craftbukkit.inventory.CraftItemStack;
+import org.bukkit.craftbukkit.util.CraftChatMessage;
+import org.bukkit.craftbukkit.util.LazyPlayerSet;
+import org.bukkit.craftbukkit.util.Waitable;
+import org.bukkit.entity.HumanEntity;
+import org.bukkit.entity.Player;
+import org.bukkit.event.Event;
+import org.bukkit.event.block.Action;
+import org.bukkit.event.block.SignChangeEvent;
+import org.bukkit.event.inventory.*;
+import org.bukkit.event.player.*;
+import org.bukkit.inventory.*;
+import org.bukkit.util.Vector;
+import net.minecraft.network.*;
 
 public class NetHandlerPlayServer implements INetHandlerPlayServer, ITickable
 {
-    private static final Logger field_147370_c = LogManager.getLogger();
-    public final NetworkManager field_147371_a;
-    private final MinecraftServer field_147367_d;
-    public EntityPlayerMP field_147369_b;
-    private int field_147368_e;
-    private int field_147378_h;
-    private long field_147379_i;
-    private long field_147377_k;
-    private int field_147374_l;
-    private int field_147375_m;
-    private final IntHashMap<Short> field_147372_n = new IntHashMap();
-    private double field_184349_l;
-    private double field_184350_m;
-    private double field_184351_n;
-    private double field_184352_o;
-    private double field_184353_p;
-    private double field_184354_q;
-    private Entity field_184355_r;
-    private double field_184356_s;
-    private double field_184357_t;
-    private double field_184358_u;
-    private double field_184359_v;
-    private double field_184360_w;
-    private double field_184361_x;
-    private Vec3d field_184362_y;
-    private int field_184363_z;
-    private int field_184343_A;
-    private boolean field_184344_B;
-    private int field_147365_f;
-    private boolean field_184345_D;
-    private int field_184346_E;
-    private int field_184347_F;
-    private int field_184348_G;
+    private static final Logger LOGGER = LogManager.getLogger();
+    public final NetworkManager netManager;
+    private final MinecraftServer serverController;
+    public EntityPlayerMP playerEntity;
+    private int networkTickCount;
+    private int keepAliveId;
+    private long lastPingTime;
+    private long lastSentPingPacket;
+    private int chatSpamThresholdCount;
+    private int itemDropThreshold;
+    private final IntHashMap<Short> pendingTransactions = new IntHashMap();
+    private double firstGoodX;
+    private double firstGoodY;
+    private double firstGoodZ;
+    private double lastGoodX;
+    private double lastGoodY;
+    private double lastGoodZ;
+    private Entity lowestRiddenEnt;
+    private double lowestRiddenX;
+    private double lowestRiddenY;
+    private double lowestRiddenZ;
+    private double lowestRiddenX1;
+    private double lowestRiddenY1;
+    private double lowestRiddenZ1;
+    private Vec3d targetPos;
+    private int teleportId;
+    private int lastPositionUpdate;
+    private boolean floating;
+    private int floatingTickCount;
+    private boolean vehicleFloating;
+    private int vehicleFloatingTickCount;
+    private int movePacketCounter;
+    private int lastMovePacketCounter;
+    private boolean processedDisconnect; // CraftBukkit - Added
+    // CraftBukkit start - multithreaded fields
+    private static final AtomicIntegerFieldUpdater chatSpamField = AtomicIntegerFieldUpdater.newUpdater(net.minecraft.network.NetHandlerPlayServer.class, "chatThrottle");
+    // CraftBukkit end
 
-    public NetHandlerPlayServer(MinecraftServer p_i1530_1_, NetworkManager p_i1530_2_, EntityPlayerMP p_i1530_3_)
+    public NetHandlerPlayServer(MinecraftServer server, NetworkManager networkManagerIn, EntityPlayerMP playerIn)
     {
-        this.field_147367_d = p_i1530_1_;
-        this.field_147371_a = p_i1530_2_;
-        p_i1530_2_.func_150719_a(this);
-        this.field_147369_b = p_i1530_3_;
-        p_i1530_3_.field_71135_a = this;
+        this.serverController = server;
+        this.netManager = networkManagerIn;
+        networkManagerIn.setNetHandler(this);
+        this.playerEntity = playerIn;
+        playerIn.connection = this;
+        // CraftBukkit start - add fields and methods
+        this.server = server.server;
     }
 
-    public void func_73660_a()
+    private final org.bukkit.craftbukkit.CraftServer server;
+    private int lastTick = MinecraftServer.currentTick;
+    private int allowedPlayerTicks = 1;
+    private int lastDropTick = MinecraftServer.currentTick;
+    private int lastBookTick  = MinecraftServer.currentTick;
+    private int dropCount = 0;
+    private static final int SURVIVAL_PLACE_DISTANCE_SQUARED = 6 * 6;
+    private static final int CREATIVE_PLACE_DISTANCE_SQUARED = 7 * 7;
+
+    // Get position of last block hit for BlockDamageLevel.STOPPED
+    private double lastPosX = Double.MAX_VALUE;
+    private double lastPosY = Double.MAX_VALUE;
+    private double lastPosZ = Double.MAX_VALUE;
+    private float lastPitch = Float.MAX_VALUE;
+    private float lastYaw = Float.MAX_VALUE;
+    private boolean justTeleported = false;
+
+    public CraftPlayer getPlayer() {
+        return (this.playerEntity == null) ? null : (CraftPlayer) this.playerEntity.getBukkitEntity();
+    }
+    private final static HashSet<Integer> invalidItems = new HashSet<Integer>(java.util.Arrays.asList(8, 9, 10, 11, 26, 34, 36, 43, 51, 55, 59, 62, 63, 64, 68, 71, 74, 75, 83, 90, 92, 93, 94, 104, 105, 115, 117, 118, 119, 125, 127, 132, 140, 141, 142, 144)); // TODO: Check after every update.
+    // CraftBukkit end
+
+    public void update()
     {
-        this.func_184342_d();
-        this.field_147369_b.func_71127_g();
-        this.field_147369_b.func_70080_a(this.field_184349_l, this.field_184350_m, this.field_184351_n, this.field_147369_b.field_70177_z, this.field_147369_b.field_70125_A);
-        ++this.field_147368_e;
-        this.field_184348_G = this.field_184347_F;
+        this.captureCurrentPosition();
+        this.playerEntity.onUpdateEntity();
+        this.playerEntity.setPositionAndRotation(this.firstGoodX, this.firstGoodY, this.firstGoodZ, this.playerEntity.rotationYaw, this.playerEntity.rotationPitch);
+        ++this.networkTickCount;
+        this.lastMovePacketCounter = this.movePacketCounter;
 
-        if (this.field_184344_B)
+        if (this.floating)
         {
-            if (++this.field_147365_f > 80)
+            if (++this.floatingTickCount > 80)
             {
-                field_147370_c.warn("{} was kicked for floating too long!", new Object[] {this.field_147369_b.func_70005_c_()});
-                this.func_147360_c("Flying is not enabled on this server");
+                LOGGER.warn("{} was kicked for floating too long!", new Object[] {this.playerEntity.getName()});
+                this.disconnect("Flying is not enabled on this server");
                 return;
             }
         }
         else
         {
-            this.field_184344_B = false;
-            this.field_147365_f = 0;
+            this.floating = false;
+            this.floatingTickCount = 0;
         }
 
-        this.field_184355_r = this.field_147369_b.func_184208_bv();
+        this.lowestRiddenEnt = this.playerEntity.getLowestRidingEntity();
 
-        if (this.field_184355_r != this.field_147369_b && this.field_184355_r.func_184179_bs() == this.field_147369_b)
+        if (this.lowestRiddenEnt != this.playerEntity && this.lowestRiddenEnt.getControllingPassenger() == this.playerEntity)
         {
-            this.field_184356_s = this.field_184355_r.field_70165_t;
-            this.field_184357_t = this.field_184355_r.field_70163_u;
-            this.field_184358_u = this.field_184355_r.field_70161_v;
-            this.field_184359_v = this.field_184355_r.field_70165_t;
-            this.field_184360_w = this.field_184355_r.field_70163_u;
-            this.field_184361_x = this.field_184355_r.field_70161_v;
+            this.lowestRiddenX = this.lowestRiddenEnt.posX;
+            this.lowestRiddenY = this.lowestRiddenEnt.posY;
+            this.lowestRiddenZ = this.lowestRiddenEnt.posZ;
+            this.lowestRiddenX1 = this.lowestRiddenEnt.posX;
+            this.lowestRiddenY1 = this.lowestRiddenEnt.posY;
+            this.lowestRiddenZ1 = this.lowestRiddenEnt.posZ;
 
-            if (this.field_184345_D && this.field_147369_b.func_184208_bv().func_184179_bs() == this.field_147369_b)
+            if (this.vehicleFloating && this.playerEntity.getLowestRidingEntity().getControllingPassenger() == this.playerEntity)
             {
-                if (++this.field_184346_E > 80)
+                if (++this.vehicleFloatingTickCount > 80)
                 {
-                    field_147370_c.warn("{} was kicked for floating a vehicle too long!", new Object[] {this.field_147369_b.func_70005_c_()});
-                    this.func_147360_c("Flying is not enabled on this server");
+                    LOGGER.warn("{} was kicked for floating a vehicle too long!", new Object[] {this.playerEntity.getName()});
+                    this.disconnect("Flying is not enabled on this server");
                     return;
                 }
             }
             else
             {
-                this.field_184345_D = false;
-                this.field_184346_E = 0;
+                this.vehicleFloating = false;
+                this.vehicleFloatingTickCount = 0;
             }
         }
         else
         {
-            this.field_184355_r = null;
-            this.field_184345_D = false;
-            this.field_184346_E = 0;
+            this.lowestRiddenEnt = null;
+            this.vehicleFloating = false;
+            this.vehicleFloatingTickCount = 0;
         }
 
-        this.field_147367_d.field_71304_b.func_76320_a("keepAlive");
+        this.serverController.theProfiler.startSection("keepAlive");
 
-        if ((long)this.field_147368_e - this.field_147377_k > 40L)
+        if ((long)this.networkTickCount - this.lastSentPingPacket > 40L)
         {
-            this.field_147377_k = (long)this.field_147368_e;
-            this.field_147379_i = this.func_147363_d();
-            this.field_147378_h = (int)this.field_147379_i;
-            this.func_147359_a(new SPacketKeepAlive(this.field_147378_h));
+            this.lastSentPingPacket = (long)this.networkTickCount;
+            this.lastPingTime = this.currentTimeMillis();
+            this.keepAliveId = (int)this.lastPingTime;
+            this.sendPacket(new SPacketKeepAlive(this.keepAliveId));
         }
 
-        this.field_147367_d.field_71304_b.func_76319_b();
+        this.serverController.theProfiler.endSection();
 
-        if (this.field_147374_l > 0)
+        if (this.chatSpamThresholdCount > 0)
         {
-            --this.field_147374_l;
+            --this.chatSpamThresholdCount;
         }
 
-        if (this.field_147375_m > 0)
+        if (this.itemDropThreshold > 0)
         {
-            --this.field_147375_m;
+            --this.itemDropThreshold;
         }
 
-        if (this.field_147369_b.func_154331_x() > 0L && this.field_147367_d.func_143007_ar() > 0 && MinecraftServer.func_130071_aq() - this.field_147369_b.func_154331_x() > (long)(this.field_147367_d.func_143007_ar() * 1000 * 60))
+        if (this.playerEntity.getLastActiveTime() > 0L && this.serverController.getMaxPlayerIdleMinutes() > 0 && MinecraftServer.getCurrentTimeMillis() - this.playerEntity.getLastActiveTime() > (long)(this.serverController.getMaxPlayerIdleMinutes() * 1000 * 60))
         {
-            this.func_147360_c("You have been idle for too long!");
+            this.disconnect("You have been idle for too long!");
         }
     }
 
-    public void func_184342_d()
+    public void captureCurrentPosition()
     {
-        this.field_184349_l = this.field_147369_b.field_70165_t;
-        this.field_184350_m = this.field_147369_b.field_70163_u;
-        this.field_184351_n = this.field_147369_b.field_70161_v;
-        this.field_184352_o = this.field_147369_b.field_70165_t;
-        this.field_184353_p = this.field_147369_b.field_70163_u;
-        this.field_184354_q = this.field_147369_b.field_70161_v;
+        this.firstGoodX = this.playerEntity.posX;
+        this.firstGoodY = this.playerEntity.posY;
+        this.firstGoodZ = this.playerEntity.posZ;
+        this.lastGoodX = this.playerEntity.posX;
+        this.lastGoodY = this.playerEntity.posY;
+        this.lastGoodZ = this.playerEntity.posZ;
     }
+    // CraftBukkit start - add method
+    public void chat(String s, boolean async) {
+        if (s.isEmpty() || this.playerEntity.getChatVisibility() == EntityPlayer.EnumChatVisibility.HIDDEN) {
+            return;
+        }
 
-    public NetworkManager func_147362_b()
+        if (!async && s.startsWith("/")) {
+            this.handleSlashCommand(s);
+        } else if (this.playerEntity.getChatVisibility() == EntityPlayer.EnumChatVisibility.SYSTEM) {
+            // Do nothing, this is coming from a plugin
+        } else {
+            Player player = this.getPlayer();
+            AsyncPlayerChatEvent event = new AsyncPlayerChatEvent(async, player, s, new LazyPlayerSet(serverController));
+            this.server.getPluginManager().callEvent(event);
+
+            if (PlayerChatEvent.getHandlerList().getRegisteredListeners().length != 0) {
+                // Evil plugins still listening to deprecated event
+                final PlayerChatEvent queueEvent = new PlayerChatEvent(player, event.getMessage(), event.getFormat(), event.getRecipients());
+                queueEvent.setCancelled(event.isCancelled());
+                Waitable waitable = new Waitable() {
+                    @Override
+                    protected Object evaluate() {
+                        org.bukkit.Bukkit.getPluginManager().callEvent(queueEvent);
+
+                        if (queueEvent.isCancelled()) {
+                            return null;
+                        }
+
+                        String message = String.format(queueEvent.getFormat(), queueEvent.getPlayer().getDisplayName(), queueEvent.getMessage());
+                        net.minecraft.network.NetHandlerPlayServer.this.serverController.console.sendMessage(message);
+                        if (((LazyPlayerSet) queueEvent.getRecipients()).isLazy()) {
+                            for (Object player : net.minecraft.network.NetHandlerPlayServer.this.serverController.getPlayerList().playerEntityList) {
+                                ((EntityPlayerMP) player).sendMessage(CraftChatMessage.fromString(message));
+                            }
+                        } else {
+                            for (Player player : queueEvent.getRecipients()) {
+                                player.sendMessage(message);
+                            }
+                        }
+                        return null;
+                    }};
+                if (async) {
+                    serverController.processQueue.add(waitable);
+                } else {
+                    waitable.run();
+                }
+                try {
+                    waitable.get();
+                } catch (InterruptedException e) {
+                    Thread.currentThread().interrupt(); // This is proper habit for java. If we aren't handling it, pass it on!
+                } catch (ExecutionException e) {
+                    throw new RuntimeException("Exception processing chat event", e.getCause());
+                }
+            } else {
+                if (event.isCancelled()) {
+                    return;
+                }
+
+                s = String.format(event.getFormat(), event.getPlayer().getDisplayName(), event.getMessage());
+                serverController.console.sendMessage(s);
+                if (((LazyPlayerSet) event.getRecipients()).isLazy()) {
+                    for (Object recipient : serverController.getPlayerList().playerEntityList) {
+                        ((EntityPlayerMP) recipient).sendMessage(CraftChatMessage.fromString(s));
+                    }
+                } else {
+                    for (Player recipient : event.getRecipients()) {
+                        recipient.sendMessage(s);
+                    }
+                }
+            }
+        }
+    }
+    // CraftBukkit end
+    public NetworkManager getNetworkManager()
     {
-        return this.field_147371_a;
+        return this.netManager;
     }
 
-    public void func_147360_c(String p_147360_1_)
+    public void disconnect(String reason)
     {
-        final TextComponentString textcomponentstring = new TextComponentString(p_147360_1_);
-        this.field_147371_a.func_179288_a(new SPacketDisconnect(textcomponentstring), new GenericFutureListener < Future <? super Void >> ()
+        // CraftBukkit start - fire PlayerKickEvent
+        if (this.processedDisconnect) {
+            return;
+        }
+        String leaveMessage = TextFormatting.YELLOW + this.playerEntity.getName() + " left the game.";
+
+        PlayerKickEvent event = new PlayerKickEvent(this.server.getPlayer(this.playerEntity), reason, leaveMessage);
+
+        if (this.server.getServer().isServerRunning()) {
+            this.server.getPluginManager().callEvent(event);
+        }
+
+        if (event.isCancelled()) {
+            // Do not kick the player
+            return;
+        }
+        // Send the possibly modified leave message
+        leaveMessage = event.getReason();
+        // CraftBukkit end
+        final TextComponentString textcomponentstring = new TextComponentString(reason);
+        this.netManager.sendPacket(new SPacketDisconnect(textcomponentstring), new GenericFutureListener < Future <? super Void >> ()
         {
             public void operationComplete(Future <? super Void > p_operationComplete_1_) throws Exception
             {
-                NetHandlerPlayServer.this.field_147371_a.func_150718_a(textcomponentstring);
+                NetHandlerPlayServer.this.netManager.closeChannel(textcomponentstring);
             }
         }, new GenericFutureListener[0]);
-        this.field_147371_a.func_150721_g();
-        Futures.getUnchecked(this.field_147367_d.func_152344_a(new Runnable()
+        this.netManager.disableAutoRead();
+        Futures.getUnchecked(this.serverController.addScheduledTask(new Runnable()
         {
             public void run()
             {
-                NetHandlerPlayServer.this.field_147371_a.func_179293_l();
+                NetHandlerPlayServer.this.netManager.checkDisconnected();
             }
         }));
     }
 
-    public void func_147358_a(CPacketInput p_147358_1_)
+    public void processInput(CPacketInput packetIn)
     {
-        PacketThreadUtil.func_180031_a(p_147358_1_, this, this.field_147369_b.func_71121_q());
-        this.field_147369_b.func_110430_a(p_147358_1_.func_149620_c(), p_147358_1_.func_149616_d(), p_147358_1_.func_149618_e(), p_147358_1_.func_149617_f());
+        PacketThreadUtil.checkThreadAndEnqueue(packetIn, this, this.playerEntity.getServerWorld());
+        this.playerEntity.setEntityActionState(packetIn.getStrafeSpeed(), packetIn.getForwardSpeed(), packetIn.isJumping(), packetIn.isSneaking());
     }
 
-    private static boolean func_183006_b(CPacketPlayer p_183006_0_)
+    private static boolean isMovePlayerPacketInvalid(CPacketPlayer packetIn)
     {
-        return Doubles.isFinite(p_183006_0_.func_186997_a(0.0D)) && Doubles.isFinite(p_183006_0_.func_186996_b(0.0D)) && Doubles.isFinite(p_183006_0_.func_187000_c(0.0D)) && Floats.isFinite(p_183006_0_.func_186998_b(0.0F)) && Floats.isFinite(p_183006_0_.func_186999_a(0.0F)) ? false : Math.abs(p_183006_0_.func_186997_a(0.0D)) <= 3.0E7D && Math.abs(p_183006_0_.func_187000_c(0.0D)) <= 3.0E7D;
+        return Doubles.isFinite(packetIn.getX(0.0D)) && Doubles.isFinite(packetIn.getY(0.0D)) && Doubles.isFinite(packetIn.getZ(0.0D)) && Floats.isFinite(packetIn.getPitch(0.0F)) && Floats.isFinite(packetIn.getYaw(0.0F)) ? false : Math.abs(packetIn.getX(0.0D)) <= 3.0E7D && Math.abs(packetIn.getZ(0.0D)) <= 3.0E7D;
     }
 
-    private static boolean func_184341_b(CPacketVehicleMove p_184341_0_)
+    private static boolean isMoveVehiclePacketInvalid(CPacketVehicleMove packetIn)
     {
-        return !Doubles.isFinite(p_184341_0_.func_187004_a()) || !Doubles.isFinite(p_184341_0_.func_187002_b()) || !Doubles.isFinite(p_184341_0_.func_187003_c()) || !Floats.isFinite(p_184341_0_.func_187005_e()) || !Floats.isFinite(p_184341_0_.func_187006_d());
+        return !Doubles.isFinite(packetIn.getX()) || !Doubles.isFinite(packetIn.getY()) || !Doubles.isFinite(packetIn.getZ()) || !Floats.isFinite(packetIn.getPitch()) || !Floats.isFinite(packetIn.getYaw());
     }
 
-    public void func_184338_a(CPacketVehicleMove p_184338_1_)
+    public void processVehicleMove(CPacketVehicleMove packetIn)
     {
-        PacketThreadUtil.func_180031_a(p_184338_1_, this, this.field_147369_b.func_71121_q());
+        PacketThreadUtil.checkThreadAndEnqueue(packetIn, this, this.playerEntity.getServerWorld());
 
-        if (func_184341_b(p_184338_1_))
+        if (isMoveVehiclePacketInvalid(packetIn))
         {
-            this.func_147360_c("Invalid move vehicle packet received");
+            this.disconnect("Invalid move vehicle packet received");
         }
         else
         {
-            Entity entity = this.field_147369_b.func_184208_bv();
+            Entity entity = this.playerEntity.getLowestRidingEntity();
 
-            if (entity != this.field_147369_b && entity.func_184179_bs() == this.field_147369_b && entity == this.field_184355_r)
+            if (entity != this.playerEntity && entity.getControllingPassenger() == this.playerEntity && entity == this.lowestRiddenEnt)
             {
-                WorldServer worldserver = this.field_147369_b.func_71121_q();
-                double d0 = entity.field_70165_t;
-                double d1 = entity.field_70163_u;
-                double d2 = entity.field_70161_v;
-                double d3 = p_184338_1_.func_187004_a();
-                double d4 = p_184338_1_.func_187002_b();
-                double d5 = p_184338_1_.func_187003_c();
-                float f = p_184338_1_.func_187006_d();
-                float f1 = p_184338_1_.func_187005_e();
-                double d6 = d3 - this.field_184356_s;
-                double d7 = d4 - this.field_184357_t;
-                double d8 = d5 - this.field_184358_u;
-                double d9 = entity.field_70159_w * entity.field_70159_w + entity.field_70181_x * entity.field_70181_x + entity.field_70179_y * entity.field_70179_y;
+                WorldServer worldserver = this.playerEntity.getServerWorld();
+                double d0 = entity.posX;
+                double d1 = entity.posY;
+                double d2 = entity.posZ;
+                double d3 = packetIn.getX();
+                double d4 = packetIn.getY();
+                double d5 = packetIn.getZ();
+                float f = packetIn.getYaw();
+                float f1 = packetIn.getPitch();
+                double d6 = d3 - this.lowestRiddenX;
+                double d7 = d4 - this.lowestRiddenY;
+                double d8 = d5 - this.lowestRiddenZ;
+                double d9 = entity.motionX * entity.motionX + entity.motionY * entity.motionY + entity.motionZ * entity.motionZ;
                 double d10 = d6 * d6 + d7 * d7 + d8 * d8;
 
-                if (d10 - d9 > 100.0D && (!this.field_147367_d.func_71264_H() || !this.field_147367_d.func_71214_G().equals(entity.func_70005_c_())))
+                if (d10 - d9 > 100.0D && (!this.serverController.isSinglePlayer() || !this.serverController.getServerOwner().equals(entity.getName())))
                 {
-                    field_147370_c.warn("{} (vehicle of {}) moved too quickly! {},{},{}", new Object[] {entity.func_70005_c_(), this.field_147369_b.func_70005_c_(), Double.valueOf(d6), Double.valueOf(d7), Double.valueOf(d8)});
-                    this.field_147371_a.func_179290_a(new SPacketMoveVehicle(entity));
+                    LOGGER.warn("{} (vehicle of {}) moved too quickly! {},{},{}", new Object[] {entity.getName(), this.playerEntity.getName(), Double.valueOf(d6), Double.valueOf(d7), Double.valueOf(d8)});
+                    this.netManager.sendPacket(new SPacketMoveVehicle(entity));
                     return;
                 }
 
-                boolean flag = worldserver.func_184144_a(entity, entity.func_174813_aQ().func_186664_h(0.0625D)).isEmpty();
-                d6 = d3 - this.field_184359_v;
-                d7 = d4 - this.field_184360_w - 1.0E-6D;
-                d8 = d5 - this.field_184361_x;
-                entity.func_70091_d(MoverType.PLAYER, d6, d7, d8);
+                boolean flag = worldserver.getCollisionBoxes(entity, entity.getEntityBoundingBox().contract(0.0625D)).isEmpty();
+                d6 = d3 - this.lowestRiddenX1;
+                d7 = d4 - this.lowestRiddenY1 - 1.0E-6D;
+                d8 = d5 - this.lowestRiddenZ1;
+                entity.move(MoverType.PLAYER, d6, d7, d8);
                 double d11 = d7;
-                d6 = d3 - entity.field_70165_t;
-                d7 = d4 - entity.field_70163_u;
+                d6 = d3 - entity.posX;
+                d7 = d4 - entity.posY;
 
                 if (d7 > -0.5D || d7 < 0.5D)
                 {
                     d7 = 0.0D;
                 }
 
-                d8 = d5 - entity.field_70161_v;
+                d8 = d5 - entity.posZ;
                 d10 = d6 * d6 + d7 * d7 + d8 * d8;
                 boolean flag1 = false;
 
                 if (d10 > 0.0625D)
                 {
                     flag1 = true;
-                    field_147370_c.warn("{} moved wrongly!", new Object[] {entity.func_70005_c_()});
+                    LOGGER.warn("{} moved wrongly!", new Object[] {entity.getName()});
                 }
 
-                entity.func_70080_a(d3, d4, d5, f, f1);
-                boolean flag2 = worldserver.func_184144_a(entity, entity.func_174813_aQ().func_186664_h(0.0625D)).isEmpty();
+                entity.setPositionAndRotation(d3, d4, d5, f, f1);
+                boolean flag2 = worldserver.getCollisionBoxes(entity, entity.getEntityBoundingBox().contract(0.0625D)).isEmpty();
 
                 if (flag && (flag1 || !flag2))
                 {
-                    entity.func_70080_a(d0, d1, d2, f, f1);
-                    this.field_147371_a.func_179290_a(new SPacketMoveVehicle(entity));
+                    entity.setPositionAndRotation(d0, d1, d2, f, f1);
+                    this.netManager.sendPacket(new SPacketMoveVehicle(entity));
                     return;
                 }
+                // CraftBukkit start - fire PlayerMoveEvent
+                Player player = this.getPlayer();
+                Location from = new Location(player.getWorld(), lastPosX, lastPosY, lastPosZ, lastYaw, lastPitch); // Get the Players previous Event location.
+                Location to = player.getLocation().clone(); // Start off the To location as the Players current location.
 
-                this.field_147367_d.func_184103_al().func_72358_d(this.field_147369_b);
-                this.field_147369_b.func_71000_j(this.field_147369_b.field_70165_t - d0, this.field_147369_b.field_70163_u - d1, this.field_147369_b.field_70161_v - d2);
-                this.field_184345_D = d11 >= -0.03125D && !this.field_147367_d.func_71231_X() && !worldserver.func_72829_c(entity.func_174813_aQ().func_186662_g(0.0625D).func_72321_a(0.0D, -0.55D, 0.0D));
-                this.field_184359_v = entity.field_70165_t;
-                this.field_184360_w = entity.field_70163_u;
-                this.field_184361_x = entity.field_70161_v;
+                // If the packet contains movement information then we update the To location with the correct XYZ.
+                to.setX(packetIn.getX());
+                to.setY(packetIn.getY());
+                to.setZ(packetIn.getZ());
+
+
+                // If the packet contains look information then we update the To location with the correct Yaw & Pitch.
+                to.setYaw(packetIn.getYaw());
+                to.setPitch(packetIn.getPitch());
+
+                // Prevent 40 event-calls for less than a single pixel of movement >.>
+                double delta = Math.pow(this.lastPosX - to.getX(), 2) + Math.pow(this.lastPosY - to.getY(), 2) + Math.pow(this.lastPosZ - to.getZ(), 2);
+                float deltaAngle = Math.abs(this.lastYaw - to.getYaw()) + Math.abs(this.lastPitch - to.getPitch());
+
+                if ((delta > 1f / 256 || deltaAngle > 10f) && !this.playerEntity.isMovementBlocked()) {
+                    this.lastPosX = to.getX();
+                    this.lastPosY = to.getY();
+                    this.lastPosZ = to.getZ();
+                    this.lastYaw = to.getYaw();
+                    this.lastPitch = to.getPitch();
+
+                    // Skip the first time we do this
+                    if (from.getX() != Double.MAX_VALUE) {
+                        Location oldTo = to.clone();
+                        PlayerMoveEvent event = new PlayerMoveEvent(player, from, to);
+                        this.server.getPluginManager().callEvent(event);
+
+                        // If the event is cancelled we move the player back to their old location.
+                        if (event.isCancelled()) {
+                            teleport(from);
+                            return;
+                        }
+
+                        // If a Plugin has changed the To destination then we teleport the Player
+                        // there to avoid any 'Moved wrongly' or 'Moved too quickly' errors.
+                        // We only do this if the Event was not cancelled.
+                        if (!oldTo.equals(event.getTo()) && !event.isCancelled()) {
+                            this.playerEntity.getBukkitEntity().teleport(event.getTo(), PlayerTeleportEvent.TeleportCause.PLUGIN);
+                            return;
+                        }
+
+                        // Check to see if the Players Location has some how changed during the call of the event.
+                        // This can happen due to a plugin teleporting the player instead of using .setTo()
+                        if (!from.equals(this.getPlayer().getLocation()) && this.justTeleported) {
+                            this.justTeleported = false;
+                            return;
+                        }
+                    }
+                }
+                // CraftBukkit end
+
+                this.serverController.getPlayerList().serverUpdateMovingPlayer(this.playerEntity);
+                this.playerEntity.addMovementStat(this.playerEntity.posX - d0, this.playerEntity.posY - d1, this.playerEntity.posZ - d2);
+                this.vehicleFloating = d11 >= -0.03125D && !this.serverController.isFlightAllowed() && !worldserver.checkBlockCollision(entity.getEntityBoundingBox().expandXyz(0.0625D).addCoord(0.0D, -0.55D, 0.0D));
+                this.lowestRiddenX1 = entity.posX;
+                this.lowestRiddenY1 = entity.posY;
+                this.lowestRiddenZ1 = entity.posZ;
             }
         }
     }
+    public void teleport(Location dest) {
+        internalTeleport(dest.getX(), dest.getY(), dest.getZ(), dest.getYaw(), dest.getPitch(), Collections.<SPacketPlayerPosLook.EnumFlags>emptySet());
+    }
 
-    public void func_184339_a(CPacketConfirmTeleport p_184339_1_)
+    private void internalTeleport(double d0, double d1, double d2, float f, float f1, Set<SPacketPlayerPosLook.EnumFlags> set) {
+        // CraftBukkit start
+        if (Float.isNaN(f)) {
+            f = 0;
+        }
+        if (Float.isNaN(f1)) {
+            f1 = 0;
+        }
+
+        this.justTeleported = true;
+        // CraftBukkit end
+        double d3 = set.contains(SPacketPlayerPosLook.EnumFlags.X) ? this.playerEntity.posX : 0.0D;
+        double d4 = set.contains(SPacketPlayerPosLook.EnumFlags.Y) ? this.playerEntity.posY : 0.0D;
+        double d5 = set.contains(SPacketPlayerPosLook.EnumFlags.Z) ? this.playerEntity.posZ : 0.0D;
+
+        this.targetPos = new Vec3d(d0 + d3, d1 + d4, d2 + d5);
+        float f2 = f;
+        float f3 = f1;
+
+        if (set.contains(SPacketPlayerPosLook.EnumFlags.Y_ROT)) {
+            f2 = f + this.playerEntity.rotationYaw;
+        }
+
+        if (set.contains(SPacketPlayerPosLook.EnumFlags.X_ROT)) {
+            f3 = f1 + this.playerEntity.rotationPitch;
+        }
+
+        // CraftBukkit start - update last location
+        this.lastPosX = this.targetPos.xCoord;
+        this.lastPosY = this.targetPos.yCoord;
+        this.lastPosZ = this.targetPos.zCoord;
+        this.lastYaw = f2;
+        this.lastPitch = f3;
+        // CraftBukkit end
+
+        if (++this.teleportId == Integer.MAX_VALUE) {
+            this.teleportId = 0;
+        }
+
+        this.lastPositionUpdate = this.networkTickCount;
+        this.playerEntity.setPositionAndRotation(this.targetPos.xCoord, this.targetPos.yCoord, this.targetPos.zCoord, f2, f3);
+        this.playerEntity.connection.sendPacket(new SPacketPlayerPosLook(d0, d1, d2, f, f1, set, this.teleportId));
+    }
+    public void processConfirmTeleport(CPacketConfirmTeleport packetIn)
     {
-        PacketThreadUtil.func_180031_a(p_184339_1_, this, this.field_147369_b.func_71121_q());
+        PacketThreadUtil.checkThreadAndEnqueue(packetIn, this, this.playerEntity.getServerWorld());
 
-        if (p_184339_1_.func_186987_a() == this.field_184363_z)
+        if (packetIn.getTeleportId() == this.teleportId)
         {
-            this.field_147369_b.func_70080_a(this.field_184362_y.field_72450_a, this.field_184362_y.field_72448_b, this.field_184362_y.field_72449_c, this.field_147369_b.field_70177_z, this.field_147369_b.field_70125_A);
+            this.playerEntity.setPositionAndRotation(this.targetPos.xCoord, this.targetPos.yCoord, this.targetPos.zCoord, this.playerEntity.rotationYaw, this.playerEntity.rotationPitch);
 
-            if (this.field_147369_b.func_184850_K())
+            if (this.playerEntity.isInvulnerableDimensionChange())
             {
-                this.field_184352_o = this.field_184362_y.field_72450_a;
-                this.field_184353_p = this.field_184362_y.field_72448_b;
-                this.field_184354_q = this.field_184362_y.field_72449_c;
-                this.field_147369_b.func_184846_L();
+                this.lastGoodX = this.targetPos.xCoord;
+                this.lastGoodY = this.targetPos.yCoord;
+                this.lastGoodZ = this.targetPos.zCoord;
+                this.playerEntity.clearInvulnerableDimensionChange();
             }
 
-            this.field_184362_y = null;
+            this.targetPos = null;
         }
     }
 
-    public void func_147347_a(CPacketPlayer p_147347_1_)
+    public void processPlayer(CPacketPlayer packetIn)
     {
-        PacketThreadUtil.func_180031_a(p_147347_1_, this, this.field_147369_b.func_71121_q());
+        PacketThreadUtil.checkThreadAndEnqueue(packetIn, this, this.playerEntity.getServerWorld());
 
-        if (func_183006_b(p_147347_1_))
+        if (isMovePlayerPacketInvalid(packetIn))
         {
-            this.func_147360_c("Invalid move player packet received");
+            this.disconnect("Invalid move player packet received");
         }
         else
         {
-            WorldServer worldserver = this.field_147367_d.func_71218_a(this.field_147369_b.field_71093_bK);
+            WorldServer worldserver = this.serverController.worldServerForDimension(this.playerEntity.dimension);
 
-            if (!this.field_147369_b.field_71136_j)
+            if (!this.playerEntity.playerConqueredTheEnd)
             {
-                if (this.field_147368_e == 0)
+                if (this.networkTickCount == 0)
                 {
-                    this.func_184342_d();
+                    this.captureCurrentPosition();
                 }
 
-                if (this.field_184362_y != null)
+                if (this.targetPos != null)
                 {
-                    if (this.field_147368_e - this.field_184343_A > 20)
+                    if (this.networkTickCount - this.lastPositionUpdate > 20)
                     {
-                        this.field_184343_A = this.field_147368_e;
-                        this.func_147364_a(this.field_184362_y.field_72450_a, this.field_184362_y.field_72448_b, this.field_184362_y.field_72449_c, this.field_147369_b.field_70177_z, this.field_147369_b.field_70125_A);
+                        this.lastPositionUpdate = this.networkTickCount;
+                        this.setPlayerLocation(this.targetPos.xCoord, this.targetPos.yCoord, this.targetPos.zCoord, this.playerEntity.rotationYaw, this.playerEntity.rotationPitch);
                     }
                 }
                 else
                 {
-                    this.field_184343_A = this.field_147368_e;
+                    this.lastPositionUpdate = this.networkTickCount;
 
-                    if (this.field_147369_b.func_184218_aH())
+                    if (this.playerEntity.isRiding())
                     {
-                        this.field_147369_b.func_70080_a(this.field_147369_b.field_70165_t, this.field_147369_b.field_70163_u, this.field_147369_b.field_70161_v, p_147347_1_.func_186999_a(this.field_147369_b.field_70177_z), p_147347_1_.func_186998_b(this.field_147369_b.field_70125_A));
-                        this.field_147367_d.func_184103_al().func_72358_d(this.field_147369_b);
+                        this.playerEntity.setPositionAndRotation(this.playerEntity.posX, this.playerEntity.posY, this.playerEntity.posZ, packetIn.getYaw(this.playerEntity.rotationYaw), packetIn.getPitch(this.playerEntity.rotationPitch));
+                        this.serverController.getPlayerList().serverUpdateMovingPlayer(this.playerEntity);
                     }
                     else
                     {
-                        double d0 = this.field_147369_b.field_70165_t;
-                        double d1 = this.field_147369_b.field_70163_u;
-                        double d2 = this.field_147369_b.field_70161_v;
-                        double d3 = this.field_147369_b.field_70163_u;
-                        double d4 = p_147347_1_.func_186997_a(this.field_147369_b.field_70165_t);
-                        double d5 = p_147347_1_.func_186996_b(this.field_147369_b.field_70163_u);
-                        double d6 = p_147347_1_.func_187000_c(this.field_147369_b.field_70161_v);
-                        float f = p_147347_1_.func_186999_a(this.field_147369_b.field_70177_z);
-                        float f1 = p_147347_1_.func_186998_b(this.field_147369_b.field_70125_A);
-                        double d7 = d4 - this.field_184349_l;
-                        double d8 = d5 - this.field_184350_m;
-                        double d9 = d6 - this.field_184351_n;
-                        double d10 = this.field_147369_b.field_70159_w * this.field_147369_b.field_70159_w + this.field_147369_b.field_70181_x * this.field_147369_b.field_70181_x + this.field_147369_b.field_70179_y * this.field_147369_b.field_70179_y;
+                        // CraftBukkit - Make sure the move is valid but then reset it for plugins to modify
+                        double prevX = playerEntity.posX;
+                        double prevY = playerEntity.posY;
+                        double prevZ = playerEntity.posZ;
+                        float prevYaw = playerEntity.rotationYaw;
+                        float prevPitch = playerEntity.rotationPitch;
+                        // CraftBukkit end
+                        double d0 = this.playerEntity.posX;
+                        double d1 = this.playerEntity.posY;
+                        double d2 = this.playerEntity.posZ;
+                        double d3 = this.playerEntity.posY;
+                        double d4 = packetIn.getX(this.playerEntity.posX);
+                        double d5 = packetIn.getY(this.playerEntity.posY);
+                        double d6 = packetIn.getZ(this.playerEntity.posZ);
+                        float f = packetIn.getYaw(this.playerEntity.rotationYaw);
+                        float f1 = packetIn.getPitch(this.playerEntity.rotationPitch);
+                        double d7 = d4 - this.firstGoodX;
+                        double d8 = d5 - this.firstGoodY;
+                        double d9 = d6 - this.firstGoodZ;
+                        double d10 = this.playerEntity.motionX * this.playerEntity.motionX + this.playerEntity.motionY * this.playerEntity.motionY + this.playerEntity.motionZ * this.playerEntity.motionZ;
                         double d11 = d7 * d7 + d8 * d8 + d9 * d9;
 
-                        if (this.field_147369_b.func_70608_bn())
+                        if (this.playerEntity.isPlayerSleeping())
                         {
                             if (d11 > 1.0D)
                             {
-                                this.func_147364_a(this.field_147369_b.field_70165_t, this.field_147369_b.field_70163_u, this.field_147369_b.field_70161_v, p_147347_1_.func_186999_a(this.field_147369_b.field_70177_z), p_147347_1_.func_186998_b(this.field_147369_b.field_70125_A));
+                                this.setPlayerLocation(this.playerEntity.posX, this.playerEntity.posY, this.playerEntity.posZ, packetIn.getYaw(this.playerEntity.rotationYaw), packetIn.getPitch(this.playerEntity.rotationPitch));
                             }
                         }
                         else
                         {
-                            ++this.field_184347_F;
-                            int i = this.field_184347_F - this.field_184348_G;
+                            ++this.movePacketCounter;
+                            int i = this.movePacketCounter - this.lastMovePacketCounter;
 
                             if (i > 5)
                             {
-                                field_147370_c.debug("{} is sending move packets too frequently ({} packets since last tick)", new Object[] {this.field_147369_b.func_70005_c_(), Integer.valueOf(i)});
+                                LOGGER.debug("{} is sending move packets too frequently ({} packets since last tick)", new Object[] {this.playerEntity.getName(), Integer.valueOf(i)});
                                 i = 1;
                             }
 
-                            if (!this.field_147369_b.func_184850_K() && (!this.field_147369_b.func_71121_q().func_82736_K().func_82766_b("disableElytraMovementCheck") || !this.field_147369_b.func_184613_cA()))
+                            if (!this.playerEntity.isInvulnerableDimensionChange() && (!this.playerEntity.getServerWorld().getGameRules().getBoolean("disableElytraMovementCheck") || !this.playerEntity.isElytraFlying()))
                             {
-                                float f2 = this.field_147369_b.func_184613_cA() ? 300.0F : 100.0F;
+                                float f2 = this.playerEntity.isElytraFlying() ? 300.0F : 100.0F;
 
-                                if (d11 - d10 > (double)(f2 * (float)i) && (!this.field_147367_d.func_71264_H() || !this.field_147367_d.func_71214_G().equals(this.field_147369_b.func_70005_c_())))
+                                if (d11 - d10 > (double)(f2 * (float)i) && (!this.serverController.isSinglePlayer() || !this.serverController.getServerOwner().equals(this.playerEntity.getName())))
                                 {
-                                    field_147370_c.warn("{} moved too quickly! {},{},{}", new Object[] {this.field_147369_b.func_70005_c_(), Double.valueOf(d7), Double.valueOf(d8), Double.valueOf(d9)});
-                                    this.func_147364_a(this.field_147369_b.field_70165_t, this.field_147369_b.field_70163_u, this.field_147369_b.field_70161_v, this.field_147369_b.field_70177_z, this.field_147369_b.field_70125_A);
+                                    LOGGER.warn("{} moved too quickly! {},{},{}", new Object[] {this.playerEntity.getName(), Double.valueOf(d7), Double.valueOf(d8), Double.valueOf(d9)});
+                                    this.setPlayerLocation(this.playerEntity.posX, this.playerEntity.posY, this.playerEntity.posZ, this.playerEntity.rotationYaw, this.playerEntity.rotationPitch);
                                     return;
                                 }
                             }
 
-                            boolean flag2 = worldserver.func_184144_a(this.field_147369_b, this.field_147369_b.func_174813_aQ().func_186664_h(0.0625D)).isEmpty();
-                            d7 = d4 - this.field_184352_o;
-                            d8 = d5 - this.field_184353_p;
-                            d9 = d6 - this.field_184354_q;
+                            boolean flag2 = worldserver.getCollisionBoxes(this.playerEntity, this.playerEntity.getEntityBoundingBox().contract(0.0625D)).isEmpty();
+                            d7 = d4 - this.lastGoodX;
+                            d8 = d5 - this.lastGoodY;
+                            d9 = d6 - this.lastGoodZ;
 
-                            if (this.field_147369_b.field_70122_E && !p_147347_1_.func_149465_i() && d8 > 0.0D)
+                            if (this.playerEntity.onGround && !packetIn.isOnGround() && d8 > 0.0D)
                             {
-                                this.field_147369_b.func_70664_aZ();
+                                this.playerEntity.jump();
                             }
 
-                            this.field_147369_b.func_70091_d(MoverType.PLAYER, d7, d8, d9);
-                            this.field_147369_b.field_70122_E = p_147347_1_.func_149465_i();
+                            this.playerEntity.move(MoverType.PLAYER, d7, d8, d9);
+                            this.playerEntity.onGround = packetIn.isOnGround();
                             double d12 = d8;
-                            d7 = d4 - this.field_147369_b.field_70165_t;
-                            d8 = d5 - this.field_147369_b.field_70163_u;
+                            d7 = d4 - this.playerEntity.posX;
+                            d8 = d5 - this.playerEntity.posY;
 
                             if (d8 > -0.5D || d8 < 0.5D)
                             {
                                 d8 = 0.0D;
                             }
 
-                            d9 = d6 - this.field_147369_b.field_70161_v;
+                            d9 = d6 - this.playerEntity.posZ;
                             d11 = d7 * d7 + d8 * d8 + d9 * d9;
                             boolean flag = false;
 
-                            if (!this.field_147369_b.func_184850_K() && d11 > 0.0625D && !this.field_147369_b.func_70608_bn() && !this.field_147369_b.field_71134_c.func_73083_d() && this.field_147369_b.field_71134_c.func_73081_b() != GameType.SPECTATOR)
+                            if (!this.playerEntity.isInvulnerableDimensionChange() && d11 > 0.0625D && !this.playerEntity.isPlayerSleeping() && !this.playerEntity.interactionManager.isCreative() && this.playerEntity.interactionManager.getGameType() != GameType.SPECTATOR)
                             {
                                 flag = true;
-                                field_147370_c.warn("{} moved wrongly!", new Object[] {this.field_147369_b.func_70005_c_()});
+                                LOGGER.warn("{} moved wrongly!", new Object[] {this.playerEntity.getName()});
                             }
 
-                            this.field_147369_b.func_70080_a(d4, d5, d6, f, f1);
-                            this.field_147369_b.func_71000_j(this.field_147369_b.field_70165_t - d0, this.field_147369_b.field_70163_u - d1, this.field_147369_b.field_70161_v - d2);
+                            this.playerEntity.setPositionAndRotation(d4, d5, d6, f, f1);
+                            this.playerEntity.addMovementStat(this.playerEntity.posX - d0, this.playerEntity.posY - d1, this.playerEntity.posZ - d2);
 
-                            if (!this.field_147369_b.field_70145_X && !this.field_147369_b.func_70608_bn())
+                            if (!this.playerEntity.noClip && !this.playerEntity.isPlayerSleeping())
                             {
-                                boolean flag1 = worldserver.func_184144_a(this.field_147369_b, this.field_147369_b.func_174813_aQ().func_186664_h(0.0625D)).isEmpty();
+                                boolean flag1 = worldserver.getCollisionBoxes(this.playerEntity, this.playerEntity.getEntityBoundingBox().contract(0.0625D)).isEmpty();
 
                                 if (flag2 && (flag || !flag1))
                                 {
-                                    this.func_147364_a(d0, d1, d2, f, f1);
+                                    this.setPlayerLocation(d0, d1, d2, f, f1);
                                     return;
                                 }
                             }
+                            // CraftBukkit start - fire PlayerMoveEvent
+                            // Rest to old location first
+                            this.playerEntity.setPositionAndRotation(prevX, prevY, prevZ, prevYaw, prevPitch);
 
-                            this.field_184344_B = d12 >= -0.03125D;
-                            this.field_184344_B &= !this.field_147367_d.func_71231_X() && !this.field_147369_b.field_71075_bZ.field_75101_c;
-                            this.field_184344_B &= !this.field_147369_b.func_70644_a(MobEffects.field_188424_y) && !this.field_147369_b.func_184613_cA() && !worldserver.func_72829_c(this.field_147369_b.func_174813_aQ().func_186662_g(0.0625D).func_72321_a(0.0D, -0.55D, 0.0D));
-                            this.field_147369_b.field_70122_E = p_147347_1_.func_149465_i();
-                            this.field_147367_d.func_184103_al().func_72358_d(this.field_147369_b);
-                            this.field_147369_b.func_71122_b(this.field_147369_b.field_70163_u - d3, p_147347_1_.func_149465_i());
-                            this.field_184352_o = this.field_147369_b.field_70165_t;
-                            this.field_184353_p = this.field_147369_b.field_70163_u;
-                            this.field_184354_q = this.field_147369_b.field_70161_v;
+                            Player player = this.getPlayer();
+                            Location from = new Location(player.getWorld(), lastPosX, lastPosY, lastPosZ, lastYaw, lastPitch); // Get the Players previous Event location.
+                            Location to = player.getLocation().clone(); // Start off the To location as the Players current location.
+
+                            // If the packet contains movement information then we update the To location with the correct XYZ.
+                            if (packetIn.moving) {
+                                to.setX(packetIn.x);
+                                to.setY(packetIn.y);
+                                to.setZ(packetIn.z);
+                            }
+
+                            // If the packet contains look information then we update the To location with the correct Yaw & Pitch.
+                            if (packetIn.rotating) {
+                                to.setYaw(packetIn.yaw);
+                                to.setPitch(packetIn.pitch);
+                            }
+
+                            // Prevent 40 event-calls for less than a single pixel of movement >.>
+                            double delta = Math.pow(this.lastPosX - to.getX(), 2) + Math.pow(this.lastPosY - to.getY(), 2) + Math.pow(this.lastPosZ - to.getZ(), 2);
+                            float deltaAngle = Math.abs(this.lastYaw - to.getYaw()) + Math.abs(this.lastPitch - to.getPitch());
+
+                            if ((delta > 1f / 256 || deltaAngle > 10f) && !this.playerEntity.isMovementBlocked()) {
+                                this.lastPosX = to.getX();
+                                this.lastPosY = to.getY();
+                                this.lastPosZ = to.getZ();
+                                this.lastYaw = to.getYaw();
+                                this.lastPitch = to.getPitch();
+
+                                // Skip the first time we do this
+                                if (from.getX() != Double.MAX_VALUE) {
+                                    Location oldTo = to.clone();
+                                    PlayerMoveEvent event = new PlayerMoveEvent(player, from, to);
+                                    this.server.getPluginManager().callEvent(event);
+
+                                    // If the event is cancelled we move the player back to their old location.
+                                    if (event.isCancelled()) {
+                                        teleport(from);
+                                        return;
+                                    }
+
+                                    // If a Plugin has changed the To destination then we teleport the Player
+                                    // there to avoid any 'Moved wrongly' or 'Moved too quickly' errors.
+                                    // We only do this if the Event was not cancelled.
+                                    if (!oldTo.equals(event.getTo()) && !event.isCancelled()) {
+                                        this.playerEntity.getBukkitEntity().teleport(event.getTo(), PlayerTeleportEvent.TeleportCause.PLUGIN);
+                                        return;
+                                    }
+
+                                    // Check to see if the Players Location has some how changed during the call of the event.
+                                    // This can happen due to a plugin teleporting the player instead of using .setTo()
+                                    if (!from.equals(this.getPlayer().getLocation()) && this.justTeleported) {
+                                        this.justTeleported = false;
+                                        return;
+                                    }
+                                }
+                            }
+                            this.playerEntity.setPositionAndRotation(d4, d5, d6, f, f1); // Copied from above
+                            // CraftBukkit end
+
+                            this.floating = d12 >= -0.03125D;
+                            this.floating &= !this.serverController.isFlightAllowed() && !this.playerEntity.capabilities.allowFlying;
+                            this.floating &= !this.playerEntity.isPotionActive(MobEffects.LEVITATION) && !this.playerEntity.isElytraFlying() && !worldserver.checkBlockCollision(this.playerEntity.getEntityBoundingBox().expandXyz(0.0625D).addCoord(0.0D, -0.55D, 0.0D));
+                            this.playerEntity.onGround = packetIn.isOnGround();
+                            this.serverController.getPlayerList().serverUpdateMovingPlayer(this.playerEntity);
+                            this.playerEntity.handleFalling(this.playerEntity.posY - d3, packetIn.isOnGround());
+                            this.lastGoodX = this.playerEntity.posX;
+                            this.lastGoodY = this.playerEntity.posY;
+                            this.lastGoodZ = this.playerEntity.posZ;
                         }
                     }
                 }
@@ -537,121 +843,155 @@
         }
     }
 
-    public void func_147364_a(double p_147364_1_, double p_147364_3_, double p_147364_5_, float p_147364_7_, float p_147364_8_)
+    public void setPlayerLocation(double x, double y, double z, float yaw, float pitch)
     {
-        this.func_175089_a(p_147364_1_, p_147364_3_, p_147364_5_, p_147364_7_, p_147364_8_, Collections.<SPacketPlayerPosLook.EnumFlags>emptySet());
+        this.setPlayerLocation(x, y, z, yaw, pitch, Collections.<SPacketPlayerPosLook.EnumFlags>emptySet());
     }
 
-    public void func_175089_a(double p_175089_1_, double p_175089_3_, double p_175089_5_, float p_175089_7_, float p_175089_8_, Set<SPacketPlayerPosLook.EnumFlags> p_175089_9_)
+    public void setPlayerLocation(double x, double y, double z, float yaw, float pitch, Set<SPacketPlayerPosLook.EnumFlags> relativeSet)
     {
-        double d0 = p_175089_9_.contains(SPacketPlayerPosLook.EnumFlags.X) ? this.field_147369_b.field_70165_t : 0.0D;
-        double d1 = p_175089_9_.contains(SPacketPlayerPosLook.EnumFlags.Y) ? this.field_147369_b.field_70163_u : 0.0D;
-        double d2 = p_175089_9_.contains(SPacketPlayerPosLook.EnumFlags.Z) ? this.field_147369_b.field_70161_v : 0.0D;
-        this.field_184362_y = new Vec3d(p_175089_1_ + d0, p_175089_3_ + d1, p_175089_5_ + d2);
-        float f = p_175089_7_;
-        float f1 = p_175089_8_;
+        double d0 = relativeSet.contains(SPacketPlayerPosLook.EnumFlags.X) ? this.playerEntity.posX : 0.0D;
+        double d1 = relativeSet.contains(SPacketPlayerPosLook.EnumFlags.Y) ? this.playerEntity.posY : 0.0D;
+        double d2 = relativeSet.contains(SPacketPlayerPosLook.EnumFlags.Z) ? this.playerEntity.posZ : 0.0D;
+        this.targetPos = new Vec3d(x + d0, y + d1, z + d2);
+        float f = yaw;
+        float f1 = pitch;
 
-        if (p_175089_9_.contains(SPacketPlayerPosLook.EnumFlags.Y_ROT))
+        if (relativeSet.contains(SPacketPlayerPosLook.EnumFlags.Y_ROT))
         {
-            f = p_175089_7_ + this.field_147369_b.field_70177_z;
+            f = yaw + this.playerEntity.rotationYaw;
         }
 
-        if (p_175089_9_.contains(SPacketPlayerPosLook.EnumFlags.X_ROT))
+        if (relativeSet.contains(SPacketPlayerPosLook.EnumFlags.X_ROT))
         {
-            f1 = p_175089_8_ + this.field_147369_b.field_70125_A;
+            f1 = pitch + this.playerEntity.rotationPitch;
         }
 
-        if (++this.field_184363_z == Integer.MAX_VALUE)
+        if (++this.teleportId == Integer.MAX_VALUE)
         {
-            this.field_184363_z = 0;
+            this.teleportId = 0;
         }
 
-        this.field_184343_A = this.field_147368_e;
-        this.field_147369_b.func_70080_a(this.field_184362_y.field_72450_a, this.field_184362_y.field_72448_b, this.field_184362_y.field_72449_c, f, f1);
-        this.field_147369_b.field_71135_a.func_147359_a(new SPacketPlayerPosLook(p_175089_1_, p_175089_3_, p_175089_5_, p_175089_7_, p_175089_8_, p_175089_9_, this.field_184363_z));
+        this.lastPositionUpdate = this.networkTickCount;
+        this.playerEntity.setPositionAndRotation(this.targetPos.xCoord, this.targetPos.yCoord, this.targetPos.zCoord, f, f1);
+        this.playerEntity.connection.sendPacket(new SPacketPlayerPosLook(x, y, z, yaw, pitch, relativeSet, this.teleportId));
     }
 
-    public void func_147345_a(CPacketPlayerDigging p_147345_1_)
+    public void processPlayerDigging(CPacketPlayerDigging packetIn)
     {
-        PacketThreadUtil.func_180031_a(p_147345_1_, this, this.field_147369_b.func_71121_q());
-        WorldServer worldserver = this.field_147367_d.func_71218_a(this.field_147369_b.field_71093_bK);
-        BlockPos blockpos = p_147345_1_.func_179715_a();
-        this.field_147369_b.func_143004_u();
+        PacketThreadUtil.checkThreadAndEnqueue(packetIn, this, this.playerEntity.getServerWorld());
+        WorldServer worldserver = this.serverController.worldServerForDimension(this.playerEntity.dimension);
+        BlockPos blockpos = packetIn.getPosition();
+        this.playerEntity.markPlayerActive();
 
-        switch (p_147345_1_.func_180762_c())
+        switch (packetIn.getAction())
         {
             case SWAP_HELD_ITEMS:
 
-                if (!this.field_147369_b.func_175149_v())
+                if (!this.playerEntity.isSpectator())
                 {
-                    ItemStack itemstack = this.field_147369_b.func_184586_b(EnumHand.OFF_HAND);
-                    this.field_147369_b.func_184611_a(EnumHand.OFF_HAND, this.field_147369_b.func_184586_b(EnumHand.MAIN_HAND));
-                    this.field_147369_b.func_184611_a(EnumHand.MAIN_HAND, itemstack);
+                    ItemStack itemstack = this.playerEntity.getHeldItem(EnumHand.OFF_HAND);
+                    // CraftBukkit start
+                    PlayerSwapHandItemsEvent swapItemsEvent = new PlayerSwapHandItemsEvent(getPlayer(), CraftItemStack.asBukkitCopy(itemstack), CraftItemStack.asBukkitCopy(this.playerEntity.getHeldItem(EnumHand.MAIN_HAND)));
+                    this.server.getPluginManager().callEvent(swapItemsEvent);
+                    if (swapItemsEvent.isCancelled()) {
+                        return;
+                    }
+                    itemstack = CraftItemStack.asNMSCopy(swapItemsEvent.getMainHandItem());
+                    this.playerEntity.setHeldItem(EnumHand.OFF_HAND, CraftItemStack.asNMSCopy(swapItemsEvent.getOffHandItem()));
+                    // CraftBukkit end
+                    this.playerEntity.setHeldItem(EnumHand.MAIN_HAND, itemstack);
                 }
 
                 return;
             case DROP_ITEM:
 
-                if (!this.field_147369_b.func_175149_v())
+                if (!this.playerEntity.isSpectator())
                 {
-                    this.field_147369_b.func_71040_bB(false);
+                    // limit how quickly items can be dropped
+                    // If the ticks aren't the same then the count starts from 0 and we update the lastDropTick.
+                    if (this.lastDropTick != MinecraftServer.currentTick) {
+                        this.dropCount = 0;
+                        this.lastDropTick = MinecraftServer.currentTick;
+                    } else {
+                        // Else we increment the drop count and check the amount.
+                        this.dropCount++;
+                        if (this.dropCount >= 20) {
+                            LOGGER.warn(this.playerEntity.getName() + " dropped their items too quickly!");
+                            this.disconnect("You dropped your items too quickly (Hacking?)");
+                            return;
+                        }
+                    }
+                    // CraftBukkit end
+                    this.playerEntity.dropItem(false);
                 }
 
                 return;
             case DROP_ALL_ITEMS:
 
-                if (!this.field_147369_b.func_175149_v())
+                if (!this.playerEntity.isSpectator())
                 {
-                    this.field_147369_b.func_71040_bB(true);
+                    this.playerEntity.dropItem(true);
                 }
 
                 return;
             case RELEASE_USE_ITEM:
-                this.field_147369_b.func_184597_cx();
+                this.playerEntity.stopActiveHand();
                 return;
             case START_DESTROY_BLOCK:
             case ABORT_DESTROY_BLOCK:
             case STOP_DESTROY_BLOCK:
-                double d0 = this.field_147369_b.field_70165_t - ((double)blockpos.func_177958_n() + 0.5D);
-                double d1 = this.field_147369_b.field_70163_u - ((double)blockpos.func_177956_o() + 0.5D) + 1.5D;
-                double d2 = this.field_147369_b.field_70161_v - ((double)blockpos.func_177952_p() + 0.5D);
+                double d0 = this.playerEntity.posX - ((double)blockpos.getX() + 0.5D);
+                double d1 = this.playerEntity.posY - ((double)blockpos.getY() + 0.5D) + 1.5D;
+                double d2 = this.playerEntity.posZ - ((double)blockpos.getZ() + 0.5D);
                 double d3 = d0 * d0 + d1 * d1 + d2 * d2;
 
-                if (d3 > 36.0D)
+                double dist = playerEntity.interactionManager.getBlockReachDistance() + 1;
+                dist *= dist;
+
+                if (d3 > dist)
                 {
                     return;
                 }
-                else if (blockpos.func_177956_o() >= this.field_147367_d.func_71207_Z())
+                else if (blockpos.getY() >= this.serverController.getBuildLimit())
                 {
                     return;
                 }
                 else
                 {
-                    if (p_147345_1_.func_180762_c() == CPacketPlayerDigging.Action.START_DESTROY_BLOCK)
+                    if (packetIn.getAction() == CPacketPlayerDigging.Action.START_DESTROY_BLOCK)
                     {
-                        if (!this.field_147367_d.func_175579_a(worldserver, blockpos, this.field_147369_b) && worldserver.func_175723_af().func_177746_a(blockpos))
+                        if (!this.serverController.isBlockProtected(worldserver, blockpos, this.playerEntity) && worldserver.getWorldBorder().contains(blockpos))
                         {
-                            this.field_147369_b.field_71134_c.func_180784_a(blockpos, p_147345_1_.func_179714_b());
+                            this.playerEntity.interactionManager.onBlockClicked(blockpos, packetIn.getFacing());
                         }
                         else
                         {
-                            this.field_147369_b.field_71135_a.func_147359_a(new SPacketBlockChange(worldserver, blockpos));
+                            // CraftBukkit start - fire PlayerInteractEvent
+                            CraftEventFactory.callPlayerInteractEvent(this.playerEntity, Action.LEFT_CLICK_BLOCK, blockpos, packetIn.getFacing(), this.playerEntity.inventory.getCurrentItem(), EnumHand.MAIN_HAND);
+                            this.playerEntity.connection.sendPacket(new SPacketBlockChange(worldserver, blockpos));
+                            // Update any tile entity data for this block
+                            TileEntity tileentity = worldserver.getTileEntity(blockpos);
+                            if (tileentity != null) {
+                                this.playerEntity.connection.sendPacket(tileentity.getUpdatePacket());
+                            }
+                            // CraftBukkit end
                         }
                     }
                     else
                     {
-                        if (p_147345_1_.func_180762_c() == CPacketPlayerDigging.Action.STOP_DESTROY_BLOCK)
+                        if (packetIn.getAction() == CPacketPlayerDigging.Action.STOP_DESTROY_BLOCK)
                         {
-                            this.field_147369_b.field_71134_c.func_180785_a(blockpos);
+                            this.playerEntity.interactionManager.blockRemoving(blockpos);
                         }
-                        else if (p_147345_1_.func_180762_c() == CPacketPlayerDigging.Action.ABORT_DESTROY_BLOCK)
+                        else if (packetIn.getAction() == CPacketPlayerDigging.Action.ABORT_DESTROY_BLOCK)
                         {
-                            this.field_147369_b.field_71134_c.func_180238_e();
+                            this.playerEntity.interactionManager.cancelDestroyingBlock();
                         }
 
-                        if (worldserver.func_180495_p(blockpos).func_185904_a() != Material.field_151579_a)
+                        if (worldserver.getBlockState(blockpos).getMaterial() != Material.AIR)
                         {
-                            this.field_147369_b.field_71135_a.func_147359_a(new SPacketBlockChange(worldserver, blockpos));
+                            this.playerEntity.connection.sendPacket(new SPacketBlockChange(worldserver, blockpos));
                         }
                     }
 
@@ -663,61 +1003,102 @@
         }
     }
 
-    public void func_184337_a(CPacketPlayerTryUseItemOnBlock p_184337_1_)
+    public void processTryUseItemOnBlock(CPacketPlayerTryUseItemOnBlock packetIn)
     {
-        PacketThreadUtil.func_180031_a(p_184337_1_, this, this.field_147369_b.func_71121_q());
-        WorldServer worldserver = this.field_147367_d.func_71218_a(this.field_147369_b.field_71093_bK);
-        EnumHand enumhand = p_184337_1_.func_187022_c();
-        ItemStack itemstack = this.field_147369_b.func_184586_b(enumhand);
-        BlockPos blockpos = p_184337_1_.func_187023_a();
-        EnumFacing enumfacing = p_184337_1_.func_187024_b();
-        this.field_147369_b.func_143004_u();
+        PacketThreadUtil.checkThreadAndEnqueue(packetIn, this, this.playerEntity.getServerWorld());
+        WorldServer worldserver = this.serverController.worldServerForDimension(this.playerEntity.dimension);
+        EnumHand enumhand = packetIn.getHand();
+        ItemStack itemstack = this.playerEntity.getHeldItem(enumhand);
+        BlockPos blockpos = packetIn.getPos();
+        EnumFacing enumfacing = packetIn.getDirection();
+        this.playerEntity.markPlayerActive();
 
-        if (blockpos.func_177956_o() < this.field_147367_d.func_71207_Z() - 1 || enumfacing != EnumFacing.UP && blockpos.func_177956_o() < this.field_147367_d.func_71207_Z())
+        if (blockpos.getY() < this.serverController.getBuildLimit() - 1 || enumfacing != EnumFacing.UP && blockpos.getY() < this.serverController.getBuildLimit())
         {
-            if (this.field_184362_y == null && this.field_147369_b.func_70092_e((double)blockpos.func_177958_n() + 0.5D, (double)blockpos.func_177956_o() + 0.5D, (double)blockpos.func_177952_p() + 0.5D) < 64.0D && !this.field_147367_d.func_175579_a(worldserver, blockpos, this.field_147369_b) && worldserver.func_175723_af().func_177746_a(blockpos))
+            double dist = playerEntity.interactionManager.getBlockReachDistance() + 3;
+            dist *= dist;
+            if (this.targetPos == null && this.playerEntity.getDistanceSq((double)blockpos.getX() + 0.5D, (double)blockpos.getY() + 0.5D, (double)blockpos.getZ() + 0.5D) < dist && !this.serverController.isBlockProtected(worldserver, blockpos, this.playerEntity) && worldserver.getWorldBorder().contains(blockpos))
             {
-                this.field_147369_b.field_71134_c.func_187251_a(this.field_147369_b, worldserver, itemstack, enumhand, blockpos, enumfacing, p_184337_1_.func_187026_d(), p_184337_1_.func_187025_e(), p_184337_1_.func_187020_f());
+                this.playerEntity.interactionManager.processRightClickBlock(this.playerEntity, worldserver, itemstack, enumhand, blockpos, enumfacing, packetIn.getFacingX(), packetIn.getFacingY(), packetIn.getFacingZ());
             }
         }
         else
         {
-            TextComponentTranslation textcomponenttranslation = new TextComponentTranslation("build.tooHigh", new Object[] {Integer.valueOf(this.field_147367_d.func_71207_Z())});
-            textcomponenttranslation.func_150256_b().func_150238_a(TextFormatting.RED);
-            this.field_147369_b.field_71135_a.func_147359_a(new SPacketChat(textcomponenttranslation, (byte)2));
+            TextComponentTranslation textcomponenttranslation = new TextComponentTranslation("build.tooHigh", new Object[] {Integer.valueOf(this.serverController.getBuildLimit())});
+            textcomponenttranslation.getStyle().setColor(TextFormatting.RED);
+            this.playerEntity.connection.sendPacket(new SPacketChat(textcomponenttranslation, (byte)2));
         }
 
-        this.field_147369_b.field_71135_a.func_147359_a(new SPacketBlockChange(worldserver, blockpos));
-        this.field_147369_b.field_71135_a.func_147359_a(new SPacketBlockChange(worldserver, blockpos.func_177972_a(enumfacing)));
+        this.playerEntity.connection.sendPacket(new SPacketBlockChange(worldserver, blockpos));
+        this.playerEntity.connection.sendPacket(new SPacketBlockChange(worldserver, blockpos.offset(enumfacing)));
     }
 
-    public void func_147346_a(CPacketPlayerTryUseItem p_147346_1_)
+    public void processTryUseItem(CPacketPlayerTryUseItem packetIn)
     {
-        PacketThreadUtil.func_180031_a(p_147346_1_, this, this.field_147369_b.func_71121_q());
-        WorldServer worldserver = this.field_147367_d.func_71218_a(this.field_147369_b.field_71093_bK);
-        EnumHand enumhand = p_147346_1_.func_187028_a();
-        ItemStack itemstack = this.field_147369_b.func_184586_b(enumhand);
-        this.field_147369_b.func_143004_u();
+        PacketThreadUtil.checkThreadAndEnqueue(packetIn, this, this.playerEntity.getServerWorld());
+        WorldServer worldserver = this.serverController.worldServerForDimension(this.playerEntity.dimension);
+        EnumHand enumhand = packetIn.getHand();
+        ItemStack itemstack = this.playerEntity.getHeldItem(enumhand);
+        this.playerEntity.markPlayerActive();
 
-        if (!itemstack.func_190926_b())
+        if (!itemstack.isEmpty())
         {
-            this.field_147369_b.field_71134_c.func_187250_a(this.field_147369_b, worldserver, itemstack, enumhand);
+            // CraftBukkit start
+            // Raytrace to look for 'rogue armswings'
+            float f1 = this.playerEntity.rotationPitch;
+            float f2 = this.playerEntity.rotationYaw;
+            double d0 = this.playerEntity.posX;
+            double d1 = this.playerEntity.posY + (double) this.playerEntity.getEyeHeight();
+            double d2 = this.playerEntity.posZ;
+            Vec3d vec3d = new Vec3d(d0, d1, d2);
+
+            float f3 = MathHelper.cos(-f2 * 0.017453292F - 3.1415927F);
+            float f4 = MathHelper.sin(-f2 * 0.017453292F - 3.1415927F);
+            float f5 = -MathHelper.cos(-f1 * 0.017453292F);
+            float f6 = MathHelper.sin(-f1 * 0.017453292F);
+            float f7 = f4 * f5;
+            float f8 = f3 * f5;
+            double d3 = playerEntity.interactionManager.getGameType()== GameType.CREATIVE ? 5.0D : 4.5D;
+            Vec3d vec3d1 = vec3d.addVector((double) f7 * d3, (double) f6 * d3, (double) f8 * d3);
+            RayTraceResult movingobjectposition = this.playerEntity.world.rayTraceBlocks(vec3d, vec3d1, false);
+
+            boolean cancelled;
+            if (movingobjectposition == null || movingobjectposition.typeOfHit != RayTraceResult.Type.BLOCK) {
+                org.bukkit.event.player.PlayerInteractEvent event = CraftEventFactory.callPlayerInteractEvent(this.playerEntity, Action.RIGHT_CLICK_AIR, itemstack, enumhand);
+                cancelled = event.useItemInHand() == Event.Result.DENY;
+            } else {
+                if (playerEntity.interactionManager.firedInteract) {
+                    playerEntity.interactionManager.firedInteract = false;
+                    cancelled = playerEntity.interactionManager.interactResult;
+                } else {
+                    org.bukkit.event.player.PlayerInteractEvent event = CraftEventFactory.callPlayerInteractEvent(playerEntity, Action.RIGHT_CLICK_BLOCK, movingobjectposition.getBlockPos(), movingobjectposition.sideHit, itemstack, true, enumhand);
+                    cancelled = event.useItemInHand() == Event.Result.DENY;
+                }
+            }
+
+            if (cancelled) {
+                ((Player)this.playerEntity.getBukkitEntity()).updateInventory(); // SPIGOT-2524
+            } else {
+                this.playerEntity.interactionManager.processRightClick(this.playerEntity, worldserver, itemstack, enumhand);
+            }
+            // CraftBukkit end
+            this.playerEntity.interactionManager.processRightClick(this.playerEntity, worldserver, itemstack, enumhand);
         }
     }
 
-    public void func_175088_a(CPacketSpectate p_175088_1_)
+    public void handleSpectate(CPacketSpectate packetIn)
     {
-        PacketThreadUtil.func_180031_a(p_175088_1_, this, this.field_147369_b.func_71121_q());
+        PacketThreadUtil.checkThreadAndEnqueue(packetIn, this, this.playerEntity.getServerWorld());
 
-        if (this.field_147369_b.func_175149_v())
+        if (this.playerEntity.isSpectator())
         {
             Entity entity = null;
 
-            for (WorldServer worldserver : this.field_147367_d.field_71305_c)
+            for (WorldServer worldserver : this.serverController.worlds)
             {
                 if (worldserver != null)
                 {
-                    entity = p_175088_1_.func_179727_a(worldserver);
+                    entity = packetIn.getEntity(worldserver);
 
                     if (entity != null)
                     {
@@ -728,255 +1109,357 @@
 
             if (entity != null)
             {
-                this.field_147369_b.func_175399_e(this.field_147369_b);
-                this.field_147369_b.func_184210_p();
+                this.playerEntity.setSpectatingEntity(this.playerEntity);
+                this.playerEntity.dismountRidingEntity();
 
-                if (entity.field_70170_p == this.field_147369_b.field_70170_p)
+                if (entity.world == this.playerEntity.world)
                 {
-                    this.field_147369_b.func_70634_a(entity.field_70165_t, entity.field_70163_u, entity.field_70161_v);
+                    this.playerEntity.setPositionAndUpdate(entity.posX, entity.posY, entity.posZ);
                 }
                 else
                 {
-                    WorldServer worldserver1 = this.field_147369_b.func_71121_q();
-                    WorldServer worldserver2 = (WorldServer)entity.field_70170_p;
-                    this.field_147369_b.field_71093_bK = entity.field_71093_bK;
-                    this.func_147359_a(new SPacketRespawn(this.field_147369_b.field_71093_bK, worldserver1.func_175659_aa(), worldserver1.func_72912_H().func_76067_t(), this.field_147369_b.field_71134_c.func_73081_b()));
-                    this.field_147367_d.func_184103_al().func_187243_f(this.field_147369_b);
-                    worldserver1.func_72973_f(this.field_147369_b);
-                    this.field_147369_b.field_70128_L = false;
-                    this.field_147369_b.func_70012_b(entity.field_70165_t, entity.field_70163_u, entity.field_70161_v, entity.field_70177_z, entity.field_70125_A);
+                    WorldServer worldserver1 = this.playerEntity.getServerWorld();
+                    WorldServer worldserver2 = (WorldServer)entity.world;
+                    this.playerEntity.dimension = entity.dimension;
+                    this.sendPacket(new SPacketRespawn(this.playerEntity.dimension, worldserver1.getDifficulty(), worldserver1.getWorldInfo().getTerrainType(), this.playerEntity.interactionManager.getGameType()));
+                    this.serverController.getPlayerList().updatePermissionLevel(this.playerEntity);
+                    worldserver1.removeEntityDangerously(this.playerEntity);
+                    this.playerEntity.isDead = false;
+                    this.playerEntity.setLocationAndAngles(entity.posX, entity.posY, entity.posZ, entity.rotationYaw, entity.rotationPitch);
 
-                    if (this.field_147369_b.func_70089_S())
+                    if (this.playerEntity.isEntityAlive())
                     {
-                        worldserver1.func_72866_a(this.field_147369_b, false);
-                        worldserver2.func_72838_d(this.field_147369_b);
-                        worldserver2.func_72866_a(this.field_147369_b, false);
+                        worldserver1.updateEntityWithOptionalForce(this.playerEntity, false);
+                        worldserver2.spawnEntity(this.playerEntity);
+                        worldserver2.updateEntityWithOptionalForce(this.playerEntity, false);
                     }
 
-                    this.field_147369_b.func_70029_a(worldserver2);
-                    this.field_147367_d.func_184103_al().func_72375_a(this.field_147369_b, worldserver1);
-                    this.field_147369_b.func_70634_a(entity.field_70165_t, entity.field_70163_u, entity.field_70161_v);
-                    this.field_147369_b.field_71134_c.func_73080_a(worldserver2);
-                    this.field_147367_d.func_184103_al().func_72354_b(this.field_147369_b, worldserver2);
-                    this.field_147367_d.func_184103_al().func_72385_f(this.field_147369_b);
+                    this.playerEntity.setWorld(worldserver2);
+                    this.serverController.getPlayerList().preparePlayer(this.playerEntity, worldserver1);
+                    this.playerEntity.setPositionAndUpdate(entity.posX, entity.posY, entity.posZ);
+                    this.playerEntity.interactionManager.setWorld(worldserver2);
+                    this.serverController.getPlayerList().updateTimeAndWeatherForPlayer(this.playerEntity, worldserver2);
+                    this.serverController.getPlayerList().syncPlayerInventory(this.playerEntity);
                 }
             }
         }
     }
 
-    public void func_175086_a(CPacketResourcePackStatus p_175086_1_)
+    public void handleResourcePackStatus(CPacketResourcePackStatus packetIn)
     {
     }
 
-    public void func_184340_a(CPacketSteerBoat p_184340_1_)
+    public void processSteerBoat(CPacketSteerBoat packetIn)
     {
-        PacketThreadUtil.func_180031_a(p_184340_1_, this, this.field_147369_b.func_71121_q());
-        Entity entity = this.field_147369_b.func_184187_bx();
+        PacketThreadUtil.checkThreadAndEnqueue(packetIn, this, this.playerEntity.getServerWorld());
+        Entity entity = this.playerEntity.getRidingEntity();
 
         if (entity instanceof EntityBoat)
         {
-            ((EntityBoat)entity).func_184445_a(p_184340_1_.func_187012_a(), p_184340_1_.func_187014_b());
+            ((EntityBoat)entity).setPaddleState(packetIn.getLeft(), packetIn.getRight());
         }
     }
 
-    public void func_147231_a(ITextComponent p_147231_1_)
+    public void onDisconnect(ITextComponent reason)
     {
-        field_147370_c.info("{} lost connection: {}", new Object[] {this.field_147369_b.func_70005_c_(), p_147231_1_});
-        this.field_147367_d.func_147132_au();
-        TextComponentTranslation textcomponenttranslation = new TextComponentTranslation("multiplayer.player.left", new Object[] {this.field_147369_b.func_145748_c_()});
-        textcomponenttranslation.func_150256_b().func_150238_a(TextFormatting.YELLOW);
-        this.field_147367_d.func_184103_al().func_148539_a(textcomponenttranslation);
-        this.field_147369_b.func_71123_m();
-        this.field_147367_d.func_184103_al().func_72367_e(this.field_147369_b);
+        LOGGER.info("{} lost connection: {}", new Object[] {this.playerEntity.getName(), reason});
+        this.serverController.refreshStatusNextTick();
+        TextComponentTranslation textcomponenttranslation = new TextComponentTranslation("multiplayer.player.left", new Object[] {this.playerEntity.getDisplayName()});
+        textcomponenttranslation.getStyle().setColor(TextFormatting.YELLOW);
+        this.serverController.getPlayerList().sendMessage(textcomponenttranslation);
+        this.playerEntity.mountEntityAndWakeUp();
+        this.serverController.getPlayerList().playerLoggedOut(this.playerEntity);
 
-        if (this.field_147367_d.func_71264_H() && this.field_147369_b.func_70005_c_().equals(this.field_147367_d.func_71214_G()))
+        if (this.serverController.isSinglePlayer() && this.playerEntity.getName().equals(this.serverController.getServerOwner()))
         {
-            field_147370_c.info("Stopping singleplayer server as player logged out");
-            this.field_147367_d.func_71263_m();
+            LOGGER.info("Stopping singleplayer server as player logged out");
+            this.serverController.initiateShutdown();
         }
     }
 
-    public void func_147359_a(final Packet<?> p_147359_1_)
+    public void sendPacket(final Packet<?> packetIn)
     {
-        if (p_147359_1_ instanceof SPacketChat)
+        if (packetIn instanceof SPacketChat)
         {
-            SPacketChat spacketchat = (SPacketChat)p_147359_1_;
-            EntityPlayer.EnumChatVisibility entityplayer$enumchatvisibility = this.field_147369_b.func_147096_v();
+            SPacketChat spacketchat = (SPacketChat)packetIn;
+            EntityPlayer.EnumChatVisibility entityplayer$enumchatvisibility = this.playerEntity.getChatVisibility();
 
-            if (entityplayer$enumchatvisibility == EntityPlayer.EnumChatVisibility.HIDDEN && spacketchat.func_179841_c() != 2)
+            if (entityplayer$enumchatvisibility == EntityPlayer.EnumChatVisibility.HIDDEN && spacketchat.getType() != 2)
             {
                 return;
             }
 
-            if (entityplayer$enumchatvisibility == EntityPlayer.EnumChatVisibility.SYSTEM && !spacketchat.func_148916_d())
+            if (entityplayer$enumchatvisibility == EntityPlayer.EnumChatVisibility.SYSTEM && !spacketchat.isSystem())
             {
                 return;
             }
         }
-
+        // CraftBukkit start
+        if (packetIn == null) {
+            return;
+        } else if (packetIn instanceof SPacketSpawnPosition) {
+            SPacketSpawnPosition packet6 = (SPacketSpawnPosition) packetIn;
+            this.playerEntity.compassTarget = new Location(this.getPlayer().getWorld(), packet6.spawnBlockPos.getX(), packet6.spawnBlockPos.getY(), packet6.spawnBlockPos.getZ());
+        }
+        // CraftBukkit end
         try
         {
-            this.field_147371_a.func_179290_a(p_147359_1_);
+            this.netManager.sendPacket(packetIn);
         }
         catch (Throwable throwable)
         {
-            CrashReport crashreport = CrashReport.func_85055_a(throwable, "Sending packet");
-            CrashReportCategory crashreportcategory = crashreport.func_85058_a("Packet being sent");
-            crashreportcategory.func_189529_a("Packet class", new ICrashReportDetail<String>()
+            CrashReport crashreport = CrashReport.makeCrashReport(throwable, "Sending packet");
+            CrashReportCategory crashreportcategory = crashreport.makeCategory("Packet being sent");
+            crashreportcategory.setDetail("Packet class", new ICrashReportDetail<String>()
             {
                 public String call() throws Exception
                 {
-                    return p_147359_1_.getClass().getCanonicalName();
+                    return packetIn.getClass().getCanonicalName();
                 }
             });
             throw new ReportedException(crashreport);
         }
     }
 
-    public void func_147355_a(CPacketHeldItemChange p_147355_1_)
+    public void processHeldItemChange(CPacketHeldItemChange packetIn)
     {
-        PacketThreadUtil.func_180031_a(p_147355_1_, this, this.field_147369_b.func_71121_q());
+        PacketThreadUtil.checkThreadAndEnqueue(packetIn, this, this.playerEntity.getServerWorld());
 
-        if (p_147355_1_.func_149614_c() >= 0 && p_147355_1_.func_149614_c() < InventoryPlayer.func_70451_h())
+        if (packetIn.getSlotId() >= 0 && packetIn.getSlotId() < InventoryPlayer.getHotbarSize())
         {
-            this.field_147369_b.field_71071_by.field_70461_c = p_147355_1_.func_149614_c();
-            this.field_147369_b.func_143004_u();
+            PlayerItemHeldEvent event = new PlayerItemHeldEvent(this.getPlayer(), this.playerEntity.inventory.currentItem, packetIn.getSlotId());
+            this.server.getPluginManager().callEvent(event);
+            if (event.isCancelled()) {
+                this.sendPacket(new SPacketHeldItemChange(this.playerEntity.inventory.currentItem));
+                this.playerEntity.markPlayerActive();
+                return;
+            }
+            // CraftBukkit end
+            this.playerEntity.inventory.currentItem = packetIn.getSlotId();
+            this.playerEntity.markPlayerActive();
         }
         else
         {
-            field_147370_c.warn("{} tried to set an invalid carried item", new Object[] {this.field_147369_b.func_70005_c_()});
+            LOGGER.warn("{} tried to set an invalid carried item", new Object[] {this.playerEntity.getName()});
         }
     }
 
-    public void func_147354_a(CPacketChatMessage p_147354_1_)
+    public void processChatMessage(CPacketChatMessage packetIn)
     {
-        PacketThreadUtil.func_180031_a(p_147354_1_, this, this.field_147369_b.func_71121_q());
+        Player player = this.getPlayer();
 
-        if (this.field_147369_b.func_147096_v() == EntityPlayer.EnumChatVisibility.HIDDEN)
+        PacketThreadUtil.checkThreadAndEnqueue(packetIn, this, this.playerEntity.getServerWorld());
+        AsyncPlayerChatEvent event = new AsyncPlayerChatEvent(false, player, packetIn.getMessage(), new LazyPlayerSet(serverController));
+        this.server.getPluginManager().callEvent(event);
+        if(event.isCancelled())
         {
+            return;
+        }
+        if (this.playerEntity.getChatVisibility() == EntityPlayer.EnumChatVisibility.HIDDEN)
+        {
             TextComponentTranslation textcomponenttranslation = new TextComponentTranslation("chat.cannotSend", new Object[0]);
-            textcomponenttranslation.func_150256_b().func_150238_a(TextFormatting.RED);
-            this.func_147359_a(new SPacketChat(textcomponenttranslation));
+            textcomponenttranslation.getStyle().setColor(TextFormatting.RED);
+            this.sendPacket(new SPacketChat(textcomponenttranslation));
         }
         else
         {
-            this.field_147369_b.func_143004_u();
-            String s = p_147354_1_.func_149439_c();
+            this.playerEntity.markPlayerActive();
+            String s = packetIn.getMessage();
             s = StringUtils.normalizeSpace(s);
 
             for (int i = 0; i < s.length(); ++i)
             {
-                if (!ChatAllowedCharacters.func_71566_a(s.charAt(i)))
+                if (!ChatAllowedCharacters.isAllowedCharacter(s.charAt(i)))
                 {
-                    this.func_147360_c("Illegal characters in chat");
+                    this.disconnect("Illegal characters in chat");
                     return;
                 }
             }
 
             if (s.startsWith("/"))
             {
-                this.func_147361_d(s);
+                this.handleSlashCommand(s);
             }
             else
             {
-                ITextComponent itextcomponent = new TextComponentTranslation("chat.type.text", new Object[] {this.field_147369_b.func_145748_c_(), s});
-                this.field_147367_d.func_184103_al().func_148544_a(itextcomponent, false);
+                ITextComponent itextcomponent = new TextComponentTranslation("chat.type.text", this.playerEntity.getDisplayName(), net.minecraftforge.common.ForgeHooks.newChatWithLinks(s));
+                itextcomponent = net.minecraftforge.common.ForgeHooks.onServerChatEvent(this, s, itextcomponent);
+                if (itextcomponent == null) return;
+                this.serverController.getPlayerList().sendMessage(itextcomponent, false);
             }
 
-            this.field_147374_l += 20;
+            this.chatSpamThresholdCount += 20;
 
-            if (this.field_147374_l > 200 && !this.field_147367_d.func_184103_al().func_152596_g(this.field_147369_b.func_146103_bH()))
+            if (this.chatSpamThresholdCount > 200 && !this.serverController.getPlayerList().canSendCommands(this.playerEntity.getGameProfile()))
             {
-                this.func_147360_c("disconnect.spam");
+                this.disconnect("disconnect.spam");
             }
         }
     }
 
-    private void func_147361_d(String p_147361_1_)
+    private void handleSlashCommand(String command)
     {
-        this.field_147367_d.func_71187_D().func_71556_a(this.field_147369_b, p_147361_1_);
+        // CraftBukkit start - whole method
+        this.LOGGER.info(this.playerEntity.getName() + " issued server command: " + command);
+
+        CraftPlayer player = this.getPlayer();
+
+        PlayerCommandPreprocessEvent event = new PlayerCommandPreprocessEvent(player, command, new LazyPlayerSet(serverController));
+        this.server.getPluginManager().callEvent(event);
+
+        if (event.isCancelled()) {
+            return;
+        }
+
+        try {
+            if (this.server.dispatchCommand(event.getPlayer(), event.getMessage().substring(1))) {
+                return;
+            }
+            else
+            {
+                this.serverController.getCommandManager().executeCommand(this.playerEntity, command);
+            }
+        } catch (org.bukkit.command.CommandException ex) {
+            player.sendMessage(org.bukkit.ChatColor.RED + "An internal error occurred while attempting to perform this command");
+            java.util.logging.Logger.getLogger(net.minecraft.network.NetHandlerPlayServer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
+            return;
+        }
+        // this.minecraftServer.getCommandHandler().a(this.player, s);
+        // CraftBukkit end
     }
 
-    public void func_175087_a(CPacketAnimation p_175087_1_)
+    public void handleAnimation(CPacketAnimation packetIn)
     {
-        PacketThreadUtil.func_180031_a(p_175087_1_, this, this.field_147369_b.func_71121_q());
-        this.field_147369_b.func_143004_u();
-        this.field_147369_b.func_184609_a(p_175087_1_.func_187018_a());
+        PacketThreadUtil.checkThreadAndEnqueue(packetIn, this, this.playerEntity.getServerWorld());
+        this.playerEntity.markPlayerActive();
+        // CraftBukkit start - Raytrace to look for 'rogue armswings'
+        float f1 = this.playerEntity.rotationPitch;
+        float f2 = this.playerEntity.rotationYaw;
+        double d0 = this.playerEntity.posX;
+        double d1 = this.playerEntity.posY + (double) this.playerEntity.getEyeHeight();
+        double d2 = this.playerEntity.posZ;
+        Vec3d vec3d = new Vec3d(d0, d1, d2);
+
+        float f3 = MathHelper.cos(-f2 * 0.017453292F - 3.1415927F);
+        float f4 = MathHelper.sin(-f2 * 0.017453292F - 3.1415927F);
+        float f5 = -MathHelper.cos(-f1 * 0.017453292F);
+        float f6 = MathHelper.sin(-f1 * 0.017453292F);
+        float f7 = f4 * f5;
+        float f8 = f3 * f5;
+        double d3 = playerEntity.interactionManager.getGameType()== GameType.CREATIVE ? 5.0D : 4.5D;
+        Vec3d vec3d1 = vec3d.addVector((double) f7 * d3, (double) f6 * d3, (double) f8 * d3);
+        RayTraceResult movingobjectposition = this.playerEntity.world.rayTraceBlocks(vec3d, vec3d1, false);
+
+        if (movingobjectposition == null || movingobjectposition.typeOfHit != RayTraceResult.Type.BLOCK) {
+            CraftEventFactory.callPlayerInteractEvent(this.playerEntity, Action.LEFT_CLICK_AIR, this.playerEntity.inventory.getCurrentItem(), EnumHand.MAIN_HAND);
+        }
+
+        // Arm swing animation
+        PlayerAnimationEvent event = new PlayerAnimationEvent(this.getPlayer());
+        this.server.getPluginManager().callEvent(event);
+
+        if (event.isCancelled()) return;
+        // CraftBukkit end
+        this.playerEntity.swingArm(packetIn.getHand());
     }
 
-    public void func_147357_a(CPacketEntityAction p_147357_1_)
+    public void processEntityAction(CPacketEntityAction packetIn)
     {
-        PacketThreadUtil.func_180031_a(p_147357_1_, this, this.field_147369_b.func_71121_q());
-        this.field_147369_b.func_143004_u();
+        PacketThreadUtil.checkThreadAndEnqueue(packetIn, this, this.playerEntity.getServerWorld());
+        this.playerEntity.markPlayerActive();
 
-        switch (p_147357_1_.func_180764_b())
+        switch (packetIn.getAction())
         {
+            //MCPC Revive start
             case START_SNEAKING:
-                this.field_147369_b.func_70095_a(true);
+                PlayerToggleSneakEvent event1 = new PlayerToggleSneakEvent(this.getPlayer(), packetIn.getAction() == CPacketEntityAction.Action.START_SNEAKING);
+                this.server.getPluginManager().callEvent(event1);
+
+                if (event1.isCancelled()) {
+                    return;
+                }
+                this.playerEntity.setSneaking(true);
                 break;
             case STOP_SNEAKING:
-                this.field_147369_b.func_70095_a(false);
+                PlayerToggleSneakEvent event2 = new PlayerToggleSneakEvent(this.getPlayer(), packetIn.getAction() == CPacketEntityAction.Action.STOP_SNEAKING);
+                this.server.getPluginManager().callEvent(event2);
+                if (event2.isCancelled()) {
+                    return;
+                }
+                this.playerEntity.setSneaking(false);
                 break;
             case START_SPRINTING:
-                this.field_147369_b.func_70031_b(true);
+                PlayerToggleSprintEvent event3 = new PlayerToggleSprintEvent(this.getPlayer(), packetIn.getAction() == CPacketEntityAction.Action.START_SPRINTING);
+                this.server.getPluginManager().callEvent(event3);
+                if (event3.isCancelled()) {
+                    return;
+                }
+                this.playerEntity.setSprinting(true);
                 break;
             case STOP_SPRINTING:
-                this.field_147369_b.func_70031_b(false);
+                PlayerToggleSprintEvent event4 = new PlayerToggleSprintEvent(this.getPlayer(), packetIn.getAction() == CPacketEntityAction.Action.STOP_SNEAKING);
+                this.server.getPluginManager().callEvent(event4);
+
+                if (event4.isCancelled()) {
+                    return;
+                }
+                this.playerEntity.setSprinting(false);
                 break;
+                //MCPCRevive end
             case STOP_SLEEPING:
 
-                if (this.field_147369_b.func_70608_bn())
+                if (this.playerEntity.isPlayerSleeping())
                 {
-                    this.field_147369_b.func_70999_a(false, true, true);
-                    this.field_184362_y = new Vec3d(this.field_147369_b.field_70165_t, this.field_147369_b.field_70163_u, this.field_147369_b.field_70161_v);
+                    this.playerEntity.wakeUpPlayer(false, true, true);
+                    this.targetPos = new Vec3d(this.playerEntity.posX, this.playerEntity.posY, this.playerEntity.posZ);
                 }
 
                 break;
             case START_RIDING_JUMP:
 
-                if (this.field_147369_b.func_184187_bx() instanceof IJumpingMount)
+                if (this.playerEntity.getRidingEntity() instanceof IJumpingMount)
                 {
-                    IJumpingMount ijumpingmount1 = (IJumpingMount)this.field_147369_b.func_184187_bx();
-                    int i = p_147357_1_.func_149512_e();
+                    IJumpingMount ijumpingmount1 = (IJumpingMount)this.playerEntity.getRidingEntity();
+                    int i = packetIn.getAuxData();
 
-                    if (ijumpingmount1.func_184776_b() && i > 0)
+                    if (ijumpingmount1.canJump() && i > 0)
                     {
-                        ijumpingmount1.func_184775_b(i);
+                        ijumpingmount1.handleStartJump(i);
                     }
                 }
 
                 break;
             case STOP_RIDING_JUMP:
 
-                if (this.field_147369_b.func_184187_bx() instanceof IJumpingMount)
+                if (this.playerEntity.getRidingEntity() instanceof IJumpingMount)
                 {
-                    IJumpingMount ijumpingmount = (IJumpingMount)this.field_147369_b.func_184187_bx();
-                    ijumpingmount.func_184777_r_();
+                    IJumpingMount ijumpingmount = (IJumpingMount)this.playerEntity.getRidingEntity();
+                    ijumpingmount.handleStopJump();
                 }
 
                 break;
             case OPEN_INVENTORY:
 
-                if (this.field_147369_b.func_184187_bx() instanceof AbstractHorse)
+                if (this.playerEntity.getRidingEntity() instanceof AbstractHorse)
                 {
-                    ((AbstractHorse)this.field_147369_b.func_184187_bx()).func_110199_f(this.field_147369_b);
+                    ((AbstractHorse)this.playerEntity.getRidingEntity()).openGUI(this.playerEntity);
                 }
 
                 break;
             case START_FALL_FLYING:
 
-                if (!this.field_147369_b.field_70122_E && this.field_147369_b.field_70181_x < 0.0D && !this.field_147369_b.func_184613_cA() && !this.field_147369_b.func_70090_H())
+                if (!this.playerEntity.onGround && this.playerEntity.motionY < 0.0D && !this.playerEntity.isElytraFlying() && !this.playerEntity.isInWater())
                 {
-                    ItemStack itemstack = this.field_147369_b.func_184582_a(EntityEquipmentSlot.CHEST);
+                    ItemStack itemstack = this.playerEntity.getItemStackFromSlot(EntityEquipmentSlot.CHEST);
 
-                    if (itemstack.func_77973_b() == Items.field_185160_cR && ItemElytra.func_185069_d(itemstack))
+                    if (itemstack.getItem() == Items.ELYTRA && ItemElytra.isBroken(itemstack))
                     {
-                        this.field_147369_b.func_184847_M();
+                        this.playerEntity.setElytraFlying();
                     }
                 }
                 else
                 {
-                    this.field_147369_b.func_189103_N();
+                    this.playerEntity.clearElytraFlying();
                 }
 
                 break;
@@ -985,16 +1468,16 @@
         }
     }
 
-    public void func_147340_a(CPacketUseEntity p_147340_1_)
+    public void processUseEntity(CPacketUseEntity packetIn)
     {
-        PacketThreadUtil.func_180031_a(p_147340_1_, this, this.field_147369_b.func_71121_q());
-        WorldServer worldserver = this.field_147367_d.func_71218_a(this.field_147369_b.field_71093_bK);
-        Entity entity = p_147340_1_.func_149564_a(worldserver);
-        this.field_147369_b.func_143004_u();
+        PacketThreadUtil.checkThreadAndEnqueue(packetIn, this, this.playerEntity.getServerWorld());
+        WorldServer worldserver = this.serverController.worldServerForDimension(this.playerEntity.dimension);
+        Entity entity = packetIn.getEntityFromWorld(worldserver);
+        this.playerEntity.markPlayerActive();
 
         if (entity != null)
         {
-            boolean flag = this.field_147369_b.func_70685_l(entity);
+            boolean flag = this.playerEntity.canEntityBeSeen(entity);
             double d0 = 36.0D;
 
             if (!flag)
@@ -1002,221 +1485,561 @@
                 d0 = 9.0D;
             }
 
-            if (this.field_147369_b.func_70068_e(entity) < d0)
+            if (this.playerEntity.getDistanceSqToEntity(entity) < d0)
             {
-                if (p_147340_1_.func_149565_c() == CPacketUseEntity.Action.INTERACT)
+                ItemStack itemInHand = this.playerEntity.getHeldItem(packetIn.getHand() == null ? EnumHand.MAIN_HAND : packetIn.getHand()); // CraftBukkit
+
+                if (packetIn.getAction() == CPacketUseEntity.Action.INTERACT
+                        || packetIn.getAction() == CPacketUseEntity.Action.INTERACT_AT) {
+                    // CraftBukkit start
+                    boolean triggerLeashUpdate = itemInHand != null && itemInHand.getItem() == Items.LEAD && entity instanceof EntityLiving;
+                    Item origItem = this.playerEntity.inventory.getCurrentItem() == null ? null : this.playerEntity.inventory.getCurrentItem().getItem();
+                    PlayerInteractEntityEvent event;
+                    if (packetIn.getAction() == CPacketUseEntity.Action.INTERACT) {
+                        event = new PlayerInteractEntityEvent((Player) this.getPlayer(), entity.getBukkitEntity(), (packetIn.getHand() == EnumHand.OFF_HAND) ? EquipmentSlot.OFF_HAND : EquipmentSlot.HAND);
+                    } else {
+                        Vec3d target = packetIn.getHitVec();
+                        event = new PlayerInteractAtEntityEvent((Player) this.getPlayer(), entity.getBukkitEntity(), new Vector(target.xCoord, target.yCoord, target.zCoord), (packetIn.getHand() == EnumHand.OFF_HAND) ? EquipmentSlot.OFF_HAND : EquipmentSlot.HAND);
+                    }
+                    this.server.getPluginManager().callEvent(event);
+
+                    if (triggerLeashUpdate && (event.isCancelled() || this.playerEntity.inventory.getCurrentItem() == null || this.playerEntity.inventory.getCurrentItem().getItem() != Items.LEAD)) {
+                        // Refresh the current leash state
+                        this.sendPacket(new SPacketEntityAttach(entity, ((EntityLiving) entity).getLeashedToEntity()));
+                    }
+
+                    if (event.isCancelled() || this.playerEntity.inventory.getCurrentItem() == null || this.playerEntity.inventory.getCurrentItem().getItem() != origItem) {
+                        // Refresh the current entity metadata
+                        this.sendPacket(new SPacketEntityMetadata(entity.getEntityId(), entity.dataManager, true));
+                    }
+
+                    if (event.isCancelled()) {
+                        return;
+                    }
+                    // CraftBukkit end
+                }
+                if (packetIn.getAction() == CPacketUseEntity.Action.INTERACT)
                 {
-                    EnumHand enumhand = p_147340_1_.func_186994_b();
-                    this.field_147369_b.func_190775_a(entity, enumhand);
+                    EnumHand enumhand = packetIn.getHand();
+                    this.playerEntity.interactOn(entity, enumhand);
                 }
-                else if (p_147340_1_.func_149565_c() == CPacketUseEntity.Action.INTERACT_AT)
+                else if (packetIn.getAction() == CPacketUseEntity.Action.INTERACT_AT)
                 {
-                    EnumHand enumhand1 = p_147340_1_.func_186994_b();
-                    entity.func_184199_a(this.field_147369_b, p_147340_1_.func_179712_b(), enumhand1);
+                    EnumHand enumhand1 = packetIn.getHand();
+                    if(ForgeHooks.onInteractEntityAtAction(playerEntity, entity, packetIn.getHitVec(), enumhand1) != null) return;
+                    entity.applyPlayerInteraction(this.playerEntity, packetIn.getHitVec(), enumhand1);
                 }
-                else if (p_147340_1_.func_149565_c() == CPacketUseEntity.Action.ATTACK)
+                else if (packetIn.getAction() == CPacketUseEntity.Action.ATTACK)
                 {
-                    if (entity instanceof EntityItem || entity instanceof EntityXPOrb || entity instanceof EntityArrow || entity == this.field_147369_b)
+                    if (entity instanceof EntityItem || entity instanceof EntityXPOrb || entity instanceof EntityArrow || entity == this.playerEntity)
                     {
-                        this.func_147360_c("Attempting to attack an invalid entity");
-                        this.field_147367_d.func_71236_h("Player " + this.field_147369_b.func_70005_c_() + " tried to attack an invalid entity");
+                        this.disconnect("Attempting to attack an invalid entity");
+                        this.serverController.logWarning("Player " + this.playerEntity.getName() + " tried to attack an invalid entity");
                         return;
                     }
 
-                    this.field_147369_b.func_71059_n(entity);
+                    this.playerEntity.attackTargetEntityWithCurrentItem(entity);
                 }
             }
         }
     }
 
-    public void func_147342_a(CPacketClientStatus p_147342_1_)
+    public void processClientStatus(CPacketClientStatus packetIn)
     {
-        PacketThreadUtil.func_180031_a(p_147342_1_, this, this.field_147369_b.func_71121_q());
-        this.field_147369_b.func_143004_u();
-        CPacketClientStatus.State cpacketclientstatus$state = p_147342_1_.func_149435_c();
+        PacketThreadUtil.checkThreadAndEnqueue(packetIn, this, this.playerEntity.getServerWorld());
+        this.playerEntity.markPlayerActive();
+        CPacketClientStatus.State cpacketclientstatus$state = packetIn.getStatus();
 
         switch (cpacketclientstatus$state)
         {
             case PERFORM_RESPAWN:
 
-                if (this.field_147369_b.field_71136_j)
+                if (this.playerEntity.playerConqueredTheEnd)
                 {
-                    this.field_147369_b.field_71136_j = false;
-                    this.field_147369_b = this.field_147367_d.func_184103_al().func_72368_a(this.field_147369_b, 0, true);
+                    this.playerEntity.playerConqueredTheEnd = false;
+                    this.playerEntity = this.serverController.getPlayerList().recreatePlayerEntity(this.playerEntity, 0, true);
                 }
                 else
                 {
-                    if (this.field_147369_b.func_110143_aJ() > 0.0F)
+                    if (this.playerEntity.getHealth() > 0.0F)
                     {
                         return;
                     }
 
-                    this.field_147369_b = this.field_147367_d.func_184103_al().func_72368_a(this.field_147369_b, 0, false);
+                    this.playerEntity = this.serverController.getPlayerList().recreatePlayerEntity(this.playerEntity, playerEntity.dimension, false);
 
-                    if (this.field_147367_d.func_71199_h())
+                    if (this.serverController.isHardcore())
                     {
-                        this.field_147369_b.func_71033_a(GameType.SPECTATOR);
-                        this.field_147369_b.func_71121_q().func_82736_K().func_82764_b("spectatorsGenerateChunks", "false");
+                        this.playerEntity.setGameType(GameType.SPECTATOR);
+                        this.playerEntity.getServerWorld().getGameRules().setOrCreateGameRule("spectatorsGenerateChunks", "false");
                     }
                 }
 
                 break;
             case REQUEST_STATS:
-                this.field_147369_b.func_147099_x().func_150876_a(this.field_147369_b);
+                this.playerEntity.getStatFile().sendStats(this.playerEntity);
                 break;
             case OPEN_INVENTORY_ACHIEVEMENT:
-                this.field_147369_b.func_71029_a(AchievementList.field_187982_f);
+                this.playerEntity.addStat(AchievementList.OPEN_INVENTORY);
         }
     }
 
-    public void func_147356_a(CPacketCloseWindow p_147356_1_)
+    public void processCloseWindow(CPacketCloseWindow packetIn)
     {
-        PacketThreadUtil.func_180031_a(p_147356_1_, this, this.field_147369_b.func_71121_q());
-        this.field_147369_b.func_71128_l();
+        PacketThreadUtil.checkThreadAndEnqueue(packetIn, this, this.playerEntity.getServerWorld());
+        this.playerEntity.closeContainer();
     }
 
-    public void func_147351_a(CPacketClickWindow p_147351_1_)
+    public void processClickWindow(CPacketClickWindow packetIn)
     {
-        PacketThreadUtil.func_180031_a(p_147351_1_, this, this.field_147369_b.func_71121_q());
-        this.field_147369_b.func_143004_u();
-
-        if (this.field_147369_b.field_71070_bA.field_75152_c == p_147351_1_.func_149548_c() && this.field_147369_b.field_71070_bA.func_75129_b(this.field_147369_b))
+        PacketThreadUtil.checkThreadAndEnqueue(packetIn, this, this.playerEntity.getServerWorld());
+        this.playerEntity.markPlayerActive();
+        boolean cancelled = this.playerEntity.isSpectator(); // CraftBukkit - see below if
+        if (this.playerEntity.openContainer.windowId == packetIn.getWindowId() && this.playerEntity.openContainer.getCanCraft(this.playerEntity))
         {
-            if (this.field_147369_b.func_175149_v())
+            if (this.playerEntity.isSpectator())
             {
-                NonNullList<ItemStack> nonnulllist = NonNullList.<ItemStack>func_191196_a();
+                NonNullList<ItemStack> nonnulllist = NonNullList.<ItemStack>create();
 
-                for (int i = 0; i < this.field_147369_b.field_71070_bA.field_75151_b.size(); ++i)
+                for (int i = 0; i < this.playerEntity.openContainer.inventorySlots.size(); ++i)
                 {
-                    nonnulllist.add(((Slot)this.field_147369_b.field_71070_bA.field_75151_b.get(i)).func_75211_c());
+                    nonnulllist.add(((Slot)this.playerEntity.openContainer.inventorySlots.get(i)).getStack());
                 }
 
-                this.field_147369_b.func_71110_a(this.field_147369_b.field_71070_bA, nonnulllist);
+                this.playerEntity.updateCraftingInventory(this.playerEntity.openContainer, nonnulllist);
             }
             else
             {
-                ItemStack itemstack2 = this.field_147369_b.field_71070_bA.func_184996_a(p_147351_1_.func_149544_d(), p_147351_1_.func_149543_e(), p_147351_1_.func_186993_f(), this.field_147369_b);
+                ItemStack itemstack2 = this.playerEntity.openContainer.slotClick(packetIn.getSlotId(), packetIn.getUsedButton(), packetIn.getClickType(), this.playerEntity);
 
-                if (ItemStack.func_77989_b(p_147351_1_.func_149546_g(), itemstack2))
+                // CraftBukkit start - Call InventoryClickEvent
+                if (packetIn.getSlotId() < -1 && packetIn.getSlotId() != -999) {
+                    return;
+                }
+
+                InventoryView inventory = this.playerEntity.openContainer.getBukkitView();
+                InventoryType.SlotType type = CraftInventoryView.getSlotType(inventory, packetIn.getSlotId());
+
+                InventoryClickEvent event;
+                ClickType click = ClickType.UNKNOWN;
+                InventoryAction action = InventoryAction.UNKNOWN;
+
+                ItemStack itemstack = ItemStack.EMPTY;
+
+                switch (packetIn.getClickType()) {
+                    case PICKUP:
+                        if (packetIn.getUsedButton() == 0) {
+                            click = ClickType.LEFT;
+                        } else if (packetIn.getUsedButton() == 1) {
+                            click = ClickType.RIGHT;
+                        }
+                        if (packetIn.getUsedButton() == 0 || packetIn.getUsedButton() == 1) {
+                            action = InventoryAction.NOTHING; // Don't want to repeat ourselves
+                            if (packetIn.getSlotId() == -999) {
+                                if (!playerEntity.inventory.getItemStack().isEmpty()) {
+                                    action = packetIn.getUsedButton() == 0 ? InventoryAction.DROP_ALL_CURSOR : InventoryAction.DROP_ONE_CURSOR;
+                                }
+                            } else if (packetIn.getSlotId() < 0)  {
+                                action = InventoryAction.NOTHING;
+                            } else {
+                                Slot slot = this.playerEntity.openContainer.getSlot(packetIn.getSlotId());
+                                if (slot != null) {
+                                    ItemStack clickedItem = slot.getStack();
+                                    ItemStack cursor = playerEntity.inventory.getItemStack();
+                                    if (clickedItem.isEmpty()) {
+                                        if (!cursor.isEmpty()) {
+                                            action = packetIn.getUsedButton() == 0 ? InventoryAction.PLACE_ALL : InventoryAction.PLACE_ONE;
+                                        }
+                                    } else if (slot.canTakeStack(playerEntity)) {
+                                        if (cursor.isEmpty()) {
+                                            action = packetIn.getUsedButton() == 0 ? InventoryAction.PICKUP_ALL : InventoryAction.PICKUP_HALF;
+                                        } else if (slot.isItemValid(cursor)) {
+                                            if (clickedItem.isItemEqual(cursor) && ItemStack.areItemStackTagsEqual(clickedItem, cursor)) {
+                                                int toPlace = packetIn.getUsedButton() == 0 ? cursor.getCount() : 1;
+                                                toPlace = Math.min(toPlace, clickedItem.getMaxStackSize() - clickedItem.getCount());
+                                                toPlace = Math.min(toPlace, slot.inventory.getInventoryStackLimit() - clickedItem.getCount());
+                                                if (toPlace == 1) {
+                                                    action = InventoryAction.PLACE_ONE;
+                                                } else if (toPlace == cursor.getCount()) {
+                                                    action = InventoryAction.PLACE_ALL;
+                                                } else if (toPlace < 0) {
+                                                    action = toPlace != -1 ? InventoryAction.PICKUP_SOME : InventoryAction.PICKUP_ONE; // this happens with oversized stacks
+                                                } else if (toPlace != 0) {
+                                                    action = InventoryAction.PLACE_SOME;
+                                                }
+                                            } else if (cursor.getCount() <= slot.getSlotStackLimit()) {
+                                                action = InventoryAction.SWAP_WITH_CURSOR;
+                                            }
+                                        } else if (cursor.getItem() == clickedItem.getItem() && (!cursor.getHasSubtypes() || cursor.getMetadata() == clickedItem.getMetadata()) && ItemStack.areItemStackTagsEqual(cursor, clickedItem)) {
+                                            if (clickedItem.getCount() >= 0) {
+                                                if (clickedItem.getCount() + cursor.getCount() <= cursor.getMaxStackSize()) {
+                                                    // As of 1.5, this is result slots only
+                                                    action = InventoryAction.PICKUP_ALL;
+                                                }
+                                            }
+                                        }
+                                    }
+                                }
+                            }
+                        }
+                        break;
+                    // TODO check on updates
+                    case QUICK_MOVE:
+                        if (packetIn.getUsedButton() == 0) {
+                            click = ClickType.SHIFT_LEFT;
+                        } else if (packetIn.getUsedButton() == 1) {
+                            click = ClickType.SHIFT_RIGHT;
+                        }
+                        if (packetIn.getUsedButton() == 0 || packetIn.getUsedButton() == 1) {
+                            if (packetIn.getSlotId() < 0) {
+                                action = InventoryAction.NOTHING;
+                            } else {
+                                Slot slot = this.playerEntity.openContainer.getSlot(packetIn.getSlotId());
+                                if (slot != null && slot.canTakeStack(this.playerEntity) && slot.getHasStack()) {
+                                    action = InventoryAction.MOVE_TO_OTHER_INVENTORY;
+                                } else {
+                                    action = InventoryAction.NOTHING;
+                                }
+                            }
+                        }
+                        break;
+                    case SWAP:
+                        if (packetIn.getUsedButton() >= 0 && packetIn.getUsedButton() < 9) {
+                            click = ClickType.NUMBER_KEY;
+                            Slot clickedSlot = this.playerEntity.openContainer.getSlot(packetIn.getSlotId());
+                            if (clickedSlot.canTakeStack(playerEntity)) {
+                                ItemStack hotbar = this.playerEntity.inventory.getStackInSlot(packetIn.getUsedButton());
+                                boolean canCleanSwap = hotbar.isEmpty() || (clickedSlot.inventory == playerEntity.inventory && clickedSlot.isItemValid(hotbar)); // the slot will accept the hotbar item
+                                if (clickedSlot.getHasStack()) {
+                                    if (canCleanSwap) {
+                                        action = InventoryAction.HOTBAR_SWAP;
+                                    } else {
+                                        action = InventoryAction.HOTBAR_MOVE_AND_READD;
+                                    }
+                                } else if (!clickedSlot.getHasStack() && !hotbar.isEmpty() && clickedSlot.isItemValid(hotbar)) {
+                                    action = InventoryAction.HOTBAR_SWAP;
+                                } else {
+                                    action = InventoryAction.NOTHING;
+                                }
+                            } else {
+                                action = InventoryAction.NOTHING;
+                            }
+                        }
+                        break;
+                    case CLONE:
+                        if (packetIn.getUsedButton() == 2) {
+                            click = ClickType.MIDDLE;
+                            if (packetIn.getSlotId() == -999) {
+                                action = InventoryAction.NOTHING;
+                            } else {
+                                Slot slot = this.playerEntity.openContainer.getSlot(packetIn.getSlotId());
+                                if (slot != null && slot.getHasStack() && playerEntity.capabilities.isCreativeMode && playerEntity.inventory.getItemStack().isEmpty()) {
+                                    action = InventoryAction.CLONE_STACK;
+                                } else {
+                                    action = InventoryAction.NOTHING;
+                                }
+                            }
+                        } else {
+                            click = ClickType.UNKNOWN;
+                            action = InventoryAction.UNKNOWN;
+                        }
+                        break;
+                    case THROW:
+                        if (packetIn.getSlotId() >= 0) {
+                            if (packetIn.getUsedButton() == 0) {
+                                click = ClickType.DROP;
+                                Slot slot = this.playerEntity.openContainer.getSlot(packetIn.getSlotId());
+                                if (slot != null && slot.getHasStack() && slot.canTakeStack(playerEntity) && !slot.getStack().isEmpty() && slot.getStack().getItem() != Item.getItemFromBlock(Blocks.AIR)) {
+                                    action = InventoryAction.DROP_ONE_SLOT;
+                                } else {
+                                    action = InventoryAction.NOTHING;
+                                }
+                            } else if (packetIn.getUsedButton() == 1) {
+                                click = ClickType.CONTROL_DROP;
+                                Slot slot = this.playerEntity.openContainer.getSlot(packetIn.getSlotId());
+                                if (slot != null && slot.getHasStack() && slot.canTakeStack(playerEntity) && !slot.getStack().isEmpty() && slot.getStack().getItem() != Item.getItemFromBlock(Blocks.AIR)) {
+                                    action = InventoryAction.DROP_ALL_SLOT;
+                                } else {
+                                    action = InventoryAction.NOTHING;
+                                }
+                            }
+                        } else {
+                            // Sane default (because this happens when they are holding nothing. Don't ask why.)
+                            click = ClickType.LEFT;
+                            if (packetIn.getUsedButton() == 1) {
+                                click = ClickType.RIGHT;
+                            }
+                            action = InventoryAction.NOTHING;
+                        }
+                        break;
+                    case QUICK_CRAFT:
+                        itemstack = this.playerEntity.openContainer.slotClick(packetIn.getSlotId(), packetIn.getUsedButton(), packetIn.getClickType(), this.playerEntity);
+                        break;
+                    case PICKUP_ALL:
+                        click = ClickType.DOUBLE_CLICK;
+                        action = InventoryAction.NOTHING;
+                        if (packetIn.getSlotId() >= 0 && !this.playerEntity.inventory.getItemStack().isEmpty()) {
+                            ItemStack cursor = this.playerEntity.inventory.getItemStack();
+                            action = InventoryAction.NOTHING;
+                            // Quick check for if we have any of the item
+                            if (inventory.getTopInventory().contains(org.bukkit.Material.getMaterial(Item.getIdFromItem(cursor.getItem()))) || inventory.getBottomInventory().contains(org.bukkit.Material.getMaterial(Item.getIdFromItem(cursor.getItem())))) {
+                                action = InventoryAction.COLLECT_TO_CURSOR;
+                            }
+                        }
+                        break;
+                    default:
+                        break;
+                }
+
+                if (packetIn.getClickType() != net.minecraft.inventory.ClickType.QUICK_CRAFT) {
+                    if (click == ClickType.NUMBER_KEY) {
+                        event = new InventoryClickEvent(inventory, type, packetIn.getSlotId(), click, action, packetIn.getUsedButton());
+                    } else {
+                        event = new InventoryClickEvent(inventory, type, packetIn.getSlotId(), click, action);
+                    }
+
+                    Inventory top = inventory.getTopInventory();
+                    if (packetIn.getSlotId() == 0 && top instanceof CraftingInventory) {
+                        Recipe recipe = ((CraftingInventory) top).getRecipe();
+                        if (recipe != null) {
+                            if (click == ClickType.NUMBER_KEY) {
+                                event = new CraftItemEvent(recipe, inventory, type, packetIn.getSlotId(), click, action, packetIn.getUsedButton());
+                            } else {
+                                event = new CraftItemEvent(recipe, inventory, type, packetIn.getSlotId(), click, action);
+                            }
+                        }
+                    }
+
+                    event.setCancelled(cancelled);
+                    Container oldContainer = this.playerEntity.openContainer; // SPIGOT-1224
+                    server.getPluginManager().callEvent(event);
+                    if (this.playerEntity.openContainer != oldContainer) {
+                        return;
+                    }
+
+                    switch (event.getResult()) {
+                        case ALLOW:
+                        case DEFAULT:
+                            itemstack = this.playerEntity.openContainer.slotClick(packetIn.getSlotId(), packetIn.getUsedButton(), packetIn.getClickType(), this.playerEntity);
+                            break;
+                        case DENY:
+                            /* Needs enum constructor in InventoryAction
+                            if (action.modifiesOtherSlots()) {
+
+                            } else {
+                                if (action.modifiesCursor()) {
+                                    this.player.playerConnection.sendPacket(new Packet103SetSlot(-1, -1, this.player.inventory.getCarried()));
+                                }
+                                if (action.modifiesClicked()) {
+                                    this.player.playerConnection.sendPacket(new Packet103SetSlot(this.player.activeContainer.windowId, packet102windowclick.slot, this.player.activeContainer.getSlot(packet102windowclick.slot).getItem()));
+                                }
+                            }*/
+                            switch (action) {
+                                // Modified other slots
+                                case PICKUP_ALL:
+                                case MOVE_TO_OTHER_INVENTORY:
+                                case HOTBAR_MOVE_AND_READD:
+                                case HOTBAR_SWAP:
+                                case COLLECT_TO_CURSOR:
+                                case UNKNOWN:
+                                    this.playerEntity.sendContainerToPlayer(this.playerEntity.openContainer);
+                                    break;
+                                // Modified cursor and clicked
+                                case PICKUP_SOME:
+                                case PICKUP_HALF:
+                                case PICKUP_ONE:
+                                case PLACE_ALL:
+                                case PLACE_SOME:
+                                case PLACE_ONE:
+                                case SWAP_WITH_CURSOR:
+                                    this.playerEntity.connection.sendPacket(new SPacketSetSlot(-1, -1, this.playerEntity.inventory.getItemStack()));
+                                    this.playerEntity.connection.sendPacket(new SPacketSetSlot(this.playerEntity.openContainer.windowId, packetIn.getSlotId(), this.playerEntity.openContainer.getSlot(packetIn.getSlotId()).getStack()));
+                                    break;
+                                // Modified clicked only
+                                case DROP_ALL_SLOT:
+                                case DROP_ONE_SLOT:
+                                    this.playerEntity.connection.sendPacket(new SPacketSetSlot(this.playerEntity.openContainer.windowId, packetIn.getSlotId(), this.playerEntity.openContainer.getSlot(packetIn.getSlotId()).getStack()));
+                                    break;
+                                // Modified cursor only
+                                case DROP_ALL_CURSOR:
+                                case DROP_ONE_CURSOR:
+                                case CLONE_STACK:
+                                    this.playerEntity.connection.sendPacket(new SPacketSetSlot(-1, -1, this.playerEntity.inventory.getItemStack()));
+                                    break;
+                                // Nothing
+                                case NOTHING:
+                                    break;
+                            }
+                            return;
+                    }
+
+                    if (event instanceof CraftItemEvent) {
+                        // Need to update the inventory on crafting to
+                        // correctly support custom recipes
+                        playerEntity.sendContainerToPlayer(playerEntity.openContainer);
+                    }
+                }
+                // CraftBukkit end
+
+
+                if (ItemStack.areItemStacksEqualUsingNBTShareTag(packetIn.getClickedItem(), itemstack2))
                 {
-                    this.field_147369_b.field_71135_a.func_147359_a(new SPacketConfirmTransaction(p_147351_1_.func_149548_c(), p_147351_1_.func_149547_f(), true));
-                    this.field_147369_b.field_71137_h = true;
-                    this.field_147369_b.field_71070_bA.func_75142_b();
-                    this.field_147369_b.func_71113_k();
-                    this.field_147369_b.field_71137_h = false;
+                    this.playerEntity.connection.sendPacket(new SPacketConfirmTransaction(packetIn.getWindowId(), packetIn.getActionNumber(), true));
+                    this.playerEntity.isChangingQuantityOnly = true;
+                    this.playerEntity.openContainer.detectAndSendChanges();
+                    this.playerEntity.updateHeldItem();
+                    this.playerEntity.isChangingQuantityOnly = false;
                 }
                 else
                 {
-                    this.field_147372_n.func_76038_a(this.field_147369_b.field_71070_bA.field_75152_c, Short.valueOf(p_147351_1_.func_149547_f()));
-                    this.field_147369_b.field_71135_a.func_147359_a(new SPacketConfirmTransaction(p_147351_1_.func_149548_c(), p_147351_1_.func_149547_f(), false));
-                    this.field_147369_b.field_71070_bA.func_75128_a(this.field_147369_b, false);
-                    NonNullList<ItemStack> nonnulllist1 = NonNullList.<ItemStack>func_191196_a();
+                    this.pendingTransactions.addKey(this.playerEntity.openContainer.windowId, Short.valueOf(packetIn.getActionNumber()));
+                    this.playerEntity.connection.sendPacket(new SPacketConfirmTransaction(packetIn.getWindowId(), packetIn.getActionNumber(), false));
+                    this.playerEntity.openContainer.setCanCraft(this.playerEntity, false);
+                    NonNullList<ItemStack> nonnulllist1 = NonNullList.<ItemStack>create();
 
-                    for (int j = 0; j < this.field_147369_b.field_71070_bA.field_75151_b.size(); ++j)
+                    for (int j = 0; j < this.playerEntity.openContainer.inventorySlots.size(); ++j)
                     {
-                        ItemStack itemstack = ((Slot)this.field_147369_b.field_71070_bA.field_75151_b.get(j)).func_75211_c();
-                        ItemStack itemstack1 = itemstack.func_190926_b() ? ItemStack.field_190927_a : itemstack;
-                        nonnulllist1.add(itemstack1);
+                        ItemStack itemstack3 = ((Slot)this.playerEntity.openContainer.inventorySlots.get(j)).getStack();
+                        ItemStack itemstack4 = itemstack.isEmpty() ? ItemStack.EMPTY : itemstack3;
+                        nonnulllist1.add(itemstack4);
                     }
 
-                    this.field_147369_b.func_71110_a(this.field_147369_b.field_71070_bA, nonnulllist1);
+                    this.playerEntity.updateCraftingInventory(this.playerEntity.openContainer, nonnulllist1);
                 }
             }
         }
     }
 
-    public void func_147338_a(CPacketEnchantItem p_147338_1_)
+    public void processEnchantItem(CPacketEnchantItem packetIn)
     {
-        PacketThreadUtil.func_180031_a(p_147338_1_, this, this.field_147369_b.func_71121_q());
-        this.field_147369_b.func_143004_u();
+        PacketThreadUtil.checkThreadAndEnqueue(packetIn, this, this.playerEntity.getServerWorld());
+        this.playerEntity.markPlayerActive();
 
-        if (this.field_147369_b.field_71070_bA.field_75152_c == p_147338_1_.func_149539_c() && this.field_147369_b.field_71070_bA.func_75129_b(this.field_147369_b) && !this.field_147369_b.func_175149_v())
+        if (this.playerEntity.openContainer.windowId == packetIn.getWindowId() && this.playerEntity.openContainer.getCanCraft(this.playerEntity) && !this.playerEntity.isSpectator())
         {
-            this.field_147369_b.field_71070_bA.func_75140_a(this.field_147369_b, p_147338_1_.func_149537_d());
-            this.field_147369_b.field_71070_bA.func_75142_b();
+            this.playerEntity.openContainer.enchantItem(this.playerEntity, packetIn.getButton());
+            this.playerEntity.openContainer.detectAndSendChanges();
         }
     }
 
-    public void func_147344_a(CPacketCreativeInventoryAction p_147344_1_)
+    public void processCreativeInventoryAction(CPacketCreativeInventoryAction packetIn)
     {
-        PacketThreadUtil.func_180031_a(p_147344_1_, this, this.field_147369_b.func_71121_q());
+        PacketThreadUtil.checkThreadAndEnqueue(packetIn, this, this.playerEntity.getServerWorld());
 
-        if (this.field_147369_b.field_71134_c.func_73083_d())
+        if (this.playerEntity.interactionManager.isCreative())
         {
-            boolean flag = p_147344_1_.func_149627_c() < 0;
-            ItemStack itemstack = p_147344_1_.func_149625_d();
+            boolean flag = packetIn.getSlotId() < 0;
+            ItemStack itemstack = packetIn.getStack();
 
-            if (!itemstack.func_190926_b() && itemstack.func_77942_o() && itemstack.func_77978_p().func_150297_b("BlockEntityTag", 10))
+            if (!itemstack.isEmpty() && itemstack.hasTagCompound() && itemstack.getTagCompound().hasKey("BlockEntityTag", 10))
             {
-                NBTTagCompound nbttagcompound = itemstack.func_77978_p().func_74775_l("BlockEntityTag");
+                NBTTagCompound nbttagcompound = itemstack.getTagCompound().getCompoundTag("BlockEntityTag");
 
-                if (nbttagcompound.func_74764_b("x") && nbttagcompound.func_74764_b("y") && nbttagcompound.func_74764_b("z"))
+                if (nbttagcompound.hasKey("x") && nbttagcompound.hasKey("y") && nbttagcompound.hasKey("z"))
                 {
-                    BlockPos blockpos = new BlockPos(nbttagcompound.func_74762_e("x"), nbttagcompound.func_74762_e("y"), nbttagcompound.func_74762_e("z"));
-                    TileEntity tileentity = this.field_147369_b.field_70170_p.func_175625_s(blockpos);
+                    BlockPos blockpos = new BlockPos(nbttagcompound.getInteger("x"), nbttagcompound.getInteger("y"), nbttagcompound.getInteger("z"));
+                    TileEntity tileentity = this.playerEntity.world.getTileEntity(blockpos);
 
                     if (tileentity != null)
                     {
-                        NBTTagCompound nbttagcompound1 = tileentity.func_189515_b(new NBTTagCompound());
-                        nbttagcompound1.func_82580_o("x");
-                        nbttagcompound1.func_82580_o("y");
-                        nbttagcompound1.func_82580_o("z");
-                        itemstack.func_77983_a("BlockEntityTag", nbttagcompound1);
+                        NBTTagCompound nbttagcompound1 = tileentity.writeToNBT(new NBTTagCompound());
+                        nbttagcompound1.removeTag("x");
+                        nbttagcompound1.removeTag("y");
+                        nbttagcompound1.removeTag("z");
+                        itemstack.setTagInfo("BlockEntityTag", nbttagcompound1);
                     }
                 }
             }
 
-            boolean flag1 = p_147344_1_.func_149627_c() >= 1 && p_147344_1_.func_149627_c() <= 45;
-            boolean flag2 = itemstack.func_190926_b() || itemstack.func_77960_j() >= 0 && itemstack.func_190916_E() <= 64 && !itemstack.func_190926_b();
+            boolean flag1 = packetIn.getSlotId() >= 1 && packetIn.getSlotId() <= 45;
+            // CraftBukkit - Add invalidItems check
+            boolean flag2 = itemstack.isEmpty() || itemstack.getMetadata() >= 0 && itemstack.getCount() <= 64 && !itemstack.isEmpty() && !invalidItems.contains(Item.getIdFromItem(itemstack.getItem()));
+            if (flag || (flag1 && !ItemStack.areItemStacksEqual(this.playerEntity.inventoryContainer.getSlot(packetIn.getSlotId()).getStack(), packetIn.getStack()))) { // Insist on valid slot
+                // CraftBukkit start - Call click event
+                HumanEntity player = this.playerEntity.getBukkitEntity();
+                InventoryView inventory = new CraftInventoryView(player, player.getInventory(), this.playerEntity.inventoryContainer);
+                org.bukkit.inventory.ItemStack item = CraftItemStack.asBukkitCopy(packetIn.getStack());
 
+                InventoryType.SlotType type = InventoryType.SlotType.QUICKBAR;
+                if (flag) {
+                    type = InventoryType.SlotType.OUTSIDE;
+                } else if (packetIn.getSlotId() < 36) {
+                    if (packetIn.getSlotId() >= 5 && packetIn.getSlotId() < 9) {
+                        type = InventoryType.SlotType.ARMOR;
+                    } else {
+                        type = InventoryType.SlotType.CONTAINER;
+                    }
+                }
+                InventoryCreativeEvent event = new InventoryCreativeEvent(inventory, type, flag ? -999 : packetIn.getSlotId(), item);
+                server.getPluginManager().callEvent(event);
+
+                itemstack = CraftItemStack.asNMSCopy(event.getCursor());
+
+                switch (event.getResult()) {
+                    case ALLOW:
+                        // Plugin cleared the id / stacksize checks
+                        flag2 = true;
+                        break;
+                    case DEFAULT:
+                        break;
+                    case DENY:
+                        // Reset the slot
+                        if (packetIn.getSlotId() >= 0) {
+                            this.playerEntity.connection.sendPacket(new SPacketSetSlot(this.playerEntity.inventoryContainer.windowId, packetIn.getSlotId(), this.playerEntity.inventoryContainer.getSlot(packetIn.getSlotId()).getStack()));
+                            this.playerEntity.connection.sendPacket(new SPacketSetSlot(-1, -1, ItemStack.EMPTY));
+                        }
+                        return;
+                }
+            }
+            // CraftBukkit end
             if (flag1 && flag2)
             {
-                if (itemstack.func_190926_b())
+                if (itemstack.isEmpty())
                 {
-                    this.field_147369_b.field_71069_bz.func_75141_a(p_147344_1_.func_149627_c(), ItemStack.field_190927_a);
+                    this.playerEntity.inventoryContainer.putStackInSlot(packetIn.getSlotId(), ItemStack.EMPTY);
                 }
                 else
                 {
-                    this.field_147369_b.field_71069_bz.func_75141_a(p_147344_1_.func_149627_c(), itemstack);
+                    this.playerEntity.inventoryContainer.putStackInSlot(packetIn.getSlotId(), itemstack);
                 }
 
-                this.field_147369_b.field_71069_bz.func_75128_a(this.field_147369_b, true);
+                this.playerEntity.inventoryContainer.setCanCraft(this.playerEntity, true);
             }
-            else if (flag && flag2 && this.field_147375_m < 200)
+            else if (flag && flag2 && this.itemDropThreshold < 200)
             {
-                this.field_147375_m += 20;
-                EntityItem entityitem = this.field_147369_b.func_71019_a(itemstack, true);
+                this.itemDropThreshold += 20;
+                EntityItem entityitem = this.playerEntity.dropItem(itemstack, true);
 
                 if (entityitem != null)
                 {
-                    entityitem.func_70288_d();
+                    entityitem.setAgeToCreativeDespawnTime();
                 }
             }
         }
     }
 
-    public void func_147339_a(CPacketConfirmTransaction p_147339_1_)
+    public void processConfirmTransaction(CPacketConfirmTransaction packetIn)
     {
-        PacketThreadUtil.func_180031_a(p_147339_1_, this, this.field_147369_b.func_71121_q());
-        Short oshort = (Short)this.field_147372_n.func_76041_a(this.field_147369_b.field_71070_bA.field_75152_c);
+        PacketThreadUtil.checkThreadAndEnqueue(packetIn, this, this.playerEntity.getServerWorld());
+        Short oshort = (Short)this.pendingTransactions.lookup(this.playerEntity.openContainer.windowId);
 
-        if (oshort != null && p_147339_1_.func_149533_d() == oshort.shortValue() && this.field_147369_b.field_71070_bA.field_75152_c == p_147339_1_.func_149532_c() && !this.field_147369_b.field_71070_bA.func_75129_b(this.field_147369_b) && !this.field_147369_b.func_175149_v())
+        if (oshort != null && packetIn.getUid() == oshort.shortValue() && this.playerEntity.openContainer.windowId == packetIn.getWindowId() && !this.playerEntity.openContainer.getCanCraft(this.playerEntity) && !this.playerEntity.isSpectator())
         {
-            this.field_147369_b.field_71070_bA.func_75128_a(this.field_147369_b, true);
+            this.playerEntity.openContainer.setCanCraft(this.playerEntity, true);
         }
     }
 
-    public void func_147343_a(CPacketUpdateSign p_147343_1_)
+    public void processUpdateSign(CPacketUpdateSign packetIn)
     {
-        PacketThreadUtil.func_180031_a(p_147343_1_, this, this.field_147369_b.func_71121_q());
-        this.field_147369_b.func_143004_u();
-        WorldServer worldserver = this.field_147367_d.func_71218_a(this.field_147369_b.field_71093_bK);
-        BlockPos blockpos = p_147343_1_.func_179722_a();
+        PacketThreadUtil.checkThreadAndEnqueue(packetIn, this, this.playerEntity.getServerWorld());
+        this.playerEntity.markPlayerActive();
+        WorldServer worldserver = this.serverController.worldServerForDimension(this.playerEntity.dimension);
+        BlockPos blockpos = packetIn.getPosition();
 
-        if (worldserver.func_175667_e(blockpos))
+        if (worldserver.isBlockLoaded(blockpos))
         {
-            IBlockState iblockstate = worldserver.func_180495_p(blockpos);
-            TileEntity tileentity = worldserver.func_175625_s(blockpos);
+            IBlockState iblockstate = worldserver.getBlockState(blockpos);
+            TileEntity tileentity = worldserver.getTileEntity(blockpos);
 
             if (!(tileentity instanceof TileEntitySign))
             {
@@ -1225,462 +2048,476 @@
 
             TileEntitySign tileentitysign = (TileEntitySign)tileentity;
 
-            if (!tileentitysign.func_145914_a() || tileentitysign.func_145911_b() != this.field_147369_b)
+            if (!tileentitysign.getIsEditable() || tileentitysign.getPlayer() != this.playerEntity)
             {
-                this.field_147367_d.func_71236_h("Player " + this.field_147369_b.func_70005_c_() + " just tried to change non-editable sign");
+                this.serverController.logWarning("Player " + this.playerEntity.getName() + " just tried to change non-editable sign");
                 return;
             }
 
-            String[] astring = p_147343_1_.func_187017_b();
+            String[] astring = packetIn.getLines();
 
-            for (int i = 0; i < astring.length; ++i)
-            {
-                tileentitysign.field_145915_a[i] = new TextComponentString(TextFormatting.func_110646_a(astring[i]));
+            // CraftBukkit start
+            Player player = this.server.getPlayer(this.playerEntity);
+            int x = packetIn.getPosition().getX();
+            int y = packetIn.getPosition().getY();
+            int z = packetIn.getPosition().getZ();
+            String[] lines = new String[4];
+
+            for (int i = 0; i < astring.length; ++i) {
+                lines[i] = TextFormatting.getTextWithoutFormattingCodes(new TextComponentString(TextFormatting.getTextWithoutFormattingCodes(astring[i])).getUnformattedText());
             }
+            SignChangeEvent event = new SignChangeEvent((CraftBlock) player.getWorld().getBlockAt(x, y, z), this.server.getPlayer(this.playerEntity), lines);
+            this.server.getPluginManager().callEvent(event);
 
-            tileentitysign.func_70296_d();
-            worldserver.func_184138_a(blockpos, iblockstate, iblockstate, 3);
+            if (!event.isCancelled()) {
+                System.arraycopy(CraftSign.sanitizeLines(event.getLines()), 0, tileentitysign.signText, 0, 4);
+                tileentitysign.isEditable = false;
+            }
+            // CraftBukkit end
+
+            tileentitysign.markDirty();
+            worldserver.notifyBlockUpdate(blockpos, iblockstate, iblockstate, 3);
         }
     }
 
-    public void func_147353_a(CPacketKeepAlive p_147353_1_)
+    public void processKeepAlive(CPacketKeepAlive packetIn)
     {
-        if (p_147353_1_.func_149460_c() == this.field_147378_h)
+        if (packetIn.getKey() == this.keepAliveId)
         {
-            int i = (int)(this.func_147363_d() - this.field_147379_i);
-            this.field_147369_b.field_71138_i = (this.field_147369_b.field_71138_i * 3 + i) / 4;
+            int i = (int)(this.currentTimeMillis() - this.lastPingTime);
+            this.playerEntity.ping = (this.playerEntity.ping * 3 + i) / 4;
         }
     }
 
-    private long func_147363_d()
+    private long currentTimeMillis()
     {
         return System.nanoTime() / 1000000L;
     }
 
-    public void func_147348_a(CPacketPlayerAbilities p_147348_1_)
+    public void processPlayerAbilities(CPacketPlayerAbilities packetIn)
     {
-        PacketThreadUtil.func_180031_a(p_147348_1_, this, this.field_147369_b.func_71121_q());
-        this.field_147369_b.field_71075_bZ.field_75100_b = p_147348_1_.func_149488_d() && this.field_147369_b.field_71075_bZ.field_75101_c;
+        PacketThreadUtil.checkThreadAndEnqueue(packetIn, this, this.playerEntity.getServerWorld());
+        // CraftBukkit start
+        if (this.playerEntity.capabilities.allowFlying && this.playerEntity.capabilities.isFlying != packetIn.isFlying()) {
+            PlayerToggleFlightEvent event = new PlayerToggleFlightEvent(this.server.getPlayer(this.playerEntity), packetIn.isFlying());
+            this.server.getPluginManager().callEvent(event);
+            if (!event.isCancelled()) {
+                this.playerEntity.capabilities.isFlying = packetIn.isFlying(); // Actually set the player's flying status
+            } else {
+                this.playerEntity.sendPlayerAbilities(); // Tell the player their ability was reverted
+            }
+        }
+        // CraftBukkit end
     }
 
-    public void func_147341_a(CPacketTabComplete p_147341_1_)
+    public void processTabComplete(CPacketTabComplete packetIn)
     {
-        PacketThreadUtil.func_180031_a(p_147341_1_, this, this.field_147369_b.func_71121_q());
+        PacketThreadUtil.checkThreadAndEnqueue(packetIn, this, this.playerEntity.getServerWorld());
+        // CraftBukkit start
+        if (chatSpamField.addAndGet(this, 10) > 500 && !this.serverController.getPlayerList().canSendCommands(this.playerEntity.getGameProfile())) {
+            this.disconnect("disconnect.spam");
+            return;
+        }
+        // CraftBukkit end
         List<String> list = Lists.<String>newArrayList();
 
-        for (String s : this.field_147367_d.func_184104_a(this.field_147369_b, p_147341_1_.func_149419_c(), p_147341_1_.func_179709_b(), p_147341_1_.func_186989_c()))
+        for (String s : this.serverController.getTabCompletions(this.playerEntity, packetIn.getMessage(), packetIn.getTargetBlock(), packetIn.hasTargetBlock()))
         {
             list.add(s);
         }
 
-        this.field_147369_b.field_71135_a.func_147359_a(new SPacketTabComplete((String[])list.toArray(new String[list.size()])));
+        this.playerEntity.connection.sendPacket(new SPacketTabComplete((String[])list.toArray(new String[list.size()])));
     }
 
-    public void func_147352_a(CPacketClientSettings p_147352_1_)
+    public void processClientSettings(CPacketClientSettings packetIn)
     {
-        PacketThreadUtil.func_180031_a(p_147352_1_, this, this.field_147369_b.func_71121_q());
-        this.field_147369_b.func_147100_a(p_147352_1_);
+        PacketThreadUtil.checkThreadAndEnqueue(packetIn, this, this.playerEntity.getServerWorld());
+        this.playerEntity.handleClientSettings(packetIn);
     }
+    public void processCustomPayload(CPacketCustomPayload packetplayincustompayload) {
+        net.minecraft.network.PacketThreadUtil.checkThreadAndEnqueue(packetplayincustompayload, this, this.playerEntity.getServerWorld());
+        String s = packetplayincustompayload.getChannelName();
+        net.minecraft.network.PacketBuffer packetdataserializer;
+        ItemStack itemstack;
+        ItemStack itemstack1;
 
-    public void func_147349_a(CPacketCustomPayload p_147349_1_)
-    {
-        PacketThreadUtil.func_180031_a(p_147349_1_, this, this.field_147369_b.func_71121_q());
-        String s = p_147349_1_.func_149559_c();
+        if ("MC|BEdit".equals(s)) {
+            // CraftBukkit start
+            if (this.lastBookTick + 20 > MinecraftServer.currentTick) {
+                this.disconnect("Book edited too quickly!");
+                return;
+            }
+            this.lastBookTick = MinecraftServer.currentTick;
+            // CraftBukkit end
+            packetdataserializer = packetplayincustompayload.getBufferData();
 
-        if ("MC|BEdit".equals(s))
-        {
-            PacketBuffer packetbuffer = p_147349_1_.func_180760_b();
-
-            try
-            {
-                ItemStack itemstack = packetbuffer.func_150791_c();
-
-                if (itemstack.func_190926_b())
-                {
+            try {
+                itemstack = packetdataserializer.readItemStack();
+                if (itemstack.isEmpty()) {
                     return;
                 }
 
-                if (!ItemWritableBook.func_150930_a(itemstack.func_77978_p()))
-                {
+                if (!ItemWritableBook.isNBTValid(itemstack.getTagCompound())) {
                     throw new IOException("Invalid book tag!");
                 }
 
-                ItemStack itemstack1 = this.field_147369_b.func_184614_ca();
-
-                if (itemstack1.func_190926_b())
-                {
+                itemstack1 = this.playerEntity.getHeldItemMainhand();
+                if (itemstack1.isEmpty()) {
                     return;
                 }
 
-                if (itemstack.func_77973_b() == Items.field_151099_bA && itemstack.func_77973_b() == itemstack1.func_77973_b())
-                {
-                    itemstack1.func_77983_a("pages", itemstack.func_77978_p().func_150295_c("pages", 8));
+                if (itemstack.getItem() == Items.WRITABLE_BOOK && itemstack.getItem() == itemstack1.getItem()) {
+                    itemstack1 = new ItemStack(Items.WRITABLE_BOOK); // CraftBukkit
+                    itemstack1.setTagInfo("pages", (NBTBase) itemstack.getTagCompound().getTagList("pages", 8));
+                    CraftEventFactory.handleEditBookEvent(playerEntity, itemstack1); // CraftBukkit
                 }
+            } catch (Exception exception) {
+                net.minecraft.network.NetHandlerPlayServer.LOGGER.error("Couldn\'t handle book info", exception);
+                this.disconnect("Invalid book data!"); // CraftBukkit
             }
-            catch (Exception exception6)
-            {
-                field_147370_c.error((String)"Couldn\'t handle book info", (Throwable)exception6);
-            }
-        }
-        else if ("MC|BSign".equals(s))
-        {
-            PacketBuffer packetbuffer1 = p_147349_1_.func_180760_b();
+        } else {
+            String s1;
 
-            try
-            {
-                ItemStack itemstack3 = packetbuffer1.func_150791_c();
-
-                if (itemstack3.func_190926_b())
-                {
+            if ("MC|BSign".equals(s)) {
+                // CraftBukkit start
+                if (this.lastBookTick + 20 > MinecraftServer.currentTick) {
+                    this.disconnect("Book edited too quickly!");
                     return;
                 }
+                this.lastBookTick = MinecraftServer.currentTick;
+                // CraftBukkit end
+                packetdataserializer = packetplayincustompayload.getBufferData();
 
-                if (!ItemWrittenBook.func_77828_a(itemstack3.func_77978_p()))
-                {
-                    throw new IOException("Invalid book tag!");
-                }
+                try {
+                    itemstack = packetdataserializer.readItemStack();
+                    if (itemstack.isEmpty()) {
+                        return;
+                    }
 
-                ItemStack itemstack4 = this.field_147369_b.func_184614_ca();
+                    if (!ItemWrittenBook.validBookTagContents(itemstack.getTagCompound())) {
+                        throw new IOException("Invalid book tag!");
+                    }
 
-                if (itemstack4.func_190926_b())
-                {
-                    return;
-                }
+                    itemstack1 = this.playerEntity.getHeldItemMainhand();
+                    if (itemstack1.isEmpty()) {
+                        return;
+                    }
 
-                if (itemstack3.func_77973_b() == Items.field_151099_bA && itemstack4.func_77973_b() == Items.field_151099_bA)
-                {
-                    ItemStack itemstack2 = new ItemStack(Items.field_151164_bB);
-                    itemstack2.func_77983_a("author", new NBTTagString(this.field_147369_b.func_70005_c_()));
-                    itemstack2.func_77983_a("title", new NBTTagString(itemstack3.func_77978_p().func_74779_i("title")));
-                    NBTTagList nbttaglist = itemstack3.func_77978_p().func_150295_c("pages", 8);
+                    if (itemstack.getItem() == Items.WRITABLE_BOOK && itemstack1.getItem() == Items.WRITABLE_BOOK) {
+                        ItemStack itemstack2 = new ItemStack(Items.WRITTEN_BOOK);
 
-                    for (int i = 0; i < nbttaglist.func_74745_c(); ++i)
-                    {
-                        String s1 = nbttaglist.func_150307_f(i);
-                        ITextComponent itextcomponent = new TextComponentString(s1);
-                        s1 = ITextComponent.Serializer.func_150696_a(itextcomponent);
-                        nbttaglist.func_150304_a(i, new NBTTagString(s1));
-                    }
+                        itemstack2.setTagInfo("author", (NBTBase) (new NBTTagString(this.playerEntity.getName())));
+                        itemstack2.setTagInfo("title", (NBTBase) (new NBTTagString(itemstack.getTagCompound().getString("title"))));
+                        NBTTagList nbttaglist = itemstack.getTagCompound().getTagList("pages", 8);
 
-                    itemstack2.func_77983_a("pages", nbttaglist);
-                    this.field_147369_b.func_184201_a(EntityEquipmentSlot.MAINHAND, itemstack2);
+                        for (int i = 0; i < nbttaglist.tagCount(); ++i) {
+                            s1 = nbttaglist.getStringTagAt(i);
+                            TextComponentString chatcomponenttext = new TextComponentString(s1);
+
+                            s1 = ITextComponent.Serializer.componentToJson((ITextComponent) chatcomponenttext);
+                            nbttaglist.set(i, new NBTTagString(s1));
+                        }
+
+                        itemstack2.setTagInfo("pages", (NBTBase) nbttaglist);
+                        CraftEventFactory.handleEditBookEvent(playerEntity, itemstack2); // CraftBukkit
+                    }
+                } catch (Exception exception1) {
+                    net.minecraft.network.NetHandlerPlayServer.LOGGER.error("Couldn\'t sign book", exception1);
+                    this.disconnect("Invalid book data!"); // CraftBukkit
                 }
-            }
-            catch (Exception exception7)
-            {
-                field_147370_c.error((String)"Couldn\'t sign book", (Throwable)exception7);
-            }
-        }
-        else if ("MC|TrSel".equals(s))
-        {
-            try
-            {
-                int k = p_147349_1_.func_180760_b().readInt();
-                Container container = this.field_147369_b.field_71070_bA;
+            } else if ("MC|TrSel".equals(s)) {
+                try {
+                    int j = packetplayincustompayload.getBufferData().readInt();
+                    Container container = this.playerEntity.openContainer;
 
-                if (container instanceof ContainerMerchant)
-                {
-                    ((ContainerMerchant)container).func_75175_c(k);
+                    if (container instanceof ContainerMerchant) {
+                        ((ContainerMerchant) container).setCurrentRecipeIndex(j);
+                    }
+                } catch (Exception exception2) {
+                    net.minecraft.network.NetHandlerPlayServer.LOGGER.error("Couldn\'t select trade", exception2);
+                    this.disconnect("Invalid trade data!"); // CraftBukkit
                 }
-            }
-            catch (Exception exception5)
-            {
-                field_147370_c.error((String)"Couldn\'t select trade", (Throwable)exception5);
-            }
-        }
-        else if ("MC|AdvCmd".equals(s))
-        {
-            if (!this.field_147367_d.func_82356_Z())
-            {
-                this.field_147369_b.func_145747_a(new TextComponentTranslation("advMode.notEnabled", new Object[0]));
-                return;
-            }
+            } else {
+                TileEntity tileentity;
 
-            if (!this.field_147369_b.func_189808_dh())
-            {
-                this.field_147369_b.func_145747_a(new TextComponentTranslation("advMode.notAllowed", new Object[0]));
-                return;
-            }
+                if ("MC|AdvCmd".equals(s)) {
+                    if (!this.serverController.isCommandBlockEnabled()) {
+                        this.playerEntity.sendMessage(new TextComponentTranslation("advMode.notEnabled", new Object[0]));
+                        return;
+                    }
 
-            PacketBuffer packetbuffer2 = p_147349_1_.func_180760_b();
+                    if (!this.playerEntity.canUseCommandBlock()) {
+                        this.playerEntity.sendMessage(new TextComponentTranslation("advMode.notAllowed", new Object[0]));
+                        return;
+                    }
 
-            try
-            {
-                int l = packetbuffer2.readByte();
-                CommandBlockBaseLogic commandblockbaselogic1 = null;
+                    packetdataserializer = packetplayincustompayload.getBufferData();
 
-                if (l == 0)
-                {
-                    TileEntity tileentity = this.field_147369_b.field_70170_p.func_175625_s(new BlockPos(packetbuffer2.readInt(), packetbuffer2.readInt(), packetbuffer2.readInt()));
+                    try {
+                        byte b0 = packetdataserializer.readByte();
+                        CommandBlockBaseLogic commandblocklistenerabstract = null;
 
-                    if (tileentity instanceof TileEntityCommandBlock)
-                    {
-                        commandblockbaselogic1 = ((TileEntityCommandBlock)tileentity).func_145993_a();
-                    }
-                }
-                else if (l == 1)
-                {
-                    Entity entity = this.field_147369_b.field_70170_p.func_73045_a(packetbuffer2.readInt());
+                        if (b0 == 0) {
+                            tileentity = this.playerEntity.world.getTileEntity(new BlockPos(packetdataserializer.readInt(), packetdataserializer.readInt(), packetdataserializer.readInt()));
+                            if (tileentity instanceof TileEntityCommandBlock) {
+                                commandblocklistenerabstract = ((TileEntityCommandBlock) tileentity).getCommandBlockLogic();
+                            }
+                        } else if (b0 == 1) {
+                            Entity entity = this.playerEntity.world.getEntityByID(packetdataserializer.readInt());
 
-                    if (entity instanceof EntityMinecartCommandBlock)
-                    {
-                        commandblockbaselogic1 = ((EntityMinecartCommandBlock)entity).func_145822_e();
-                    }
-                }
+                            if (entity instanceof EntityMinecartCommandBlock) {
+                                commandblocklistenerabstract = ((EntityMinecartCommandBlock) entity).getCommandBlockLogic();
+                            }
+                        }
 
-                String s6 = packetbuffer2.func_150789_c(packetbuffer2.readableBytes());
-                boolean flag2 = packetbuffer2.readBoolean();
+                        String s2 = packetdataserializer.readString(packetdataserializer.readableBytes());
+                        boolean flag = packetdataserializer.readBoolean();
 
-                if (commandblockbaselogic1 != null)
-                {
-                    commandblockbaselogic1.func_145752_a(s6);
-                    commandblockbaselogic1.func_175573_a(flag2);
+                        if (commandblocklistenerabstract != null) {
+                            commandblocklistenerabstract.setCommand(s2);
+                            commandblocklistenerabstract.setTrackOutput(flag);
+                            if (!flag) {
+                                commandblocklistenerabstract.setLastOutput((ITextComponent) null);
+                            }
 
-                    if (!flag2)
-                    {
-                        commandblockbaselogic1.func_145750_b((ITextComponent)null);
+                            commandblocklistenerabstract.updateCommand();
+                            this.playerEntity.sendMessage(new TextComponentTranslation("advMode.setCommand.success", new Object[] { s2}));
+                        }
+                    } catch (Exception exception3) {
+                        net.minecraft.network.NetHandlerPlayServer.LOGGER.error("Couldn\'t set command block", exception3);
+                        this.disconnect("Invalid command data!"); // CraftBukkit
                     }
+                } else if ("MC|AutoCmd".equals(s)) {
+                    if (!this.serverController.isCommandBlockEnabled()) {
+                        this.playerEntity.sendMessage(new TextComponentTranslation("advMode.notEnabled", new Object[0]));
+                        return;
+                    }
 
-                    commandblockbaselogic1.func_145756_e();
-                    this.field_147369_b.func_145747_a(new TextComponentTranslation("advMode.setCommand.success", new Object[] {s6}));
-                }
-            }
-            catch (Exception exception4)
-            {
-                field_147370_c.error((String)"Couldn\'t set command block", (Throwable)exception4);
-            }
-        }
-        else if ("MC|AutoCmd".equals(s))
-        {
-            if (!this.field_147367_d.func_82356_Z())
-            {
-                this.field_147369_b.func_145747_a(new TextComponentTranslation("advMode.notEnabled", new Object[0]));
-                return;
-            }
+                    if (!this.playerEntity.canUseCommandBlock()) {
+                        this.playerEntity.sendMessage(new TextComponentTranslation("advMode.notAllowed", new Object[0]));
+                        return;
+                    }
 
-            if (!this.field_147369_b.func_189808_dh())
-            {
-                this.field_147369_b.func_145747_a(new TextComponentTranslation("advMode.notAllowed", new Object[0]));
-                return;
-            }
+                    packetdataserializer = packetplayincustompayload.getBufferData();
 
-            PacketBuffer packetbuffer3 = p_147349_1_.func_180760_b();
+                    try {
+                        CommandBlockBaseLogic commandblocklistenerabstract1 = null;
+                        TileEntityCommandBlock tileentitycommand = null;
+                        BlockPos blockposition = new BlockPos(packetdataserializer.readInt(), packetdataserializer.readInt(), packetdataserializer.readInt());
+                        TileEntity tileentity1 = this.playerEntity.world.getTileEntity(blockposition);
 
-            try
-            {
-                CommandBlockBaseLogic commandblockbaselogic = null;
-                TileEntityCommandBlock tileentitycommandblock = null;
-                BlockPos blockpos1 = new BlockPos(packetbuffer3.readInt(), packetbuffer3.readInt(), packetbuffer3.readInt());
-                TileEntity tileentity2 = this.field_147369_b.field_70170_p.func_175625_s(blockpos1);
+                        if (tileentity1 instanceof TileEntityCommandBlock) {
+                            tileentitycommand = (TileEntityCommandBlock) tileentity1;
+                            commandblocklistenerabstract1 = tileentitycommand.getCommandBlockLogic();
+                        }
 
-                if (tileentity2 instanceof TileEntityCommandBlock)
-                {
-                    tileentitycommandblock = (TileEntityCommandBlock)tileentity2;
-                    commandblockbaselogic = tileentitycommandblock.func_145993_a();
-                }
+                        String s3 = packetdataserializer.readString(packetdataserializer.readableBytes());
+                        boolean flag1 = packetdataserializer.readBoolean();
+                        TileEntityCommandBlock.Mode tileentitycommand_type = TileEntityCommandBlock.Mode.valueOf(packetdataserializer.readString(16));
+                        boolean flag2 = packetdataserializer.readBoolean();
+                        boolean flag3 = packetdataserializer.readBoolean();
 
-                String s7 = packetbuffer3.func_150789_c(packetbuffer3.readableBytes());
-                boolean flag3 = packetbuffer3.readBoolean();
-                TileEntityCommandBlock.Mode tileentitycommandblock$mode = TileEntityCommandBlock.Mode.valueOf(packetbuffer3.func_150789_c(16));
-                boolean flag = packetbuffer3.readBoolean();
-                boolean flag1 = packetbuffer3.readBoolean();
+                        if (commandblocklistenerabstract1 != null) {
+                            EnumFacing enumdirection = (EnumFacing) this.playerEntity.world.getBlockState(blockposition).getValue(BlockCommandBlock.FACING);
+                            IBlockState iblockdata;
 
-                if (commandblockbaselogic != null)
-                {
-                    EnumFacing enumfacing = (EnumFacing)this.field_147369_b.field_70170_p.func_180495_p(blockpos1).func_177229_b(BlockCommandBlock.field_185564_a);
+                            switch (tileentitycommand_type) {
+                                case SEQUENCE:
+                                    iblockdata = Blocks.CHAIN_COMMAND_BLOCK.getDefaultState();
+                                    this.playerEntity.world.setBlockState(blockposition, iblockdata.withProperty(BlockCommandBlock.FACING, enumdirection).withProperty(BlockCommandBlock.CONDITIONAL, Boolean.valueOf(flag2)), 2);
+                                    break;
 
-                    switch (tileentitycommandblock$mode)
-                    {
-                        case SEQUENCE:
-                            IBlockState iblockstate3 = Blocks.field_185777_dd.func_176223_P();
-                            this.field_147369_b.field_70170_p.func_180501_a(blockpos1, iblockstate3.func_177226_a(BlockCommandBlock.field_185564_a, enumfacing).func_177226_a(BlockCommandBlock.field_185565_b, Boolean.valueOf(flag)), 2);
-                            break;
-                        case AUTO:
-                            IBlockState iblockstate2 = Blocks.field_185776_dc.func_176223_P();
-                            this.field_147369_b.field_70170_p.func_180501_a(blockpos1, iblockstate2.func_177226_a(BlockCommandBlock.field_185564_a, enumfacing).func_177226_a(BlockCommandBlock.field_185565_b, Boolean.valueOf(flag)), 2);
-                            break;
-                        case REDSTONE:
-                            IBlockState iblockstate = Blocks.field_150483_bI.func_176223_P();
-                            this.field_147369_b.field_70170_p.func_180501_a(blockpos1, iblockstate.func_177226_a(BlockCommandBlock.field_185564_a, enumfacing).func_177226_a(BlockCommandBlock.field_185565_b, Boolean.valueOf(flag)), 2);
-                    }
+                                case AUTO:
+                                    iblockdata = Blocks.REPEATING_COMMAND_BLOCK.getDefaultState();
+                                    this.playerEntity.world.setBlockState(blockposition, iblockdata.withProperty(BlockCommandBlock.FACING, enumdirection).withProperty(BlockCommandBlock.CONDITIONAL, Boolean.valueOf(flag2)), 2);
+                                    break;
 
-                    tileentity2.func_145829_t();
-                    this.field_147369_b.field_70170_p.func_175690_a(blockpos1, tileentity2);
-                    commandblockbaselogic.func_145752_a(s7);
-                    commandblockbaselogic.func_175573_a(flag3);
+                                case REDSTONE:
+                                    iblockdata = Blocks.COMMAND_BLOCK.getDefaultState();
+                                    this.playerEntity.world.setBlockState(blockposition, iblockdata.withProperty(BlockCommandBlock.FACING, enumdirection).withProperty(BlockCommandBlock.CONDITIONAL, Boolean.valueOf(flag2)), 2);
+                            }
 
-                    if (!flag3)
-                    {
-                        commandblockbaselogic.func_145750_b((ITextComponent)null);
+                            tileentity1.validate();
+                            this.playerEntity.world.setTileEntity(blockposition, tileentity1);
+                            commandblocklistenerabstract1.setCommand(s3);
+                            commandblocklistenerabstract1.setTrackOutput(flag1);
+                            if (!flag1) {
+                                commandblocklistenerabstract1.setLastOutput((ITextComponent) null);
+                            }
+
+                            tileentitycommand.setAuto(flag3);
+                            commandblocklistenerabstract1.updateCommand();
+                            if (!StringUtils.isEmpty(s3)) {
+                                this.playerEntity.sendMessage(new TextComponentTranslation("advMode.setCommand.success", new Object[] { s3}));
+                            }
+                        }
+                    } catch (Exception exception4) {
+                        net.minecraft.network.NetHandlerPlayServer.LOGGER.error("Couldn\'t set command block", exception4);
+                        this.disconnect("Invalid command data!"); // CraftBukkit
                     }
+                } else {
+                    int k;
 
-                    tileentitycommandblock.func_184253_b(flag1);
-                    commandblockbaselogic.func_145756_e();
+                    if ("MC|Beacon".equals(s)) {
+                        if (this.playerEntity.openContainer instanceof ContainerBeacon) {
+                            try {
+                                packetdataserializer = packetplayincustompayload.getBufferData();
+                                k = packetdataserializer.readInt();
+                                int l = packetdataserializer.readInt();
+                                ContainerBeacon containerbeacon = (ContainerBeacon) this.playerEntity.openContainer;
+                                Slot slot = containerbeacon.getSlot(0);
 
-                    if (!net.minecraft.util.StringUtils.func_151246_b(s7))
-                    {
-                        this.field_147369_b.func_145747_a(new TextComponentTranslation("advMode.setCommand.success", new Object[] {s7}));
-                    }
-                }
-            }
-            catch (Exception exception3)
-            {
-                field_147370_c.error((String)"Couldn\'t set command block", (Throwable)exception3);
-            }
-        }
-        else if ("MC|Beacon".equals(s))
-        {
-            if (this.field_147369_b.field_71070_bA instanceof ContainerBeacon)
-            {
-                try
-                {
-                    PacketBuffer packetbuffer4 = p_147349_1_.func_180760_b();
-                    int i1 = packetbuffer4.readInt();
-                    int k1 = packetbuffer4.readInt();
-                    ContainerBeacon containerbeacon = (ContainerBeacon)this.field_147369_b.field_71070_bA;
-                    Slot slot = containerbeacon.func_75139_a(0);
+                                if (slot.getHasStack()) {
+                                    slot.decrStackSize(1);
+                                    IInventory iinventory = containerbeacon.getTileEntity();
 
-                    if (slot.func_75216_d())
-                    {
-                        slot.func_75209_a(1);
-                        IInventory iinventory = containerbeacon.func_180611_e();
-                        iinventory.func_174885_b(1, i1);
-                        iinventory.func_174885_b(2, k1);
-                        iinventory.func_70296_d();
-                    }
-                }
-                catch (Exception exception2)
-                {
-                    field_147370_c.error((String)"Couldn\'t set beacon", (Throwable)exception2);
-                }
-            }
-        }
-        else if ("MC|ItemName".equals(s))
-        {
-            if (this.field_147369_b.field_71070_bA instanceof ContainerRepair)
-            {
-                ContainerRepair containerrepair = (ContainerRepair)this.field_147369_b.field_71070_bA;
+                                    iinventory.setField(1, k);
+                                    iinventory.setField(2, l);
+                                    iinventory.markDirty();
+                                }
+                            } catch (Exception exception5) {
+                                net.minecraft.network.NetHandlerPlayServer.LOGGER.error("Couldn\'t set beacon", exception5);
+                                this.disconnect("Invalid beacon data!"); // CraftBukkit
+                            }
+                        }
+                    } else if ("MC|ItemName".equals(s)) {
+                        if (this.playerEntity.openContainer instanceof ContainerRepair) {
+                            ContainerRepair containeranvil = (ContainerRepair) this.playerEntity.openContainer;
 
-                if (p_147349_1_.func_180760_b() != null && p_147349_1_.func_180760_b().readableBytes() >= 1)
-                {
-                    String s5 = ChatAllowedCharacters.func_71565_a(p_147349_1_.func_180760_b().func_150789_c(32767));
+                            if (packetplayincustompayload.getBufferData() != null && packetplayincustompayload.getBufferData().readableBytes() >= 1) {
+                                String s4 = ChatAllowedCharacters.filterAllowedCharacters(packetplayincustompayload.getBufferData().readString(32767));
 
-                    if (s5.length() <= 30)
-                    {
-                        containerrepair.func_82850_a(s5);
-                    }
-                }
-                else
-                {
-                    containerrepair.func_82850_a("");
-                }
-            }
-        }
-        else if ("MC|Struct".equals(s))
-        {
-            if (!this.field_147369_b.func_189808_dh())
-            {
-                return;
-            }
+                                if (s4.length() <= 30) {
+                                    containeranvil.updateItemName(s4);
+                                }
+                            } else {
+                                containeranvil.updateItemName("");
+                            }
+                        }
+                    } else if ("MC|Struct".equals(s)) {
+                        if (!this.playerEntity.canUseCommandBlock()) {
+                            return;
+                        }
 
-            PacketBuffer packetbuffer5 = p_147349_1_.func_180760_b();
+                        packetdataserializer = packetplayincustompayload.getBufferData();
 
-            try
-            {
-                BlockPos blockpos = new BlockPos(packetbuffer5.readInt(), packetbuffer5.readInt(), packetbuffer5.readInt());
-                IBlockState iblockstate1 = this.field_147369_b.field_70170_p.func_180495_p(blockpos);
-                TileEntity tileentity1 = this.field_147369_b.field_70170_p.func_175625_s(blockpos);
+                        try {
+                            BlockPos blockposition1 = new BlockPos(packetdataserializer.readInt(), packetdataserializer.readInt(), packetdataserializer.readInt());
+                            IBlockState iblockdata1 = this.playerEntity.world.getBlockState(blockposition1);
 
-                if (tileentity1 instanceof TileEntityStructure)
-                {
-                    TileEntityStructure tileentitystructure = (TileEntityStructure)tileentity1;
-                    int l1 = packetbuffer5.readByte();
-                    String s8 = packetbuffer5.func_150789_c(32);
-                    tileentitystructure.func_184405_a(TileEntityStructure.Mode.valueOf(s8));
-                    tileentitystructure.func_184404_a(packetbuffer5.func_150789_c(64));
-                    int i2 = MathHelper.func_76125_a(packetbuffer5.readInt(), -32, 32);
-                    int j2 = MathHelper.func_76125_a(packetbuffer5.readInt(), -32, 32);
-                    int k2 = MathHelper.func_76125_a(packetbuffer5.readInt(), -32, 32);
-                    tileentitystructure.func_184414_b(new BlockPos(i2, j2, k2));
-                    int l2 = MathHelper.func_76125_a(packetbuffer5.readInt(), 0, 32);
-                    int i3 = MathHelper.func_76125_a(packetbuffer5.readInt(), 0, 32);
-                    int j = MathHelper.func_76125_a(packetbuffer5.readInt(), 0, 32);
-                    tileentitystructure.func_184409_c(new BlockPos(l2, i3, j));
-                    String s2 = packetbuffer5.func_150789_c(32);
-                    tileentitystructure.func_184411_a(Mirror.valueOf(s2));
-                    String s3 = packetbuffer5.func_150789_c(32);
-                    tileentitystructure.func_184408_a(Rotation.valueOf(s3));
-                    tileentitystructure.func_184410_b(packetbuffer5.func_150789_c(128));
-                    tileentitystructure.func_184406_a(packetbuffer5.readBoolean());
-                    tileentitystructure.func_189703_e(packetbuffer5.readBoolean());
-                    tileentitystructure.func_189710_f(packetbuffer5.readBoolean());
-                    tileentitystructure.func_189718_a(MathHelper.func_76131_a(packetbuffer5.readFloat(), 0.0F, 1.0F));
-                    tileentitystructure.func_189725_a(packetbuffer5.func_179260_f());
-                    String s4 = tileentitystructure.func_189715_d();
+                            tileentity = this.playerEntity.world.getTileEntity(blockposition1);
+                            if (tileentity instanceof TileEntityStructure) {
+                                TileEntityStructure tileentitystructure = (TileEntityStructure) tileentity;
+                                byte b1 = packetdataserializer.readByte();
 
-                    if (l1 == 2)
-                    {
-                        if (tileentitystructure.func_184419_m())
-                        {
-                            this.field_147369_b.func_146105_b(new TextComponentTranslation("structure_block.save_success", new Object[] {s4}), false);
+                                s1 = packetdataserializer.readString(32);
+                                tileentitystructure.setMode(TileEntityStructure.Mode.valueOf(s1));
+                                tileentitystructure.setName(packetdataserializer.readString(64));
+                                int i1 = MathHelper.clamp(packetdataserializer.readInt(), -32, 32);
+                                int j1 = MathHelper.clamp(packetdataserializer.readInt(), -32, 32);
+                                int k1 = MathHelper.clamp(packetdataserializer.readInt(), -32, 32);
+
+                                tileentitystructure.setPosition(new BlockPos(i1, j1, k1));
+                                int l1 = MathHelper.clamp(packetdataserializer.readInt(), 0, 32);
+                                int i2 = MathHelper.clamp(packetdataserializer.readInt(), 0, 32);
+                                int j2 = MathHelper.clamp(packetdataserializer.readInt(), 0, 32);
+
+                                tileentitystructure.setSize(new BlockPos(l1, i2, j2));
+                                String s5 = packetdataserializer.readString(32);
+
+                                tileentitystructure.setMirror(Mirror.valueOf(s5));
+                                String s6 = packetdataserializer.readString(32);
+
+                                tileentitystructure.setRotation(Rotation.valueOf(s6));
+                                tileentitystructure.setMetadata(packetdataserializer.readString(128));
+                                tileentitystructure.setIgnoresEntities(packetdataserializer.readBoolean());
+                                tileentitystructure.setShowAir(packetdataserializer.readBoolean());
+                                tileentitystructure.setShowBoundingBox(packetdataserializer.readBoolean());
+                                tileentitystructure.setIntegrity(MathHelper.clamp(packetdataserializer.readFloat(), 0.0F, 1.0F));
+                                tileentitystructure.setSeed(packetdataserializer.readVarLong());
+                                String s7 = tileentitystructure.getName();
+
+                                if (b1 == 2) {
+                                    if (tileentitystructure.save()) {
+                                        this.playerEntity.sendStatusMessage((ITextComponent) (new TextComponentTranslation("structure_block.save_success", new Object[] { s7})), false);
+                                    } else {
+                                        this.playerEntity.sendStatusMessage((ITextComponent) (new TextComponentTranslation("structure_block.save_failure", new Object[] { s7})), false);
+                                    }
+                                } else if (b1 == 3) {
+                                    if (!tileentitystructure.isStructureLoadable()) {
+                                        this.playerEntity.sendStatusMessage((ITextComponent) (new TextComponentTranslation("structure_block.load_not_found", new Object[] { s7})), false);
+                                    } else if (tileentitystructure.load()) {
+                                        this.playerEntity.sendStatusMessage((ITextComponent) (new TextComponentTranslation("structure_block.load_success", new Object[] { s7})), false);
+                                    } else {
+                                        this.playerEntity.sendStatusMessage((ITextComponent) (new TextComponentTranslation("structure_block.load_prepare", new Object[] { s7})), false);
+                                    }
+                                } else if (b1 == 4) {
+                                    if (tileentitystructure.detectSize()) {
+                                        this.playerEntity.sendStatusMessage((ITextComponent) (new TextComponentTranslation("structure_block.size_success", new Object[] { s7})), false);
+                                    } else {
+                                        this.playerEntity.sendStatusMessage((ITextComponent) (new TextComponentTranslation("structure_block.size_failure", new Object[0])), false);
+                                    }
+                                }
+
+                                tileentitystructure.markDirty();
+                                this.playerEntity.world.notifyBlockUpdate(blockposition1, iblockdata1, iblockdata1, 3);
+                            }
+                        } catch (Exception exception6) {
+                            net.minecraft.network.NetHandlerPlayServer.LOGGER.error("Couldn\'t set structure block", exception6);
+                            this.disconnect("Invalid structure data!"); // CraftBukkit
                         }
-                        else
-                        {
-                            this.field_147369_b.func_146105_b(new TextComponentTranslation("structure_block.save_failure", new Object[] {s4}), false);
+                    } else if ("MC|PickItem".equals(s)) {
+                        packetdataserializer = packetplayincustompayload.getBufferData();
+
+                        try {
+                            k = packetdataserializer.readVarInt();
+                            this.playerEntity.inventory.pickItem(k);
+                            this.playerEntity.connection.sendPacket(new SPacketSetSlot(-2, this.playerEntity.inventory.currentItem, this.playerEntity.inventory.getStackInSlot(this.playerEntity.inventory.currentItem)));
+                            this.playerEntity.connection.sendPacket(new SPacketSetSlot(-2, k, this.playerEntity.inventory.getStackInSlot(k)));
+                            this.playerEntity.connection.sendPacket(new SPacketHeldItemChange(this.playerEntity.inventory.currentItem));
+                        } catch (Exception exception7) {
+                            net.minecraft.network.NetHandlerPlayServer.LOGGER.error("Couldn\'t pick item", exception7);
+                            this.disconnect("Invalid pick item!"); // CraftBukkit
                         }
                     }
-                    else if (l1 == 3)
-                    {
-                        if (!tileentitystructure.func_189709_F())
-                        {
-                            this.field_147369_b.func_146105_b(new TextComponentTranslation("structure_block.load_not_found", new Object[] {s4}), false);
+                    // CraftBukkit start
+                    else if (packetplayincustompayload.getChannelName().equals("REGISTER")) {
+                        try {
+                            String channels = packetplayincustompayload.getBufferData().toString(com.google.common.base.Charsets.UTF_8);
+                            for (String channel : channels.split("\0")) {
+                                getPlayer().addChannel(channel);
+                            }
+                        } catch (Exception ex) {
+                            net.minecraft.network.NetHandlerPlayServer.LOGGER.error("Couldn\'t register custom payload", ex);
+                            this.disconnect("Invalid payload REGISTER!");
                         }
-                        else if (tileentitystructure.func_184412_n())
-                        {
-                            this.field_147369_b.func_146105_b(new TextComponentTranslation("structure_block.load_success", new Object[] {s4}), false);
+                    } else if (packetplayincustompayload.getChannelName().equals("UNREGISTER")) {
+                        try {
+                            String channels = packetplayincustompayload.getBufferData().toString(com.google.common.base.Charsets.UTF_8);
+                            for (String channel : channels.split("\0")) {
+                                getPlayer().removeChannel(channel);
+                            }
+                        } catch (Exception ex) {
+                            net.minecraft.network.NetHandlerPlayServer.LOGGER.error("Couldn\'t unregister custom payload", ex);
+                            this.disconnect("Invalid payload UNREGISTER!");
                         }
-                        else
-                        {
-                            this.field_147369_b.func_146105_b(new TextComponentTranslation("structure_block.load_prepare", new Object[] {s4}), false);
+                    } else {
+                        try {
+                            byte[] data = new byte[packetplayincustompayload.getBufferData().readableBytes()];
+                            packetplayincustompayload.getBufferData().readBytes(data);
+                            server.getMessenger().dispatchIncomingMessage((Player) playerEntity.getBukkitEntity(), packetplayincustompayload.getChannelName(), data);
+                        } catch (Exception ex) {
+                            net.minecraft.network.NetHandlerPlayServer.LOGGER.error("Couldn\'t dispatch custom payload", ex);
+                            this.disconnect("Invalid custom payload!");
                         }
                     }
-                    else if (l1 == 4)
-                    {
-                        if (tileentitystructure.func_184417_l())
-                        {
-                            this.field_147369_b.func_146105_b(new TextComponentTranslation("structure_block.size_success", new Object[] {s4}), false);
-                        }
-                        else
-                        {
-                            this.field_147369_b.func_146105_b(new TextComponentTranslation("structure_block.size_failure", new Object[0]), false);
-                        }
-                    }
-
-                    tileentitystructure.func_70296_d();
-                    this.field_147369_b.field_70170_p.func_184138_a(blockpos, iblockstate1, iblockstate1, 3);
+                    // CraftBukkit end
                 }
             }
-            catch (Exception exception1)
-            {
-                field_147370_c.error((String)"Couldn\'t set structure block", (Throwable)exception1);
-            }
         }
-        else if ("MC|PickItem".equals(s))
-        {
-            PacketBuffer packetbuffer6 = p_147349_1_.func_180760_b();
-
-            try
-            {
-                int j1 = packetbuffer6.func_150792_a();
-                this.field_147369_b.field_71071_by.func_184430_d(j1);
-                this.field_147369_b.field_71135_a.func_147359_a(new SPacketSetSlot(-2, this.field_147369_b.field_71071_by.field_70461_c, this.field_147369_b.field_71071_by.func_70301_a(this.field_147369_b.field_71071_by.field_70461_c)));
-                this.field_147369_b.field_71135_a.func_147359_a(new SPacketSetSlot(-2, j1, this.field_147369_b.field_71071_by.func_70301_a(j1)));
-                this.field_147369_b.field_71135_a.func_147359_a(new SPacketHeldItemChange(this.field_147369_b.field_71071_by.field_70461_c));
-            }
-            catch (Exception exception)
-            {
-                field_147370_c.error((String)"Couldn\'t pick item", (Throwable)exception);
-            }
-        }
     }
+    // CraftBukkit start - Add "isDisconnected" method
+    public final boolean isDisconnected() {
+        return !this.playerEntity.joining && !this.netManager.isChannelOpen();
+    }
 }
