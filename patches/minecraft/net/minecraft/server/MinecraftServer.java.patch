--- ../src-base/minecraft/net/minecraft/server/MinecraftServer.java
+++ ../src-work/minecraft/net/minecraft/server/MinecraftServer.java
@@ -24,18 +24,15 @@
 import java.net.URLEncoder;
 import java.security.KeyPair;
 import java.text.SimpleDateFormat;
-import java.util.Arrays;
-import java.util.Collections;
-import java.util.Date;
-import java.util.List;
-import java.util.Queue;
-import java.util.Random;
-import java.util.UUID;
+import java.util.*;
 import java.util.concurrent.Callable;
 import java.util.concurrent.Executors;
 import java.util.concurrent.FutureTask;
 import javax.annotation.Nullable;
 import javax.imageio.ImageIO;
+
+import jline.console.ConsoleReader;
+import joptsimple.OptionSet;
 import net.minecraft.command.CommandBase;
 import net.minecraft.command.CommandResultStats;
 import net.minecraft.command.ICommandManager;
@@ -54,6 +51,7 @@
 import net.minecraft.profiler.Profiler;
 import net.minecraft.profiler.Snooper;
 import net.minecraft.server.dedicated.DedicatedServer;
+import net.minecraft.server.dedicated.PropertyManager;
 import net.minecraft.server.management.PlayerList;
 import net.minecraft.server.management.PlayerProfileCache;
 import net.minecraft.util.IProgressUpdate;
@@ -77,492 +75,575 @@
 import net.minecraft.world.WorldServerMulti;
 import net.minecraft.world.WorldSettings;
 import net.minecraft.world.WorldType;
+import net.minecraft.world.chunk.IChunkGenerator;
 import net.minecraft.world.chunk.storage.AnvilSaveConverter;
 import net.minecraft.world.demo.DemoWorldServer;
 import net.minecraft.world.storage.ISaveFormat;
 import net.minecraft.world.storage.ISaveHandler;
 import net.minecraft.world.storage.WorldInfo;
+import net.minecraftforge.common.ForgeChunkManager;
+import net.minecraftforge.common.MinecraftForge;
+import net.minecraftforge.fml.common.eventhandler.SubscribeEvent;
 import net.minecraftforge.fml.relauncher.Side;
 import net.minecraftforge.fml.relauncher.SideOnly;
 import org.apache.commons.lang3.Validate;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
+import org.bukkit.craftbukkit.CraftServer;
+import org.bukkit.craftbukkit.Main;
+import org.bukkit.generator.ChunkGenerator;
 
 public abstract class MinecraftServer implements Runnable, ICommandSender, IThreadListener, ISnooperInfo
 {
-    private static final Logger field_147145_h = LogManager.getLogger();
-    public static final File field_152367_a = new File("usercache.json");
-    public final ISaveFormat field_71310_m;
-    private final Snooper field_71307_n = new Snooper("server", this, func_130071_aq());
-    public final File field_71308_o;
-    private final List<ITickable> field_71322_p = Lists.<ITickable>newArrayList();
-    public final ICommandManager field_71321_q;
-    public final Profiler field_71304_b = new Profiler();
-    private final NetworkSystem field_147144_o;
-    private final ServerStatusResponse field_147147_p = new ServerStatusResponse();
-    private final Random field_147146_q = new Random();
-    private final DataFixer field_184112_s;
+    public static final Logger LOG = LogManager.getLogger();
+    public static final File USER_CACHE_FILE = new File("usercache.json");
+    public final ISaveFormat anvilConverterForAnvilFile;
+    private final Snooper usageSnooper = new Snooper("server", this, getCurrentTimeMillis());
+    public final File anvilFile;
+    private final List<ITickable> tickables = Lists.<ITickable>newArrayList();
+    public final ICommandManager commandManager;
+    public final Profiler theProfiler = new Profiler();
+    private final NetworkSystem networkSystem;
+    private final ServerStatusResponse statusResponse = new ServerStatusResponse();
+    private final Random random = new Random();
+    private final DataFixer dataFixer;
     @SideOnly(Side.SERVER)
-    private String field_71320_r;
-    private int field_71319_s = -1;
-    public WorldServer[] field_71305_c;
-    private PlayerList field_71318_t;
-    private boolean field_71317_u = true;
-    private boolean field_71316_v;
-    private int field_71315_w;
-    protected final Proxy field_110456_c;
-    public String field_71302_d;
-    public int field_71303_e;
-    private boolean field_71325_x;
-    private boolean field_190519_A;
-    private boolean field_71324_y;
-    private boolean field_71323_z;
-    private boolean field_71284_A;
-    private boolean field_71285_B;
-    private String field_71286_C;
-    private int field_71280_D;
-    private int field_143008_E;
-    public final long[] field_71311_j = new long[100];
-    public long[][] field_71312_k;
-    private KeyPair field_71292_I;
-    private String field_71293_J;
-    private String field_71294_K;
+    private String hostname;
+    private int serverPort = -1;
+    public WorldServer[] worlds = new WorldServer[0];
+    private PlayerList playerList;
+    private boolean serverRunning = true;
+    private boolean serverStopped;
+    private int tickCounter;
+    protected final Proxy serverProxy;
+    public String currentTask;
+    public int percentDone;
+    private boolean onlineMode;
+    private boolean preventProxyConnections;
+    private boolean canSpawnAnimals;
+    private boolean canSpawnNPCs;
+    private boolean pvpEnabled;
+    private boolean allowFlight;
+    private String motd;
+    private int buildLimit;
+    private int maxPlayerIdleMinutes;
+    public final long[] tickTimeArray = new long[100];
+    //public long[][] timeOfLastDimensionTick;
+    public java.util.Hashtable<Integer, long[]> worldTickTimes = new java.util.Hashtable<Integer, long[]>();
+    private KeyPair serverKeyPair;
+    private String serverOwner;
+    private String folderName;
     @SideOnly(Side.CLIENT)
-    private String field_71287_L;
-    private boolean field_71288_M;
-    private boolean field_71289_N;
-    private String field_147141_M = "";
-    private String field_175588_P = "";
-    private boolean field_71296_Q;
-    private long field_71299_R;
-    private String field_71298_S;
-    private boolean field_71295_T;
-    private boolean field_104057_T;
-    private final YggdrasilAuthenticationService field_152364_T;
-    private final MinecraftSessionService field_147143_S;
-    private final GameProfileRepository field_152365_W;
-    private final PlayerProfileCache field_152366_X;
-    private long field_147142_T;
-    public final Queue < FutureTask<? >> field_175589_i = Queues. < FutureTask<? >> newArrayDeque();
-    private Thread field_175590_aa;
-    private long field_175591_ab = func_130071_aq();
+    private String worldName;
+    private boolean isDemo;
+    private boolean enableBonusChest;
+    private String resourcePackUrl = "";
+    private String resourcePackHash = "";
+    private boolean serverIsRunning;
+    private long timeOfLastWarning;
+    private String userMessage;
+    private boolean startProfiling;
+    private boolean isGamemodeForced;
+    private final YggdrasilAuthenticationService authService;
+    private final MinecraftSessionService sessionService;
+    private final GameProfileRepository profileRepo;
+    private final PlayerProfileCache profileCache;
+    private long nanoTimeSinceStatusRefresh;
+    public final Queue < FutureTask<? >> futureTaskQueue = Queues. < FutureTask<? >> newArrayDeque();
+    private Thread serverThread;
+    private long currentTime = getCurrentTimeMillis();
     @SideOnly(Side.CLIENT)
-    private boolean field_184111_ab;
+    private boolean worldIconSet;
+    // CraftBukkit start
+    public CraftServer server;
+    public OptionSet options;
+    public org.bukkit.command.ConsoleCommandSender console;
+    public org.bukkit.command.RemoteConsoleCommandSender remoteConsole;
+    public ConsoleReader reader;
+    public static int currentTick = (int) (System.currentTimeMillis() / 50);
+    public Thread primaryThread;
+    public Queue<Runnable> processQueue = new java.util.concurrent.ConcurrentLinkedQueue<Runnable>();
+    public int autosavePeriod;
+    public double[] recentTps = new double[]{20,20,20};
+    private long time_from_start = 0;
+    private long time_start= 0;
+    private int tick_count_5m;
 
-    public MinecraftServer(File p_i47054_1_, Proxy p_i47054_2_, DataFixer p_i47054_3_, YggdrasilAuthenticationService p_i47054_4_, MinecraftSessionService p_i47054_5_, GameProfileRepository p_i47054_6_, PlayerProfileCache p_i47054_7_)
+    // CraftBukkit end
+
+    public MinecraftServer(File anvilFileIn, Proxy proxyIn, DataFixer dataFixerIn, YggdrasilAuthenticationService authServiceIn, MinecraftSessionService sessionServiceIn, GameProfileRepository profileRepoIn, PlayerProfileCache profileCacheIn)
     {
-        this.field_110456_c = p_i47054_2_;
-        this.field_152364_T = p_i47054_4_;
-        this.field_147143_S = p_i47054_5_;
-        this.field_152365_W = p_i47054_6_;
-        this.field_152366_X = p_i47054_7_;
-        this.field_71308_o = p_i47054_1_;
-        this.field_147144_o = new NetworkSystem(this);
-        this.field_71321_q = this.func_175582_h();
-        this.field_71310_m = new AnvilSaveConverter(p_i47054_1_, p_i47054_3_);
-        this.field_184112_s = p_i47054_3_;
+        this.serverProxy = proxyIn;
+        this.authService = authServiceIn;
+        this.sessionService = sessionServiceIn;
+        this.profileRepo = profileRepoIn;
+        this.profileCache = profileCacheIn;
+        this.anvilFile = anvilFileIn;
+        this.networkSystem = new NetworkSystem(this);
+        this.commandManager = this.createCommandManager();
+        this.anvilConverterForAnvilFile = new AnvilSaveConverter(anvilFileIn, dataFixerIn);
+        this.dataFixer = dataFixerIn;
+        // Try to see if we're actually running in a terminal, disable jline if not
+        if (System.console() == null && System.getProperty("jline.terminal") == null) {
+            System.setProperty("jline.terminal", "jline.UnsupportedTerminal");
+            Main.useJline = false;
+        }
+
+        try {
+            reader = new ConsoleReader(System.in, System.out);
+            reader.setExpandEvents(false); // Avoid parsing exceptions for uncommonly used event designators
+        } catch (Throwable e) {
+            try {
+                // Try again with jline disabled for Windows users without C++ 2008 Redistributable
+                System.setProperty("jline.terminal", "jline.UnsupportedTerminal");
+                System.setProperty("user.language", "en");
+                Main.useJline = false;
+                reader = new ConsoleReader(System.in, System.out);
+                reader.setExpandEvents(false);
+            } catch (IOException ex) {
+                LOG.warn((String) null, ex);
+            }
+        }
+        MinecraftForge.EVENT_BUS.register(this);
+        Runtime.getRuntime().addShutdownHook(new org.bukkit.craftbukkit.util.ServerShutdownThread(this));
     }
+    public PropertyManager getPropertyManager()
+    {
+        return getPropertyManager();
+    }
 
-    public ServerCommandManager func_175582_h()
+
+    public ServerCommandManager createCommandManager()
     {
         return new ServerCommandManager(this);
     }
 
-    public abstract boolean func_71197_b() throws IOException;
+    public abstract boolean init() throws IOException;
 
-    public void func_71237_c(String p_71237_1_)
+    public void convertMapIfNeeded(String worldNameIn)
     {
-        if (this.func_71254_M().func_75801_b(p_71237_1_))
+        if (this.getActiveAnvilConverter().isOldMapFormat(worldNameIn))
         {
-            field_147145_h.info("Converting map!");
-            this.func_71192_d("menu.convertingLevel");
-            this.func_71254_M().func_75805_a(p_71237_1_, new IProgressUpdate()
+            LOG.info("Converting map!");
+            this.setUserMessage("menu.convertingLevel");
+            this.getActiveAnvilConverter().convertMapFormat(worldNameIn, new IProgressUpdate()
             {
-                private long field_96245_b = System.currentTimeMillis();
-                public void func_73720_a(String p_73720_1_)
+                private long startTime = System.currentTimeMillis();
+                public void displaySavingString(String message)
                 {
                 }
-                public void func_73718_a(int p_73718_1_)
+                public void setLoadingProgress(int progress)
                 {
-                    if (System.currentTimeMillis() - this.field_96245_b >= 1000L)
+                    if (System.currentTimeMillis() - this.startTime >= 1000L)
                     {
-                        this.field_96245_b = System.currentTimeMillis();
-                        MinecraftServer.field_147145_h.info("Converting... {}%", new Object[] {Integer.valueOf(p_73718_1_)});
+                        this.startTime = System.currentTimeMillis();
+                        MinecraftServer.LOG.info("Converting... {}%", new Object[] {Integer.valueOf(progress)});
                     }
                 }
                 @SideOnly(Side.CLIENT)
-                public void func_73721_b(String p_73721_1_)
+                public void resetProgressAndMessage(String message)
                 {
                 }
                 @SideOnly(Side.CLIENT)
-                public void func_146586_a()
+                public void setDoneWorking()
                 {
                 }
-                public void func_73719_c(String p_73719_1_)
+                public void displayLoadingString(String message)
                 {
                 }
             });
         }
     }
 
-    protected synchronized void func_71192_d(String p_71192_1_)
+    protected synchronized void setUserMessage(String message)
     {
-        this.field_71298_S = p_71192_1_;
+        this.userMessage = message;
     }
 
     @Nullable
     @SideOnly(Side.CLIENT)
 
-    public synchronized String func_71195_b_()
+    public synchronized String getUserMessage()
     {
-        return this.field_71298_S;
+        return this.userMessage;
     }
 
-    public void func_71247_a(String p_71247_1_, String p_71247_2_, long p_71247_3_, WorldType p_71247_5_, String p_71247_6_)
+    public void loadAllWorlds(String saveName, String worldNameIn, long seed, WorldType type, String generatorOptions)
     {
-        this.func_71237_c(p_71247_1_);
-        this.func_71192_d("menu.loadingLevel");
-        this.field_71305_c = new WorldServer[3];
-        this.field_71312_k = new long[this.field_71305_c.length][100];
-        ISaveHandler isavehandler = this.field_71310_m.func_75804_a(p_71247_1_, true);
-        this.func_175584_a(this.func_71270_I(), isavehandler);
-        WorldInfo worldinfo = isavehandler.func_75757_d();
+        this.convertMapIfNeeded(saveName);
+        this.setUserMessage("menu.loadingLevel");
+        ISaveHandler isavehandler = this.anvilConverterForAnvilFile.getSaveLoader(saveName, true);
+        this.setResourcePackFromWorld(this.getFolderName(), isavehandler);
+        WorldInfo worldinfo = isavehandler.loadWorldInfo();
         WorldSettings worldsettings;
 
         if (worldinfo == null)
         {
-            if (this.func_71242_L())
+            if (this.isDemo())
             {
-                worldsettings = DemoWorldServer.field_73071_a;
+                worldsettings = DemoWorldServer.DEMO_WORLD_SETTINGS;
             }
             else
             {
-                worldsettings = new WorldSettings(p_71247_3_, this.func_71265_f(), this.func_71225_e(), this.func_71199_h(), p_71247_5_);
-                worldsettings.func_82750_a(p_71247_6_);
+                worldsettings = new WorldSettings(seed, this.getGameType(), this.canStructuresSpawn(), this.isHardcore(), type);
+                worldsettings.setGeneratorOptions(generatorOptions);
 
-                if (this.field_71289_N)
+                if (this.enableBonusChest)
                 {
-                    worldsettings.func_77159_a();
+                    worldsettings.enableBonusChest();
                 }
             }
 
-            worldinfo = new WorldInfo(worldsettings, p_71247_2_);
+            worldinfo = new WorldInfo(worldsettings, worldNameIn);
         }
         else
         {
-            worldinfo.func_76062_a(p_71247_2_);
+            worldinfo.setWorldName(worldNameIn);
             worldsettings = new WorldSettings(worldinfo);
         }
-
-        for (int i = 0; i < this.field_71305_c.length; ++i)
+        ChunkGenerator generator = server.getGenerator(worldNameIn);
+        WorldServer overWorld;
+        if (this.isDemo()) {
+            overWorld = (WorldServer) (new DemoWorldServer(this, isavehandler, worldinfo, 0, this.theProfiler)).init();
+        } else {
+            overWorld = (WorldServer) (new WorldServer(this, isavehandler, worldinfo, 0, this.theProfiler).init());
+        }
+        overWorld.initialize(worldsettings);
+        for (int dim : net.minecraftforge.common.DimensionManager.getStaticDimensionIDs())
         {
-            int j = 0;
+            WorldServer world = (dim == 0 ? overWorld : (WorldServer)new WorldServerMulti(this, isavehandler, dim, overWorld, theProfiler).init());
+            world.addEventListener(new ServerWorldEventHandler(this, world));
 
-            if (i == 1)
+            if (!this.isSinglePlayer())
             {
-                j = -1;
+                world.getWorldInfo().setGameType(this.getGameType());
             }
-
-            if (i == 2)
-            {
-                j = 1;
-            }
-
-            if (i == 0)
-            {
-                if (this.func_71242_L())
-                {
-                    this.field_71305_c[i] = (WorldServer)(new DemoWorldServer(this, isavehandler, worldinfo, j, this.field_71304_b)).func_175643_b();
-                }
-                else
-                {
-                    this.field_71305_c[i] = (WorldServer)(new WorldServer(this, isavehandler, worldinfo, j, this.field_71304_b)).func_175643_b();
-                }
-
-                this.field_71305_c[i].func_72963_a(worldsettings);
-            }
-            else
-            {
-                this.field_71305_c[i] = (WorldServer)(new WorldServerMulti(this, isavehandler, j, this.field_71305_c[0], this.field_71304_b)).func_175643_b();
-            }
-
-            this.field_71305_c[i].func_72954_a(new ServerWorldEventHandler(this, this.field_71305_c[i]));
-
-            if (!this.func_71264_H())
-            {
-                this.field_71305_c[i].func_72912_H().func_76060_a(this.func_71265_f());
-            }
+            net.minecraftforge.common.MinecraftForge.EVENT_BUS.post(new net.minecraftforge.event.world.WorldEvent.Load(world));
         }
 
-        this.field_71318_t.func_72364_a(this.field_71305_c);
-        this.func_147139_a(this.func_147135_j());
-        this.func_71222_d();
+        this.playerList.setPlayerManager(new WorldServer[]{ overWorld });
+        this.setDifficultyForAllWorlds(this.getDifficulty());
+        this.initialWorldChunkLoad();
     }
 
-    public void func_71222_d()
+    public void initialWorldChunkLoad()
     {
-        int i = 16;
-        int j = 4;
-        int k = 192;
-        int l = 625;
-        int i1 = 0;
-        this.func_71192_d("menu.generatingTerrain");
-        int j1 = 0;
-        field_147145_h.info("Preparing start region for level 0");
-        WorldServer worldserver = this.field_71305_c[0];
-        BlockPos blockpos = worldserver.func_175694_M();
-        long k1 = func_130071_aq();
+        for(int idx = 0; idx < worlds.length; idx++) {
+            int i = 16;
+            int j = 4;
+            int k = 192;
+            int l = 625;
+            int i1 = 0;
+            this.setUserMessage("menu.generatingTerrain");
+            int j1 = 0;
+            long k1 = getCurrentTimeMillis();
+            WorldServer world = worlds[idx];
+            LOG.info("Preparing start region for level " + world.provider.getDimension());
+            BlockPos blockpos = world.getSpawnPoint();
+            if (!world.getWorld().getKeepSpawnInMemory()) {
+                continue;
+            }
+            for (int l1 = -192; l1 <= 192 && this.isServerRunning(); l1 += 16) {
+                for (int i2 = -192; i2 <= 192 && this.isServerRunning(); i2 += 16) {
+                    long j2 = getCurrentTimeMillis();
 
-        for (int l1 = -192; l1 <= 192 && this.func_71278_l(); l1 += 16)
-        {
-            for (int i2 = -192; i2 <= 192 && this.func_71278_l(); i2 += 16)
-            {
-                long j2 = func_130071_aq();
+                    if (j2 - k1 > 1000L) {
+                        this.outputPercentRemaining("Preparing spawn area", i1 * 100 / 625);
+                        k1 = j2;
+                    }
 
-                if (j2 - k1 > 1000L)
-                {
-                    this.func_71216_a_("Preparing spawn area", i1 * 100 / 625);
-                    k1 = j2;
+                    ++i1;
+                    world.getChunkProvider().provideChunk(blockpos.getX() + l1 >> 4, blockpos.getZ() + i2 >> 4);
                 }
-
-                ++i1;
-                worldserver.func_72863_F().func_186025_d(blockpos.func_177958_n() + l1 >> 4, blockpos.func_177952_p() + i2 >> 4);
             }
         }
-
-        this.func_71243_i();
+        for(World w : worlds)
+        {
+            this.server.getPluginManager().callEvent(new org.bukkit.event.world.WorldLoadEvent(w.getWorld()));
+        }
+        this.clearCurrentTask();
     }
 
-    public void func_175584_a(String p_175584_1_, ISaveHandler p_175584_2_)
+    public void setResourcePackFromWorld(String worldNameIn, ISaveHandler saveHandlerIn)
     {
-        File file1 = new File(p_175584_2_.func_75765_b(), "resources.zip");
+        File file1 = new File(saveHandlerIn.getWorldDirectory(), "resources.zip");
 
         if (file1.isFile())
         {
             try
             {
-                this.func_180507_a_("level://" + URLEncoder.encode(p_175584_1_, Charsets.UTF_8.toString()) + "/" + "resources.zip", "");
+                this.setResourcePack("level://" + URLEncoder.encode(worldNameIn, Charsets.UTF_8.toString()) + "/" + "resources.zip", "");
             }
             catch (UnsupportedEncodingException var5)
             {
-                field_147145_h.warn("Something went wrong url encoding {}", new Object[] {p_175584_1_});
+                LOG.warn("Something went wrong url encoding {}", new Object[] {worldNameIn});
             }
         }
     }
 
-    public abstract boolean func_71225_e();
+    public abstract boolean canStructuresSpawn();
 
-    public abstract GameType func_71265_f();
+    public abstract GameType getGameType();
 
-    public abstract EnumDifficulty func_147135_j();
+    public abstract EnumDifficulty getDifficulty();
 
-    public abstract boolean func_71199_h();
+    public abstract boolean isHardcore();
 
-    public abstract int func_110455_j();
+    public abstract int getOpPermissionLevel();
 
-    public abstract boolean func_181034_q();
+    public abstract boolean shouldBroadcastRconToOps();
 
-    public abstract boolean func_183002_r();
+    public abstract boolean shouldBroadcastConsoleToOps();
 
-    protected void func_71216_a_(String p_71216_1_, int p_71216_2_)
+    protected void outputPercentRemaining(String message, int percent)
     {
-        this.field_71302_d = p_71216_1_;
-        this.field_71303_e = p_71216_2_;
-        field_147145_h.info("{}: {}%", new Object[] {p_71216_1_, Integer.valueOf(p_71216_2_)});
+        this.currentTask = message;
+        this.percentDone = percent;
+        LOG.info("{}: {}%", new Object[] {message, Integer.valueOf(percent)});
     }
 
-    protected void func_71243_i()
+    protected void clearCurrentTask()
     {
-        this.field_71302_d = null;
-        this.field_71303_e = 0;
+        this.currentTask = null;
+        this.percentDone = 0;
+        this.server.enablePlugins(org.bukkit.plugin.PluginLoadOrder.POSTWORLD); // CraftBukkit
+
     }
 
-    public void func_71267_a(boolean p_71267_1_)
+    public void saveAllWorlds(boolean isSilent)
     {
-        for (WorldServer worldserver : this.field_71305_c)
+        for (WorldServer worldserver : this.worlds)
         {
             if (worldserver != null)
             {
-                if (!p_71267_1_)
+                if (!isSilent)
                 {
-                    field_147145_h.info("Saving chunks for level \'{}\'/{}", new Object[] {worldserver.func_72912_H().func_76065_j(), worldserver.field_73011_w.func_186058_p().func_186065_b()});
+                    LOG.info("Saving chunks for level \'{}\'/{}", new Object[] {worldserver.getWorldInfo().getWorldName(), worldserver.provider.getDimensionType().getName()});
                 }
 
                 try
                 {
-                    worldserver.func_73044_a(true, (IProgressUpdate)null);
+                    worldserver.saveAllChunks(true, (IProgressUpdate)null);
                 }
                 catch (MinecraftException minecraftexception)
                 {
-                    field_147145_h.warn(minecraftexception.getMessage());
+                    LOG.warn(minecraftexception.getMessage());
                 }
             }
         }
     }
-
-    public void func_71260_j()
+    // CraftBukkit start
+    private boolean hasStopped = false;
+    private final Object stopLock = new Object();
+    // CraftBukkit end
+    public void stopServer()
     {
-        field_147145_h.info("Stopping server");
+        // CraftBukkit start - prevent double stopping on multiple threads
+        synchronized(stopLock) {
+            if (hasStopped) return;
+            hasStopped = true;
+        }
+        LOG.info("Stopping server");
+        // CraftBukkit start
+        if (this.server != null) {
+            this.server.disablePlugins();
+        }
+        // CraftBukkit end
 
-        if (this.func_147137_ag() != null)
+        if (this.getNetworkSystem() != null)
         {
-            this.func_147137_ag().func_151268_b();
+            this.getNetworkSystem().terminateEndpoints();
         }
 
-        if (this.field_71318_t != null)
+        if (this.playerList != null)
         {
-            field_147145_h.info("Saving players");
-            this.field_71318_t.func_72389_g();
-            this.field_71318_t.func_72392_r();
+            LOG.info("Saving players");
+            this.playerList.saveAllPlayerData();
+            this.playerList.removeAllPlayers();
+            try { Thread.sleep(1000); } catch (InterruptedException ex) {} // CraftBukkit - SPIGOT-625 - give server at least a chance to send packets
         }
 
-        if (this.field_71305_c != null)
+        if (this.worlds != null)
         {
-            field_147145_h.info("Saving worlds");
+            LOG.info("Saving worlds");
 
-            for (WorldServer worldserver : this.field_71305_c)
+            for (WorldServer worldserver : this.worlds)
             {
                 if (worldserver != null)
                 {
-                    worldserver.field_73058_d = false;
+                    worldserver.disableLevelSaving = false;
                 }
             }
 
-            this.func_71267_a(false);
+            this.saveAllWorlds(false);
 
-            for (WorldServer worldserver1 : this.field_71305_c)
+            for (WorldServer worldserver1 : this.worlds)
             {
                 if (worldserver1 != null)
                 {
-                    worldserver1.func_73041_k();
+                    net.minecraftforge.common.MinecraftForge.EVENT_BUS.post(new net.minecraftforge.event.world.WorldEvent.Unload(worldserver1));
+                    worldserver1.flush();
                 }
             }
+
+            WorldServer[] tmp = worlds;
+            for (WorldServer world : tmp)
+            {
+                net.minecraftforge.common.DimensionManager.setWorld(world.provider.getDimension(), null, this);
+            }
         }
 
-        if (this.field_71307_n.func_76468_d())
+        if (this.usageSnooper.isSnooperRunning())
         {
-            this.field_71307_n.func_76470_e();
+            this.usageSnooper.stopSnooper();
         }
     }
 
-    public boolean func_71278_l()
+    public boolean isServerRunning()
     {
-        return this.field_71317_u;
+        return this.serverRunning;
     }
 
-    public void func_71263_m()
+    public void initiateShutdown()
     {
-        this.field_71317_u = false;
+        this.serverRunning = false;
     }
 
     public void run()
     {
         try
         {
-            if (this.func_71197_b())
+            if (this.init())
             {
-                this.field_175591_ab = func_130071_aq();
+                net.minecraftforge.fml.common.FMLCommonHandler.instance().handleServerStarted();
+                this.currentTime = getCurrentTimeMillis();
                 long i = 0L;
-                this.field_147147_p.func_151315_a(new TextComponentString(this.field_71286_C));
-                this.field_147147_p.func_151321_a(new ServerStatusResponse.Version("1.11.2", 316));
-                this.func_184107_a(this.field_147147_p);
-
-                while (this.field_71317_u)
+                this.statusResponse.setServerDescription(new TextComponentString(this.motd));
+                this.statusResponse.setVersion(new ServerStatusResponse.Version("1.11.2", 316));
+                this.applyServerIconToResponse(this.statusResponse);
+                time_start = getCurrentTimeMillis();
+                while (this.serverRunning)
                 {
-                    long k = func_130071_aq();
-                    long j = k - this.field_175591_ab;
+                    long k = getCurrentTimeMillis();
+                    long j = k - this.currentTime;
 
-                    if (j > 2000L && this.field_175591_ab - this.field_71299_R >= 15000L)
+                    if (j > 2000L && this.currentTime - this.timeOfLastWarning >= 15000L)
                     {
-                        field_147145_h.warn("Can\'t keep up! Did the system time change, or is the server overloaded? Running {}ms behind, skipping {} tick(s)", new Object[] {Long.valueOf(j), Long.valueOf(j / 50L)});
+                        LOG.warn("Can\'t keep up! Did the system time change, or is the server overloaded? Running {}ms behind, skipping {} tick(s)", new Object[] {Long.valueOf(j), Long.valueOf(j / 50L)});
                         j = 2000L;
-                        this.field_71299_R = this.field_175591_ab;
+                        this.timeOfLastWarning = this.currentTime;
                     }
 
                     if (j < 0L)
                     {
-                        field_147145_h.warn("Time ran backwards! Did the system time change?");
+                        LOG.warn("Time ran backwards! Did the system time change?");
                         j = 0L;
                     }
 
                     i += j;
-                    this.field_175591_ab = k;
-
-                    if (this.field_71305_c[0].func_73056_e())
+                    this.currentTime = k;
+                    long time_delta = currentTime - time_start;
+                    if(time_delta > 300000)
                     {
-                        this.func_71217_p();
+                        recentTps[2] = recentTps[1];
+                        recentTps[1] = recentTps[0];
+                        recentTps[0] = (currentTick - tick_count_5m) / 300;
+                        tick_count_5m = currentTick;
+                    }
+                    if (this.worlds[0].areAllPlayersAsleep())
+                    {
+                        this.tick();
                         i = 0L;
                     }
                     else
                     {
                         while (i > 50L)
                         {
+                            net.minecraft.server.MinecraftServer.currentTick = (int) (System.currentTimeMillis() / 50); // CraftBukkit
+
                             i -= 50L;
-                            this.func_71217_p();
+                            this.tick();
                         }
                     }
 
                     Thread.sleep(Math.max(1L, 50L - i));
-                    this.field_71296_Q = true;
+                    this.serverIsRunning = true;
                 }
+                net.minecraftforge.fml.common.FMLCommonHandler.instance().handleServerStopping();
+                net.minecraftforge.fml.common.FMLCommonHandler.instance().expectServerStopped(); // has to come before finalTick to avoid race conditions
             }
             else
             {
-                this.func_71228_a((CrashReport)null);
+                net.minecraftforge.fml.common.FMLCommonHandler.instance().expectServerStopped(); // has to come before finalTick to avoid race conditions
+                this.finalTick((CrashReport)null);
             }
         }
+        catch (net.minecraftforge.fml.common.StartupQuery.AbortedException e)
+        {
+            // ignore silently
+            net.minecraftforge.fml.common.FMLCommonHandler.instance().expectServerStopped(); // has to come before finalTick to avoid race conditions
+        }
         catch (Throwable throwable1)
         {
-            field_147145_h.error("Encountered an unexpected exception", throwable1);
+            LOG.error("Encountered an unexpected exception", throwable1);
             CrashReport crashreport = null;
 
             if (throwable1 instanceof ReportedException)
             {
-                crashreport = this.func_71230_b(((ReportedException)throwable1).func_71575_a());
+                crashreport = this.addServerInfoToCrashReport(((ReportedException)throwable1).getCrashReport());
             }
             else
             {
-                crashreport = this.func_71230_b(new CrashReport("Exception in server tick loop", throwable1));
+                crashreport = this.addServerInfoToCrashReport(new CrashReport("Exception in server tick loop", throwable1));
             }
 
-            File file1 = new File(new File(this.func_71238_n(), "crash-reports"), "crash-" + (new SimpleDateFormat("yyyy-MM-dd_HH.mm.ss")).format(new Date()) + "-server.txt");
+            File file1 = new File(new File(this.getDataDirectory(), "crash-reports"), "crash-" + (new SimpleDateFormat("yyyy-MM-dd_HH.mm.ss")).format(new Date()) + "-server.txt");
 
-            if (crashreport.func_147149_a(file1))
+            if (crashreport.saveToFile(file1))
             {
-                field_147145_h.error("This crash report has been saved to: {}", new Object[] {file1.getAbsolutePath()});
+                LOG.error("This crash report has been saved to: {}", new Object[] {file1.getAbsolutePath()});
             }
             else
             {
-                field_147145_h.error("We were unable to save this crash report to disk.");
+                LOG.error("We were unable to save this crash report to disk.");
             }
 
-            this.func_71228_a(crashreport);
+            net.minecraftforge.fml.common.FMLCommonHandler.instance().expectServerStopped(); // has to come before finalTick to avoid race conditions
+            this.finalTick(crashreport);
         }
         finally
         {
             try
             {
-                this.field_71316_v = true;
-                this.func_71260_j();
+                this.stopServer();
+                this.serverStopped = true;
             }
             catch (Throwable throwable)
             {
-                field_147145_h.error("Exception stopping the server", throwable);
+                // CraftBukkit start - Restore terminal to original settings
+                try {
+                    reader.getTerminal().restore();
+                } catch (Exception ignored) {
+                }
+                // CraftBukkit end
+                LOG.error("Exception stopping the server", throwable);
             }
             finally
             {
-                this.func_71240_o();
+                net.minecraftforge.fml.common.FMLCommonHandler.instance().handleServerStopped();
+                this.serverStopped = true;
+                this.systemExitNow();
             }
         }
     }
 
-    public void func_184107_a(ServerStatusResponse p_184107_1_)
+    public void applyServerIconToResponse(ServerStatusResponse response)
     {
-        File file1 = this.func_71209_f("server-icon.png");
+        File file1 = this.getFile("server-icon.png");
 
         if (!file1.exists())
         {
-            file1 = this.func_71254_M().func_186352_b(this.func_71270_I(), "icon.png");
+            file1 = this.getActiveAnvilConverter().getFile(this.getFolderName(), "icon.png");
         }
 
         if (file1.isFile())
@@ -576,11 +657,11 @@
                 Validate.validState(bufferedimage.getHeight() == 64, "Must be 64 pixels high", new Object[0]);
                 ImageIO.write(bufferedimage, "PNG", (OutputStream)(new ByteBufOutputStream(bytebuf)));
                 ByteBuf bytebuf1 = Base64.encode(bytebuf);
-                p_184107_1_.func_151320_a("data:image/png;base64," + bytebuf1.toString(Charsets.UTF_8));
+                response.setFavicon("data:image/png;base64," + bytebuf1.toString(Charsets.UTF_8));
             }
             catch (Exception exception)
             {
-                field_147145_h.error((String)"Couldn\'t load server icon", (Throwable)exception);
+                LOG.error((String)"Couldn\'t load server icon", (Throwable)exception);
             }
             finally
             {
@@ -590,265 +671,300 @@
     }
 
     @SideOnly(Side.CLIENT)
-    public boolean func_184106_y()
+    public boolean isWorldIconSet()
     {
-        this.field_184111_ab = this.field_184111_ab || this.func_184109_z().isFile();
-        return this.field_184111_ab;
+        this.worldIconSet = this.worldIconSet || this.getWorldIconFile().isFile();
+        return this.worldIconSet;
     }
 
     @SideOnly(Side.CLIENT)
-    public File func_184109_z()
+    public File getWorldIconFile()
     {
-        return this.func_71254_M().func_186352_b(this.func_71270_I(), "icon.png");
+        return this.getActiveAnvilConverter().getFile(this.getFolderName(), "icon.png");
     }
 
-    public File func_71238_n()
+    public File getDataDirectory()
     {
         return new File(".");
     }
 
-    public void func_71228_a(CrashReport p_71228_1_)
+    public void finalTick(CrashReport report)
     {
     }
 
-    public void func_71240_o()
+    public void systemExitNow()
     {
     }
 
-    public void func_71217_p()
+    public void tick() throws MinecraftException // CraftBukkit - added throws
     {
         long i = System.nanoTime();
-        ++this.field_71315_w;
+        net.minecraftforge.fml.common.FMLCommonHandler.instance().onPreServerTick();
+        ++this.tickCounter;
 
-        if (this.field_71295_T)
+        if (this.startProfiling)
         {
-            this.field_71295_T = false;
-            this.field_71304_b.field_76327_a = true;
-            this.field_71304_b.func_76317_a();
+            this.startProfiling = false;
+            this.theProfiler.profilingEnabled = true;
+            this.theProfiler.clearProfiling();
         }
 
-        this.field_71304_b.func_76320_a("root");
-        this.func_71190_q();
+        this.theProfiler.startSection("root");
+        this.updateTimeLightAndEntities();
 
-        if (i - this.field_147142_T >= 5000000000L)
+        if (i - this.nanoTimeSinceStatusRefresh >= 5000000000L)
         {
-            this.field_147142_T = i;
-            this.field_147147_p.func_151319_a(new ServerStatusResponse.Players(this.func_71275_y(), this.func_71233_x()));
-            GameProfile[] agameprofile = new GameProfile[Math.min(this.func_71233_x(), 12)];
-            int j = MathHelper.func_76136_a(this.field_147146_q, 0, this.func_71233_x() - agameprofile.length);
+            this.nanoTimeSinceStatusRefresh = i;
+            this.statusResponse.setPlayers(new ServerStatusResponse.Players(this.getMaxPlayers(), this.getCurrentPlayerCount()));
+            GameProfile[] agameprofile = new GameProfile[Math.min(this.getCurrentPlayerCount(), 12)];
+            int j = MathHelper.getInt(this.random, 0, this.getCurrentPlayerCount() - agameprofile.length);
 
             for (int k = 0; k < agameprofile.length; ++k)
             {
-                agameprofile[k] = ((EntityPlayerMP)this.field_71318_t.func_181057_v().get(j + k)).func_146103_bH();
+                agameprofile[k] = ((EntityPlayerMP)this.playerList.getPlayers().get(j + k)).getGameProfile();
             }
 
             Collections.shuffle(Arrays.asList(agameprofile));
-            this.field_147147_p.func_151318_b().func_151330_a(agameprofile);
+            this.statusResponse.getPlayers().setPlayers(agameprofile);
+            this.statusResponse.invalidateJson();
         }
 
-        if (this.field_71315_w % 900 == 0)
-        {
-            this.field_71304_b.func_76320_a("save");
-            this.field_71318_t.func_72389_g();
-            this.func_71267_a(true);
-            this.field_71304_b.func_76319_b();
+        if (autosavePeriod > 0 && this.tickCounter % autosavePeriod == 0) { // CraftBukkit
+            this.theProfiler.startSection("save");
+            this.playerList.saveAllPlayerData();
+            this.saveAllWorlds(true);
+            this.theProfiler.endSection();
         }
 
-        this.field_71304_b.func_76320_a("tallying");
-        this.field_71311_j[this.field_71315_w % 100] = System.nanoTime() - i;
-        this.field_71304_b.func_76319_b();
-        this.field_71304_b.func_76320_a("snooper");
 
-        if (!this.field_71307_n.func_76468_d() && this.field_71315_w > 100)
+        this.theProfiler.startSection("tallying");
+        this.tickTimeArray[this.tickCounter % 100] = System.nanoTime() - i;
+        this.theProfiler.endSection();
+        this.theProfiler.startSection("snooper");
+
+        if (!this.usageSnooper.isSnooperRunning() && this.tickCounter > 100)
         {
-            this.field_71307_n.func_76463_a();
+            this.usageSnooper.startSnooper();
         }
 
-        if (this.field_71315_w % 6000 == 0)
+        if (this.tickCounter % 6000 == 0)
         {
-            this.field_71307_n.func_76471_b();
+            this.usageSnooper.addMemoryStatsToSnooper();
         }
 
-        this.field_71304_b.func_76319_b();
-        this.field_71304_b.func_76319_b();
+        this.theProfiler.endSection();
+        this.theProfiler.endSection();
+        net.minecraftforge.fml.common.FMLCommonHandler.instance().onPostServerTick();
     }
 
-    public void func_71190_q()
+    public void updateTimeLightAndEntities()
     {
-        this.field_71304_b.func_76320_a("jobs");
+        this.server.getScheduler().mainThreadHeartbeat(this.tickCounter); // CraftBukkit
+        this.theProfiler.startSection("jobs");
 
-        synchronized (this.field_175589_i)
+        synchronized (this.futureTaskQueue)
         {
-            while (!this.field_175589_i.isEmpty())
+            while (!this.futureTaskQueue.isEmpty())
             {
-                Util.func_181617_a((FutureTask)this.field_175589_i.poll(), field_147145_h);
+                Util.runTask((FutureTask)this.futureTaskQueue.poll(), LOG);
             }
         }
+        // CraftBukkit start
+        // Run tasks that are waiting on processing
+        while (!processQueue.isEmpty()) {
+            processQueue.remove().run();
+        }
 
-        this.field_71304_b.func_76318_c("levels");
+        //org.bukkit.craftbukkit.chunkio.ChunkIOExecutor.tick(); we shall redirect it to forge one
 
-        for (int j = 0; j < this.field_71305_c.length; ++j)
+
+        this.theProfiler.endStartSection("levels");
+        net.minecraftforge.common.chunkio.ChunkIOExecutor.tick();
+        // Send time updates to everyone, it will get the right time from the world the player is in.
+        if (this.tickCounter % 20 == 0) {
+            for (int i = 0; i < this.getPlayerList().playerEntityList.size(); ++i) {
+                EntityPlayerMP entityplayer = (EntityPlayerMP) this.getPlayerList().playerEntityList.get(i);
+                entityplayer.connection.sendPacket(new SPacketTimeUpdate(entityplayer.world.getTotalWorldTime(), entityplayer.getPlayerTime(), entityplayer.world.getGameRules().getBoolean("doDaylightCycle"))); // Add support for per player time
+            }
+        }
+
+        Integer[] ids = net.minecraftforge.common.DimensionManager.getIDs(this.tickCounter % 200 == 0);
+        for (int x = 0; x < ids.length; x++)
         {
+            int id = ids[x];
             long i = System.nanoTime();
 
-            if (j == 0 || this.func_71255_r())
+            if (id == 0 || this.getAllowNether())
             {
-                WorldServer worldserver = this.field_71305_c[j];
-                this.field_71304_b.func_76320_a(worldserver.func_72912_H().func_76065_j());
+                WorldServer worldserver = net.minecraftforge.common.DimensionManager.getWorld(id);
+                this.theProfiler.startSection(worldserver.getWorldInfo().getWorldName());
 
-                if (this.field_71315_w % 20 == 0)
+                if (this.tickCounter % 20 == 0)
                 {
-                    this.field_71304_b.func_76320_a("timeSync");
-                    this.field_71318_t.func_148537_a(new SPacketTimeUpdate(worldserver.func_82737_E(), worldserver.func_72820_D(), worldserver.func_82736_K().func_82766_b("doDaylightCycle")), worldserver.field_73011_w.func_186058_p().func_186068_a());
-                    this.field_71304_b.func_76319_b();
+                    this.theProfiler.startSection("timeSync");
+                    this.playerList.sendPacketToAllPlayersInDimension(new SPacketTimeUpdate(worldserver.getTotalWorldTime(), worldserver.getWorldTime(), worldserver.getGameRules().getBoolean("doDaylightCycle")), worldserver.provider.getDimension());
+                    this.theProfiler.endSection();
                 }
 
-                this.field_71304_b.func_76320_a("tick");
+                this.theProfiler.startSection("tick");
+                net.minecraftforge.fml.common.FMLCommonHandler.instance().onPreWorldTick(worldserver);
 
                 try
                 {
-                    worldserver.func_72835_b();
+                    worldserver.tick();
                 }
                 catch (Throwable throwable1)
                 {
-                    CrashReport crashreport = CrashReport.func_85055_a(throwable1, "Exception ticking world");
-                    worldserver.func_72914_a(crashreport);
+                    CrashReport crashreport = CrashReport.makeCrashReport(throwable1, "Exception ticking world");
+                    worldserver.addWorldInfoToCrashReport(crashreport);
                     throw new ReportedException(crashreport);
                 }
 
                 try
                 {
-                    worldserver.func_72939_s();
+                    worldserver.updateEntities();
                 }
                 catch (Throwable throwable)
                 {
-                    CrashReport crashreport1 = CrashReport.func_85055_a(throwable, "Exception ticking world entities");
-                    worldserver.func_72914_a(crashreport1);
+                    CrashReport crashreport1 = CrashReport.makeCrashReport(throwable, "Exception ticking world entities");
+                    worldserver.addWorldInfoToCrashReport(crashreport1);
                     throw new ReportedException(crashreport1);
                 }
 
-                this.field_71304_b.func_76319_b();
-                this.field_71304_b.func_76320_a("tracker");
-                worldserver.func_73039_n().func_72788_a();
-                this.field_71304_b.func_76319_b();
-                this.field_71304_b.func_76319_b();
+                net.minecraftforge.fml.common.FMLCommonHandler.instance().onPostWorldTick(worldserver);
+                this.theProfiler.endSection();
+                this.theProfiler.startSection("tracker");
+                worldserver.getEntityTracker().tick();
+                this.theProfiler.endSection();
+                this.theProfiler.endSection();
             }
 
-            this.field_71312_k[j][this.field_71315_w % 100] = System.nanoTime() - i;
+            worldTickTimes.get(id)[this.tickCounter % 100] = System.nanoTime() - i;
         }
 
-        this.field_71304_b.func_76318_c("connection");
-        this.func_147137_ag().func_151269_c();
-        this.field_71304_b.func_76318_c("players");
-        this.field_71318_t.func_72374_b();
-        this.field_71304_b.func_76318_c("tickables");
+        this.theProfiler.endStartSection("dim_unloading");
+        net.minecraftforge.common.DimensionManager.unloadWorlds(worldTickTimes);
+        this.theProfiler.endStartSection("connection");
+        this.getNetworkSystem().networkTick();
+        this.theProfiler.endStartSection("players");
+        this.playerList.onTick();
+        this.theProfiler.endStartSection("tickables");
 
-        for (int k = 0; k < this.field_71322_p.size(); ++k)
+        for (int k = 0; k < this.tickables.size(); ++k)
         {
-            ((ITickable)this.field_71322_p.get(k)).func_73660_a();
+            ((ITickable)this.tickables.get(k)).update();
         }
 
-        this.field_71304_b.func_76319_b();
+        this.theProfiler.endSection();
     }
 
-    public boolean func_71255_r()
+    public boolean getAllowNether()
     {
         return true;
     }
 
-    public void func_71256_s()
+    public void startServerThread()
     {
-        this.field_175590_aa = new Thread(this, "Server thread");
-        this.field_175590_aa.start();
+        net.minecraftforge.fml.common.StartupQuery.reset();
+        this.serverThread = new Thread(net.minecraftforge.fml.common.thread.SidedThreadGroups.SERVER, this, "Server thread");
+        this.serverThread.start();
+        primaryThread = serverThread;
     }
 
-    public File func_71209_f(String p_71209_1_)
+    public File getFile(String fileName)
     {
-        return new File(this.func_71238_n(), p_71209_1_);
+        return new File(this.getDataDirectory(), fileName);
     }
 
-    public void func_71236_h(String p_71236_1_)
+    public void logWarning(String msg)
     {
-        field_147145_h.warn(p_71236_1_);
+        LOG.warn(msg);
     }
 
-    public WorldServer func_71218_a(int p_71218_1_)
+    public WorldServer worldServerForDimension(int dimension)
     {
-        return p_71218_1_ == -1 ? this.field_71305_c[1] : (p_71218_1_ == 1 ? this.field_71305_c[2] : this.field_71305_c[0]);
+        WorldServer ret = net.minecraftforge.common.DimensionManager.getWorld(dimension);
+        if (ret == null)
+        {
+            net.minecraftforge.common.DimensionManager.initDimension(dimension);
+            ret = net.minecraftforge.common.DimensionManager.getWorld(dimension);
+        }
+        return ret;
     }
 
-    public String func_71249_w()
+    public String getMinecraftVersion()
     {
         return "1.11.2";
     }
 
-    public int func_71233_x()
+    public int getCurrentPlayerCount()
     {
-        return this.field_71318_t.func_72394_k();
+        return this.playerList.getCurrentPlayerCount();
     }
 
-    public int func_71275_y()
+    public int getMaxPlayers()
     {
-        return this.field_71318_t.func_72352_l();
+        return this.playerList.getMaxPlayers();
     }
 
-    public String[] func_71213_z()
+    public String[] getOnlinePlayerNames()
     {
-        return this.field_71318_t.func_72369_d();
+        return this.playerList.getOnlinePlayerNames();
     }
 
-    public GameProfile[] func_152357_F()
+    public GameProfile[] getOnlinePlayerProfiles()
     {
-        return this.field_71318_t.func_152600_g();
+        return this.playerList.getOnlinePlayerProfiles();
     }
 
     public String getServerModName()
     {
-        return "vanilla";
+        return net.minecraftforge.fml.common.FMLCommonHandler.instance().getModName();
     }
 
-    public CrashReport func_71230_b(CrashReport p_71230_1_)
+    public CrashReport addServerInfoToCrashReport(CrashReport report)
     {
-        p_71230_1_.func_85056_g().func_189529_a("Profiler Position", new ICrashReportDetail<String>()
+        report.getCategory().setDetail("Profiler Position", new ICrashReportDetail<String>()
         {
             public String call() throws Exception
             {
-                return MinecraftServer.this.field_71304_b.field_76327_a ? MinecraftServer.this.field_71304_b.func_76322_c() : "N/A (disabled)";
+                return MinecraftServer.this.theProfiler.profilingEnabled ? MinecraftServer.this.theProfiler.getNameOfLastSection() : "N/A (disabled)";
             }
         });
 
-        if (this.field_71318_t != null)
+        if (this.playerList != null)
         {
-            p_71230_1_.func_85056_g().func_189529_a("Player Count", new ICrashReportDetail<String>()
+            report.getCategory().setDetail("Player Count", new ICrashReportDetail<String>()
             {
                 public String call()
                 {
-                    return MinecraftServer.this.field_71318_t.func_72394_k() + " / " + MinecraftServer.this.field_71318_t.func_72352_l() + "; " + MinecraftServer.this.field_71318_t.func_181057_v();
+                    return MinecraftServer.this.playerList.getCurrentPlayerCount() + " / " + MinecraftServer.this.playerList.getMaxPlayers() + "; " + MinecraftServer.this.playerList.getPlayers();
                 }
             });
         }
 
-        return p_71230_1_;
+        return report;
     }
 
-    public List<String> func_184104_a(ICommandSender p_184104_1_, String p_184104_2_, @Nullable BlockPos p_184104_3_, boolean p_184104_4_)
+    public List<String> getTabCompletions(ICommandSender sender, String input, @Nullable BlockPos pos, boolean hasTargetBlock)
     {
+        /*
         List<String> list = Lists.<String>newArrayList();
-        boolean flag = p_184104_2_.startsWith("/");
+        boolean flag = input.startsWith("/");
 
         if (flag)
         {
-            p_184104_2_ = p_184104_2_.substring(1);
+            input = input.substring(1);
         }
 
-        if (!flag && !p_184104_4_)
+        if (!flag && !hasTargetBlock)
         {
-            String[] astring = p_184104_2_.split(" ", -1);
+            String[] astring = input.split(" ", -1);
             String s2 = astring[astring.length - 1];
 
-            for (String s1 : this.field_71318_t.func_72369_d())
+            for (String s1 : this.playerList.getOnlinePlayerNames())
             {
-                if (CommandBase.func_71523_a(s2, s1))
+                if (CommandBase.doesStringStartWith(s2, s1))
                 {
                     list.add(s1);
                 }
@@ -858,8 +974,8 @@
         }
         else
         {
-            boolean flag1 = !p_184104_2_.contains(" ");
-            List<String> list1 = this.field_71321_q.func_180524_a(p_184104_1_, p_184104_2_, p_184104_3_);
+            boolean flag1 = !input.contains(" ");
+            List<String> list1 = this.commandManager.getTabCompletions(sender, input, pos);
 
             if (!list1.isEmpty())
             {
@@ -877,432 +993,433 @@
             }
 
             return list;
-        }
+        }*/
+        return server.tabComplete(sender,input,pos,hasTargetBlock);
     }
 
-    public boolean func_175578_N()
+    public boolean isAnvilFileSet()
     {
-        return this.field_71308_o != null;
+        return this.anvilFile != null;
     }
 
-    public String func_70005_c_()
+    public String getName()
     {
         return "Server";
     }
 
-    public void func_145747_a(ITextComponent p_145747_1_)
+    public void sendMessage(ITextComponent component)
     {
-        field_147145_h.info(p_145747_1_.func_150260_c());
+        LOG.info(component.getUnformattedText());
     }
 
-    public boolean func_70003_b(int p_70003_1_, String p_70003_2_)
+    public boolean canUseCommand(int permLevel, String commandName)
     {
         return true;
     }
 
-    public ICommandManager func_71187_D()
+    public ICommandManager getCommandManager()
     {
-        return this.field_71321_q;
+        return this.commandManager;
     }
 
-    public KeyPair func_71250_E()
+    public KeyPair getKeyPair()
     {
-        return this.field_71292_I;
+        return this.serverKeyPair;
     }
 
-    public String func_71214_G()
+    public String getServerOwner()
     {
-        return this.field_71293_J;
+        return this.serverOwner;
     }
 
-    public void func_71224_l(String p_71224_1_)
+    public void setServerOwner(String owner)
     {
-        this.field_71293_J = p_71224_1_;
+        this.serverOwner = owner;
     }
 
-    public boolean func_71264_H()
+    public boolean isSinglePlayer()
     {
-        return this.field_71293_J != null;
+        return this.serverOwner != null;
     }
 
-    public String func_71270_I()
+    public String getFolderName()
     {
-        return this.field_71294_K;
+        return this.folderName;
     }
 
-    public void func_71261_m(String p_71261_1_)
+    public void setFolderName(String name)
     {
-        this.field_71294_K = p_71261_1_;
+        this.folderName = name;
     }
 
     @SideOnly(Side.CLIENT)
-    public void func_71246_n(String p_71246_1_)
+    public void setWorldName(String worldNameIn)
     {
-        this.field_71287_L = p_71246_1_;
+        this.worldName = worldNameIn;
     }
 
     @SideOnly(Side.CLIENT)
-    public String func_71221_J()
+    public String getWorldName()
     {
-        return this.field_71287_L;
+        return this.worldName;
     }
 
-    public void func_71253_a(KeyPair p_71253_1_)
+    public void setKeyPair(KeyPair keyPair)
     {
-        this.field_71292_I = p_71253_1_;
+        this.serverKeyPair = keyPair;
     }
 
-    public void func_147139_a(EnumDifficulty p_147139_1_)
+    public void setDifficultyForAllWorlds(EnumDifficulty difficulty)
     {
-        for (WorldServer worldserver : this.field_71305_c)
+        for (WorldServer worldserver : this.worlds)
         {
             if (worldserver != null)
             {
-                if (worldserver.func_72912_H().func_76093_s())
+                if (worldserver.getWorldInfo().isHardcoreModeEnabled())
                 {
-                    worldserver.func_72912_H().func_176144_a(EnumDifficulty.HARD);
-                    worldserver.func_72891_a(true, true);
+                    worldserver.getWorldInfo().setDifficulty(EnumDifficulty.HARD);
+                    worldserver.setAllowedSpawnTypes(true, true);
                 }
-                else if (this.func_71264_H())
+                else if (this.isSinglePlayer())
                 {
-                    worldserver.func_72912_H().func_176144_a(p_147139_1_);
-                    worldserver.func_72891_a(worldserver.func_175659_aa() != EnumDifficulty.PEACEFUL, true);
+                    worldserver.getWorldInfo().setDifficulty(difficulty);
+                    worldserver.setAllowedSpawnTypes(worldserver.getDifficulty() != EnumDifficulty.PEACEFUL, true);
                 }
                 else
                 {
-                    worldserver.func_72912_H().func_176144_a(p_147139_1_);
-                    worldserver.func_72891_a(this.func_71193_K(), this.field_71324_y);
+                    worldserver.getWorldInfo().setDifficulty(difficulty);
+                    worldserver.setAllowedSpawnTypes(this.allowSpawnMonsters(), this.canSpawnAnimals);
                 }
             }
         }
     }
 
-    public boolean func_71193_K()
+    public boolean allowSpawnMonsters()
     {
         return true;
     }
 
-    public boolean func_71242_L()
+    public boolean isDemo()
     {
-        return this.field_71288_M;
+        return this.isDemo;
     }
 
-    public void func_71204_b(boolean p_71204_1_)
+    public void setDemo(boolean demo)
     {
-        this.field_71288_M = p_71204_1_;
+        this.isDemo = demo;
     }
 
-    public void func_71194_c(boolean p_71194_1_)
+    public void canCreateBonusChest(boolean enable)
     {
-        this.field_71289_N = p_71194_1_;
+        this.enableBonusChest = enable;
     }
 
-    public ISaveFormat func_71254_M()
+    public ISaveFormat getActiveAnvilConverter()
     {
-        return this.field_71310_m;
+        return this.anvilConverterForAnvilFile;
     }
 
-    public String func_147133_T()
+    public String getResourcePackUrl()
     {
-        return this.field_147141_M;
+        return this.resourcePackUrl;
     }
 
-    public String func_175581_ab()
+    public String getResourcePackHash()
     {
-        return this.field_175588_P;
+        return this.resourcePackHash;
     }
 
-    public void func_180507_a_(String p_180507_1_, String p_180507_2_)
+    public void setResourcePack(String url, String hash)
     {
-        this.field_147141_M = p_180507_1_;
-        this.field_175588_P = p_180507_2_;
+        this.resourcePackUrl = url;
+        this.resourcePackHash = hash;
     }
 
-    public void func_70000_a(Snooper p_70000_1_)
+    public void addServerStatsToSnooper(Snooper playerSnooper)
     {
-        p_70000_1_.func_152768_a("whitelist_enabled", Boolean.valueOf(false));
-        p_70000_1_.func_152768_a("whitelist_count", Integer.valueOf(0));
+        playerSnooper.addClientStat("whitelist_enabled", Boolean.valueOf(false));
+        playerSnooper.addClientStat("whitelist_count", Integer.valueOf(0));
 
-        if (this.field_71318_t != null)
+        if (this.playerList != null)
         {
-            p_70000_1_.func_152768_a("players_current", Integer.valueOf(this.func_71233_x()));
-            p_70000_1_.func_152768_a("players_max", Integer.valueOf(this.func_71275_y()));
-            p_70000_1_.func_152768_a("players_seen", Integer.valueOf(this.field_71318_t.func_72373_m().length));
+            playerSnooper.addClientStat("players_current", Integer.valueOf(this.getCurrentPlayerCount()));
+            playerSnooper.addClientStat("players_max", Integer.valueOf(this.getMaxPlayers()));
+            playerSnooper.addClientStat("players_seen", Integer.valueOf(this.playerList.getAvailablePlayerDat().length));
         }
 
-        p_70000_1_.func_152768_a("uses_auth", Boolean.valueOf(this.field_71325_x));
-        p_70000_1_.func_152768_a("gui_state", this.func_71279_ae() ? "enabled" : "disabled");
-        p_70000_1_.func_152768_a("run_time", Long.valueOf((func_130071_aq() - p_70000_1_.func_130105_g()) / 60L * 1000L));
-        p_70000_1_.func_152768_a("avg_tick_ms", Integer.valueOf((int)(MathHelper.func_76127_a(this.field_71311_j) * 1.0E-6D)));
+        playerSnooper.addClientStat("uses_auth", Boolean.valueOf(this.onlineMode));
+        playerSnooper.addClientStat("gui_state", this.getGuiEnabled() ? "enabled" : "disabled");
+        playerSnooper.addClientStat("run_time", Long.valueOf((getCurrentTimeMillis() - playerSnooper.getMinecraftStartTimeMillis()) / 60L * 1000L));
+        playerSnooper.addClientStat("avg_tick_ms", Integer.valueOf((int)(MathHelper.average(this.tickTimeArray) * 1.0E-6D)));
         int i = 0;
 
-        if (this.field_71305_c != null)
+        if (this.worlds != null)
         {
-            for (WorldServer worldserver : this.field_71305_c)
+            for (WorldServer worldserver : this.worlds)
             {
                 if (worldserver != null)
                 {
-                    WorldInfo worldinfo = worldserver.func_72912_H();
-                    p_70000_1_.func_152768_a("world[" + i + "][dimension]", Integer.valueOf(worldserver.field_73011_w.func_186058_p().func_186068_a()));
-                    p_70000_1_.func_152768_a("world[" + i + "][mode]", worldinfo.func_76077_q());
-                    p_70000_1_.func_152768_a("world[" + i + "][difficulty]", worldserver.func_175659_aa());
-                    p_70000_1_.func_152768_a("world[" + i + "][hardcore]", Boolean.valueOf(worldinfo.func_76093_s()));
-                    p_70000_1_.func_152768_a("world[" + i + "][generator_name]", worldinfo.func_76067_t().func_77127_a());
-                    p_70000_1_.func_152768_a("world[" + i + "][generator_version]", Integer.valueOf(worldinfo.func_76067_t().func_77131_c()));
-                    p_70000_1_.func_152768_a("world[" + i + "][height]", Integer.valueOf(this.field_71280_D));
-                    p_70000_1_.func_152768_a("world[" + i + "][chunks_loaded]", Integer.valueOf(worldserver.func_72863_F().func_73152_e()));
+                    WorldInfo worldinfo = worldserver.getWorldInfo();
+                    playerSnooper.addClientStat("world[" + i + "][dimension]", Integer.valueOf(worldserver.provider.getDimensionType().getId()));
+                    playerSnooper.addClientStat("world[" + i + "][mode]", worldinfo.getGameType());
+                    playerSnooper.addClientStat("world[" + i + "][difficulty]", worldserver.getDifficulty());
+                    playerSnooper.addClientStat("world[" + i + "][hardcore]", Boolean.valueOf(worldinfo.isHardcoreModeEnabled()));
+                    playerSnooper.addClientStat("world[" + i + "][generator_name]", worldinfo.getTerrainType().getName());
+                    playerSnooper.addClientStat("world[" + i + "][generator_version]", Integer.valueOf(worldinfo.getTerrainType().getGeneratorVersion()));
+                    playerSnooper.addClientStat("world[" + i + "][height]", Integer.valueOf(this.buildLimit));
+                    playerSnooper.addClientStat("world[" + i + "][chunks_loaded]", Integer.valueOf(worldserver.getChunkProvider().getLoadedChunkCount()));
                     ++i;
                 }
             }
         }
 
-        p_70000_1_.func_152768_a("worlds", Integer.valueOf(i));
+        playerSnooper.addClientStat("worlds", Integer.valueOf(i));
     }
 
-    public void func_70001_b(Snooper p_70001_1_)
+    public void addServerTypeToSnooper(Snooper playerSnooper)
     {
-        p_70001_1_.func_152767_b("singleplayer", Boolean.valueOf(this.func_71264_H()));
-        p_70001_1_.func_152767_b("server_brand", this.getServerModName());
-        p_70001_1_.func_152767_b("gui_supported", GraphicsEnvironment.isHeadless() ? "headless" : "supported");
-        p_70001_1_.func_152767_b("dedicated", Boolean.valueOf(this.func_71262_S()));
+        playerSnooper.addStatToSnooper("singleplayer", Boolean.valueOf(this.isSinglePlayer()));
+        playerSnooper.addStatToSnooper("server_brand", this.getServerModName());
+        playerSnooper.addStatToSnooper("gui_supported", GraphicsEnvironment.isHeadless() ? "headless" : "supported");
+        playerSnooper.addStatToSnooper("dedicated", Boolean.valueOf(this.isDedicatedServer()));
     }
 
-    public boolean func_70002_Q()
+    public boolean isSnooperEnabled()
     {
         return true;
     }
 
-    public abstract boolean func_71262_S();
+    public abstract boolean isDedicatedServer();
 
-    public boolean func_71266_T()
+    public boolean isServerInOnlineMode()
     {
-        return this.field_71325_x;
+        return this.onlineMode;
     }
 
-    public void func_71229_d(boolean p_71229_1_)
+    public void setOnlineMode(boolean online)
     {
-        this.field_71325_x = p_71229_1_;
+        this.onlineMode = online;
     }
 
-    public boolean func_190518_ac()
+    public boolean getPreventProxyConnections()
     {
-        return this.field_190519_A;
+        return this.preventProxyConnections;
     }
 
-    public boolean func_71268_U()
+    public boolean getCanSpawnAnimals()
     {
-        return this.field_71324_y;
+        return this.canSpawnAnimals;
     }
 
-    public void func_71251_e(boolean p_71251_1_)
+    public void setCanSpawnAnimals(boolean spawnAnimals)
     {
-        this.field_71324_y = p_71251_1_;
+        this.canSpawnAnimals = spawnAnimals;
     }
 
-    public boolean func_71220_V()
+    public boolean getCanSpawnNPCs()
     {
-        return this.field_71323_z;
+        return this.canSpawnNPCs;
     }
 
-    public abstract boolean func_181035_ah();
+    public abstract boolean shouldUseNativeTransport();
 
-    public void func_71257_f(boolean p_71257_1_)
+    public void setCanSpawnNPCs(boolean spawnNpcs)
     {
-        this.field_71323_z = p_71257_1_;
+        this.canSpawnNPCs = spawnNpcs;
     }
 
-    public boolean func_71219_W()
+    public boolean isPVPEnabled()
     {
-        return this.field_71284_A;
+        return this.pvpEnabled;
     }
 
-    public void func_71188_g(boolean p_71188_1_)
+    public void setAllowPvp(boolean allowPvp)
     {
-        this.field_71284_A = p_71188_1_;
+        this.pvpEnabled = allowPvp;
     }
 
-    public boolean func_71231_X()
+    public boolean isFlightAllowed()
     {
-        return this.field_71285_B;
+        return this.allowFlight;
     }
 
-    public void func_71245_h(boolean p_71245_1_)
+    public void setAllowFlight(boolean allow)
     {
-        this.field_71285_B = p_71245_1_;
+        this.allowFlight = allow;
     }
 
-    public abstract boolean func_82356_Z();
+    public abstract boolean isCommandBlockEnabled();
 
-    public String func_71273_Y()
+    public String getMOTD()
     {
-        return this.field_71286_C;
+        return this.motd;
     }
 
-    public void func_71205_p(String p_71205_1_)
+    public void setMOTD(String motdIn)
     {
-        this.field_71286_C = p_71205_1_;
+        this.motd = motdIn;
     }
 
-    public int func_71207_Z()
+    public int getBuildLimit()
     {
-        return this.field_71280_D;
+        return this.buildLimit;
     }
 
-    public void func_71191_d(int p_71191_1_)
+    public void setBuildLimit(int maxBuildHeight)
     {
-        this.field_71280_D = p_71191_1_;
+        this.buildLimit = maxBuildHeight;
     }
 
-    public boolean func_71241_aa()
+    public boolean isServerStopped()
     {
-        return this.field_71316_v;
+        return this.serverStopped;
     }
 
-    public PlayerList func_184103_al()
+    public PlayerList getPlayerList()
     {
-        return this.field_71318_t;
+        return this.playerList;
     }
 
-    public void func_184105_a(PlayerList p_184105_1_)
+    public void setPlayerList(PlayerList list)
     {
-        this.field_71318_t = p_184105_1_;
+        this.playerList = list;
     }
 
-    public void func_71235_a(GameType p_71235_1_)
+    public void setGameType(GameType gameMode)
     {
-        for (WorldServer worldserver : this.field_71305_c)
+        for (WorldServer worldserver : this.worlds)
         {
-            worldserver.func_72912_H().func_76060_a(p_71235_1_);
+            worldserver.getWorldInfo().setGameType(gameMode);
         }
     }
 
-    public NetworkSystem func_147137_ag()
+    public NetworkSystem getNetworkSystem()
     {
-        return this.field_147144_o;
+        return this.networkSystem;
     }
 
     @SideOnly(Side.CLIENT)
-    public boolean func_71200_ad()
+    public boolean serverIsInRunLoop()
     {
-        return this.field_71296_Q;
+        return this.serverIsRunning;
     }
 
-    public boolean func_71279_ae()
+    public boolean getGuiEnabled()
     {
         return false;
     }
 
-    public abstract String func_71206_a(GameType p_71206_1_, boolean p_71206_2_);
+    public abstract String shareToLAN(GameType type, boolean allowCheats);
 
-    public int func_71259_af()
+    public int getTickCounter()
     {
-        return this.field_71315_w;
+        return this.tickCounter;
     }
 
-    public void func_71223_ag()
+    public void enableProfiling()
     {
-        this.field_71295_T = true;
+        this.startProfiling = true;
     }
 
     @SideOnly(Side.CLIENT)
-    public Snooper func_80003_ah()
+    public Snooper getPlayerUsageSnooper()
     {
-        return this.field_71307_n;
+        return this.usageSnooper;
     }
 
-    public BlockPos func_180425_c()
+    public BlockPos getPosition()
     {
-        return BlockPos.field_177992_a;
+        return BlockPos.ORIGIN;
     }
 
-    public Vec3d func_174791_d()
+    public Vec3d getPositionVector()
     {
-        return Vec3d.field_186680_a;
+        return Vec3d.ZERO;
     }
 
-    public World func_130014_f_()
+    public World getEntityWorld()
     {
-        return this.field_71305_c[0];
+        return this.worlds[0];
     }
 
-    public Entity func_174793_f()
+    public Entity getCommandSenderEntity()
     {
         return null;
     }
 
-    public boolean func_175579_a(World p_175579_1_, BlockPos p_175579_2_, EntityPlayer p_175579_3_)
+    public boolean isBlockProtected(World worldIn, BlockPos pos, EntityPlayer playerIn)
     {
         return false;
     }
 
-    public boolean func_104056_am()
+    public boolean getForceGamemode()
     {
-        return this.field_104057_T;
+        return this.isGamemodeForced;
     }
 
-    public Proxy func_110454_ao()
+    public Proxy getServerProxy()
     {
-        return this.field_110456_c;
+        return this.serverProxy;
     }
 
-    public static long func_130071_aq()
+    public static long getCurrentTimeMillis()
     {
         return System.currentTimeMillis();
     }
 
-    public int func_143007_ar()
+    public int getMaxPlayerIdleMinutes()
     {
-        return this.field_143008_E;
+        return this.maxPlayerIdleMinutes;
     }
 
-    public void func_143006_e(int p_143006_1_)
+    public void setPlayerIdleTimeout(int idleTimeout)
     {
-        this.field_143008_E = p_143006_1_;
+        this.maxPlayerIdleMinutes = idleTimeout;
     }
 
-    public ITextComponent func_145748_c_()
+    public ITextComponent getDisplayName()
     {
-        return new TextComponentString(this.func_70005_c_());
+        return new TextComponentString(this.getName());
     }
 
-    public boolean func_147136_ar()
+    public boolean isAnnouncingPlayerAchievements()
     {
         return true;
     }
 
-    public MinecraftSessionService func_147130_as()
+    public MinecraftSessionService getMinecraftSessionService()
     {
-        return this.field_147143_S;
+        return this.sessionService;
     }
 
-    public GameProfileRepository func_152359_aw()
+    public GameProfileRepository getGameProfileRepository()
     {
-        return this.field_152365_W;
+        return this.profileRepo;
     }
 
-    public PlayerProfileCache func_152358_ax()
+    public PlayerProfileCache getPlayerProfileCache()
     {
-        return this.field_152366_X;
+        return this.profileCache;
     }
 
-    public ServerStatusResponse func_147134_at()
+    public ServerStatusResponse getServerStatusResponse()
     {
-        return this.field_147147_p;
+        return this.statusResponse;
     }
 
-    public void func_147132_au()
+    public void refreshStatusNextTick()
     {
-        this.field_147142_T = 0L;
+        this.nanoTimeSinceStatusRefresh = 0L;
     }
 
     @Nullable
-    public Entity func_175576_a(UUID p_175576_1_)
+    public Entity getEntityFromUuid(UUID uuid)
     {
-        for (WorldServer worldserver : this.field_71305_c)
+        for (WorldServer worldserver : this.worlds)
         {
             if (worldserver != null)
             {
-                Entity entity = worldserver.func_175733_a(p_175576_1_);
+                Entity entity = worldserver.getEntityFromUuid(uuid);
 
                 if (entity != null)
                 {
@@ -1314,36 +1431,36 @@
         return null;
     }
 
-    public boolean func_174792_t_()
+    public boolean sendCommandFeedback()
     {
-        return this.field_71305_c[0].func_82736_K().func_82766_b("sendCommandFeedback");
+        return this.worlds[0].getGameRules().getBoolean("sendCommandFeedback");
     }
 
-    public void func_174794_a(CommandResultStats.Type p_174794_1_, int p_174794_2_)
+    public void setCommandStat(CommandResultStats.Type type, int amount)
     {
     }
 
-    public MinecraftServer func_184102_h()
+    public MinecraftServer getServer()
     {
         return this;
     }
 
-    public int func_175580_aG()
+    public int getMaxWorldSize()
     {
         return 29999984;
     }
 
-    public <V> ListenableFuture<V> func_175586_a(Callable<V> p_175586_1_)
+    public <V> ListenableFuture<V> callFromMainThread(Callable<V> callable)
     {
-        Validate.notNull(p_175586_1_);
+        Validate.notNull(callable);
 
-        if (!this.func_152345_ab() && !this.func_71241_aa())
+        if (!this.isCallingFromMinecraftThread() && !this.isServerStopped())
         {
-            ListenableFutureTask<V> listenablefuturetask = ListenableFutureTask.<V>create(p_175586_1_);
+            ListenableFutureTask<V> listenablefuturetask = ListenableFutureTask.<V>create(callable);
 
-            synchronized (this.field_175589_i)
+            synchronized (this.futureTaskQueue)
             {
-                this.field_175589_i.add(listenablefuturetask);
+                this.futureTaskQueue.add(listenablefuturetask);
                 return listenablefuturetask;
             }
         }
@@ -1351,7 +1468,7 @@
         {
             try
             {
-                return Futures.<V>immediateFuture(p_175586_1_.call());
+                return Futures.<V>immediateFuture(callable.call());
             }
             catch (Exception exception)
             {
@@ -1360,54 +1477,54 @@
         }
     }
 
-    public ListenableFuture<Object> func_152344_a(Runnable p_152344_1_)
+    public ListenableFuture<Object> addScheduledTask(Runnable runnableToSchedule)
     {
-        Validate.notNull(p_152344_1_);
-        return this.<Object>func_175586_a(Executors.callable(p_152344_1_));
+        Validate.notNull(runnableToSchedule);
+        return this.<Object>callFromMainThread(Executors.callable(runnableToSchedule));
     }
 
-    public boolean func_152345_ab()
+    public boolean isCallingFromMinecraftThread()
     {
-        return Thread.currentThread() == this.field_175590_aa;
+        return Thread.currentThread() == this.serverThread;
     }
 
-    public int func_175577_aI()
+    public int getNetworkCompressionThreshold()
     {
         return 256;
     }
 
-    public DataFixer func_184110_aI()
+    public DataFixer getDataFixer()
     {
-        return this.field_184112_s;
+        return this.dataFixer;
     }
 
-    public int func_184108_a(@Nullable WorldServer p_184108_1_)
+    public int getSpawnRadius(@Nullable WorldServer worldIn)
     {
-        return p_184108_1_ != null ? p_184108_1_.func_82736_K().func_180263_c("spawnRadius") : 10;
+        return worldIn != null ? worldIn.getGameRules().getInt("spawnRadius") : 10;
     }
 
     @SideOnly(Side.SERVER)
-    public String func_71211_k()
+    public String getServerHostname()
     {
-        return this.field_71320_r;
+        return this.hostname;
     }
 
     @SideOnly(Side.SERVER)
-    public void func_71189_e(String p_71189_1_)
+    public void setHostname(String host)
     {
-        this.field_71320_r = p_71189_1_;
+        this.hostname = host;
     }
 
     @SideOnly(Side.SERVER)
-    public void func_82010_a(ITickable p_82010_1_)
+    public void registerTickable(ITickable tickable)
     {
-        this.field_71322_p.add(p_82010_1_);
+        this.tickables.add(tickable);
     }
 
     @SideOnly(Side.SERVER)
     public static void main(String[] p_main_0_)
     {
-        Bootstrap.func_151354_b();
+        Bootstrap.register();
 
         try
         {
@@ -1478,120 +1595,131 @@
             YggdrasilAuthenticationService yggdrasilauthenticationservice = new YggdrasilAuthenticationService(Proxy.NO_PROXY, UUID.randomUUID().toString());
             MinecraftSessionService minecraftsessionservice = yggdrasilauthenticationservice.createMinecraftSessionService();
             GameProfileRepository gameprofilerepository = yggdrasilauthenticationservice.createProfileRepository();
-            PlayerProfileCache playerprofilecache = new PlayerProfileCache(gameprofilerepository, new File(s1, field_152367_a.getName()));
-            final DedicatedServer dedicatedserver = new DedicatedServer(new File(s1), DataFixesManager.func_188279_a(), yggdrasilauthenticationservice, minecraftsessionservice, gameprofilerepository, playerprofilecache);
+            PlayerProfileCache playerprofilecache = new PlayerProfileCache(gameprofilerepository, new File(s1, USER_CACHE_FILE.getName()));
+            final DedicatedServer dedicatedserver = new DedicatedServer(new File(s1), DataFixesManager.createFixer(), yggdrasilauthenticationservice, minecraftsessionservice, gameprofilerepository, playerprofilecache);
 
             if (s != null)
             {
-                dedicatedserver.func_71224_l(s);
+                dedicatedserver.setServerOwner(s);
             }
 
             if (s2 != null)
             {
-                dedicatedserver.func_71261_m(s2);
+                dedicatedserver.setFolderName(s2);
             }
 
             if (i >= 0)
             {
-                dedicatedserver.func_71208_b(i);
+                dedicatedserver.setServerPort(i);
             }
 
             if (flag1)
             {
-                dedicatedserver.func_71204_b(true);
+                dedicatedserver.setDemo(true);
             }
 
             if (flag2)
             {
-                dedicatedserver.func_71194_c(true);
+                dedicatedserver.canCreateBonusChest(true);
             }
 
             if (flag && !GraphicsEnvironment.isHeadless())
             {
-                dedicatedserver.func_120011_ar();
+                dedicatedserver.setGuiEnabled();
             }
 
-            dedicatedserver.func_71256_s();
+            dedicatedserver.startServerThread();
             Runtime.getRuntime().addShutdownHook(new Thread("Server Shutdown Thread")
             {
                 public void run()
                 {
-                    dedicatedserver.func_71260_j();
+                    dedicatedserver.stopServer();
                 }
             });
         }
         catch (Exception exception)
         {
-            field_147145_h.fatal((String)"Failed to start the minecraft server", (Throwable)exception);
+            LOG.fatal((String)"Failed to start the minecraft server", (Throwable)exception);
         }
     }
 
     @SideOnly(Side.SERVER)
-    public void func_71244_g(String p_71244_1_)
+    public void logInfo(String msg)
     {
-        field_147145_h.info(p_71244_1_);
+        LOG.info(msg);
     }
 
     @SideOnly(Side.SERVER)
-    public boolean func_71239_B()
+    public boolean isDebuggingEnabled()
     {
         return false;
     }
 
     @SideOnly(Side.SERVER)
-    public void func_71201_j(String p_71201_1_)
+    public void logSevere(String msg)
     {
-        field_147145_h.error(p_71201_1_);
+        LOG.error(msg);
     }
 
     @SideOnly(Side.SERVER)
-    public void func_71198_k(String p_71198_1_)
+    public void logDebug(String msg)
     {
-        if (this.func_71239_B())
+        if (this.isDebuggingEnabled())
         {
-            field_147145_h.info(p_71198_1_);
+            LOG.info(msg);
         }
     }
 
     @SideOnly(Side.SERVER)
-    public int func_71215_F()
+    public int getServerPort()
     {
-        return this.field_71319_s;
+        return this.serverPort;
     }
 
     @SideOnly(Side.SERVER)
-    public void func_71208_b(int p_71208_1_)
+    public void setServerPort(int port)
     {
-        this.field_71319_s = p_71208_1_;
+        this.serverPort = port;
     }
 
     @SideOnly(Side.SERVER)
-    public void func_190517_e(boolean p_190517_1_)
+    public void setPreventProxyConnections(boolean p_190517_1_)
     {
-        this.field_190519_A = p_190517_1_;
+        this.preventProxyConnections = p_190517_1_;
     }
 
     @SideOnly(Side.SERVER)
-    public int func_82357_ak()
+    public int getSpawnProtectionSize()
     {
-        return 16;
+        return getSpawnRadius(worlds[0]);
     }
 
     @SideOnly(Side.SERVER)
-    public void func_104055_i(boolean p_104055_1_)
+    public void setForceGamemode(boolean force)
     {
-        this.field_104057_T = p_104055_1_;
+        this.isGamemodeForced = force;
     }
 
     @SideOnly(Side.SERVER)
-    public long func_175587_aJ()
+    public long getCurrentTime()
     {
-        return this.field_175591_ab;
+        return this.currentTime;
     }
 
     @SideOnly(Side.SERVER)
-    public Thread func_175583_aK()
+    public Thread getServerThread()
     {
-        return this.field_175590_aa;
+        return this.serverThread;
     }
+    public Map<World,ForgeChunkManager.Ticket> forcechunkmanager4bukkit = new HashMap<World, ForgeChunkManager.Ticket>();
+    @SubscribeEvent
+    private void addForcedChunk(ForgeChunkManager.ForceChunkEvent event)
+    {
+        forcechunkmanager4bukkit.put(event.getTicket().world,event.getTicket());
+    }
+    @SubscribeEvent
+    private void removeForcedChunk(ForgeChunkManager.UnforceChunkEvent event)
+    {
+        forcechunkmanager4bukkit.remove(event.getTicket().world);
+    }
 }
