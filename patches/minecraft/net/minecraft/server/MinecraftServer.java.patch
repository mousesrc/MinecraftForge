--- ../src-base/minecraft/net/minecraft/server/MinecraftServer.java
+++ ../src-work/minecraft/net/minecraft/server/MinecraftServer.java
@@ -24,18 +24,15 @@
 import java.net.URLEncoder;
 import java.security.KeyPair;
 import java.text.SimpleDateFormat;
-import java.util.Arrays;
-import java.util.Collections;
-import java.util.Date;
-import java.util.List;
-import java.util.Queue;
-import java.util.Random;
-import java.util.UUID;
+import java.util.*;
 import java.util.concurrent.Callable;
 import java.util.concurrent.Executors;
 import java.util.concurrent.FutureTask;
 import javax.annotation.Nullable;
 import javax.imageio.ImageIO;
+
+import jline.console.ConsoleReader;
+import joptsimple.OptionSet;
 import net.minecraft.command.CommandBase;
 import net.minecraft.command.CommandResultStats;
 import net.minecraft.command.ICommandManager;
@@ -43,6 +40,7 @@
 import net.minecraft.command.ServerCommandManager;
 import net.minecraft.crash.CrashReport;
 import net.minecraft.crash.ICrashReportDetail;
+import net.minecraft.enchantment.Enchantment;
 import net.minecraft.entity.Entity;
 import net.minecraft.entity.player.EntityPlayer;
 import net.minecraft.entity.player.EntityPlayerMP;
@@ -54,6 +52,7 @@
 import net.minecraft.profiler.Profiler;
 import net.minecraft.profiler.Snooper;
 import net.minecraft.server.dedicated.DedicatedServer;
+import net.minecraft.server.dedicated.PropertyManager;
 import net.minecraft.server.management.PlayerList;
 import net.minecraft.server.management.PlayerProfileCache;
 import net.minecraft.util.IProgressUpdate;
@@ -77,20 +76,28 @@
 import net.minecraft.world.WorldServerMulti;
 import net.minecraft.world.WorldSettings;
 import net.minecraft.world.WorldType;
+import net.minecraft.world.chunk.IChunkGenerator;
 import net.minecraft.world.chunk.storage.AnvilSaveConverter;
 import net.minecraft.world.demo.DemoWorldServer;
 import net.minecraft.world.storage.ISaveFormat;
 import net.minecraft.world.storage.ISaveHandler;
 import net.minecraft.world.storage.WorldInfo;
+import net.minecraftforge.common.DimensionManager;
+import net.minecraftforge.common.ForgeChunkManager;
+import net.minecraftforge.common.MinecraftForge;
+import net.minecraftforge.fml.common.eventhandler.SubscribeEvent;
 import net.minecraftforge.fml.relauncher.Side;
 import net.minecraftforge.fml.relauncher.SideOnly;
 import org.apache.commons.lang3.Validate;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
+import org.bukkit.craftbukkit.CraftServer;
+import org.bukkit.craftbukkit.Main;
+import org.bukkit.generator.ChunkGenerator;
 
 public abstract class MinecraftServer implements Runnable, ICommandSender, IThreadListener, ISnooperInfo
 {
-    private static final Logger field_147145_h = LogManager.getLogger();
+    public static final Logger field_147145_h = LogManager.getLogger();
     public static final File field_152367_a = new File("usercache.json");
     public final ISaveFormat field_71310_m;
     private final Snooper field_71307_n = new Snooper("server", this, func_130071_aq());
@@ -105,7 +112,7 @@
     @SideOnly(Side.SERVER)
     private String field_71320_r;
     private int field_71319_s = -1;
-    public WorldServer[] field_71305_c;
+    public WorldServer[] field_71305_c = new WorldServer[0];
     private PlayerList field_71318_t;
     private boolean field_71317_u = true;
     private boolean field_71316_v;
@@ -123,7 +130,8 @@
     private int field_71280_D;
     private int field_143008_E;
     public final long[] field_71311_j = new long[100];
-    public long[][] field_71312_k;
+    //public long[][] timeOfLastDimensionTick;
+    public java.util.Hashtable<Integer, long[]> worldTickTimes = new java.util.Hashtable<Integer, long[]>();
     private KeyPair field_71292_I;
     private String field_71293_J;
     private String field_71294_K;
@@ -148,7 +156,23 @@
     private long field_175591_ab = func_130071_aq();
     @SideOnly(Side.CLIENT)
     private boolean field_184111_ab;
+    // CraftBukkit start
+    public CraftServer server;
+    public OptionSet options;
+    public org.bukkit.command.ConsoleCommandSender console;
+    public org.bukkit.command.RemoteConsoleCommandSender remoteConsole;
+    public ConsoleReader reader;
+    public static int currentTick = (int) (System.currentTimeMillis() / 50);
+    public Thread primaryThread;
+    public Queue<Runnable> processQueue = new java.util.concurrent.ConcurrentLinkedQueue<Runnable>();
+    public int autosavePeriod;
+    public double[] recentTps = new double[]{20,20,20};
+    private long time_from_start = 0;
+    private long time_start= 0;
+    private int tick_count_5m;
 
+    // CraftBukkit end
+
     public MinecraftServer(File p_i47054_1_, Proxy p_i47054_2_, DataFixer p_i47054_3_, YggdrasilAuthenticationService p_i47054_4_, MinecraftSessionService p_i47054_5_, GameProfileRepository p_i47054_6_, PlayerProfileCache p_i47054_7_)
     {
         this.field_110456_c = p_i47054_2_;
@@ -161,8 +185,35 @@
         this.field_71321_q = this.func_175582_h();
         this.field_71310_m = new AnvilSaveConverter(p_i47054_1_, p_i47054_3_);
         this.field_184112_s = p_i47054_3_;
+        // Try to see if we're actually running in a terminal, disable jline if not
+        if (System.console() == null && System.getProperty("jline.terminal") == null) {
+            System.setProperty("jline.terminal", "jline.UnsupportedTerminal");
+            Main.useJline = false;
+        }
+
+        try {
+            reader = new ConsoleReader(System.in, System.out);
+            reader.setExpandEvents(false); // Avoid parsing exceptions for uncommonly used event designators
+        } catch (Throwable e) {
+            try {
+                // Try again with jline disabled for Windows users without C++ 2008 Redistributable
+                System.setProperty("jline.terminal", "jline.UnsupportedTerminal");
+                System.setProperty("user.language", "en");
+                Main.useJline = false;
+                reader = new ConsoleReader(System.in, System.out);
+                reader.setExpandEvents(false);
+            } catch (IOException ex) {
+                field_147145_h.warn((String) null, ex);
+            }
+        }
+        Runtime.getRuntime().addShutdownHook(new org.bukkit.craftbukkit.util.ServerShutdownThread(this));
     }
+    public PropertyManager getPropertyManager()
+    {
+        return null;
+    }
 
+
     public ServerCommandManager func_175582_h()
     {
         return new ServerCommandManager(this);
@@ -222,8 +273,6 @@
     {
         this.func_71237_c(p_71247_1_);
         this.func_71192_d("menu.loadingLevel");
-        this.field_71305_c = new WorldServer[3];
-        this.field_71312_k = new long[this.field_71305_c.length][100];
         ISaveHandler isavehandler = this.field_71310_m.func_75804_a(p_71247_1_, true);
         this.func_175584_a(this.func_71270_I(), isavehandler);
         WorldInfo worldinfo = isavehandler.func_75757_d();
@@ -253,83 +302,66 @@
             worldinfo.func_76062_a(p_71247_2_);
             worldsettings = new WorldSettings(worldinfo);
         }
-
-        for (int i = 0; i < this.field_71305_c.length; ++i)
+        ChunkGenerator generator = server.getGenerator(p_71247_2_);
+        WorldServer overWorld;
+        if (this.func_71242_L()) {
+            overWorld = (WorldServer) (new DemoWorldServer(this, isavehandler, worldinfo, 0, this.field_71304_b)).func_175643_b();
+        } else {
+            overWorld = (WorldServer) (new WorldServer(this, isavehandler, worldinfo, 0, this.field_71304_b).func_175643_b());
+        }
+        overWorld.func_72963_a(worldsettings);
+        for (int dim : net.minecraftforge.common.DimensionManager.getStaticDimensionIDs())
         {
-            int j = 0;
+            WorldServer world = (dim == 0 ? overWorld : (WorldServer)new WorldServerMulti(this, isavehandler, dim, overWorld, field_71304_b).func_175643_b());
+            world.func_72954_a(new ServerWorldEventHandler(this, world));
 
-            if (i == 1)
-            {
-                j = -1;
-            }
-
-            if (i == 2)
-            {
-                j = 1;
-            }
-
-            if (i == 0)
-            {
-                if (this.func_71242_L())
-                {
-                    this.field_71305_c[i] = (WorldServer)(new DemoWorldServer(this, isavehandler, worldinfo, j, this.field_71304_b)).func_175643_b();
-                }
-                else
-                {
-                    this.field_71305_c[i] = (WorldServer)(new WorldServer(this, isavehandler, worldinfo, j, this.field_71304_b)).func_175643_b();
-                }
-
-                this.field_71305_c[i].func_72963_a(worldsettings);
-            }
-            else
-            {
-                this.field_71305_c[i] = (WorldServer)(new WorldServerMulti(this, isavehandler, j, this.field_71305_c[0], this.field_71304_b)).func_175643_b();
-            }
-
-            this.field_71305_c[i].func_72954_a(new ServerWorldEventHandler(this, this.field_71305_c[i]));
-
             if (!this.func_71264_H())
             {
-                this.field_71305_c[i].func_72912_H().func_76060_a(this.func_71265_f());
+                world.func_72912_H().func_76060_a(this.func_71265_f());
             }
+            net.minecraftforge.common.MinecraftForge.EVENT_BUS.post(new net.minecraftforge.event.world.WorldEvent.Load(world));
         }
 
-        this.field_71318_t.func_72364_a(this.field_71305_c);
+        this.field_71318_t.func_72364_a(new WorldServer[]{ overWorld });
         this.func_147139_a(this.func_147135_j());
         this.func_71222_d();
     }
 
     public void func_71222_d()
     {
-        int i = 16;
-        int j = 4;
-        int k = 192;
-        int l = 625;
-        int i1 = 0;
-        this.func_71192_d("menu.generatingTerrain");
-        int j1 = 0;
-        field_147145_h.info("Preparing start region for level 0");
-        WorldServer worldserver = this.field_71305_c[0];
-        BlockPos blockpos = worldserver.func_175694_M();
-        long k1 = func_130071_aq();
+        for(int idx = 0; idx < field_71305_c.length; idx++) {
+            int i = 16;
+            int j = 4;
+            int k = 192;
+            int l = 625;
+            int i1 = 0;
+            this.func_71192_d("menu.generatingTerrain");
+            int j1 = 0;
+            long k1 = func_130071_aq();
+            WorldServer world = field_71305_c[idx];
+            field_147145_h.info("Preparing start region for level " + world.dimension);
+            BlockPos blockpos = world.func_175694_M();
+            if (!world.getWorld().getKeepSpawnInMemory()) {
+                continue;
+            }
+            for (int l1 = -192; l1 <= 192 && this.func_71278_l(); l1 += 16) {
+                for (int i2 = -192; i2 <= 192 && this.func_71278_l(); i2 += 16) {
+                    long j2 = func_130071_aq();
 
-        for (int l1 = -192; l1 <= 192 && this.func_71278_l(); l1 += 16)
-        {
-            for (int i2 = -192; i2 <= 192 && this.func_71278_l(); i2 += 16)
-            {
-                long j2 = func_130071_aq();
+                    if (j2 - k1 > 1000L) {
+                        this.func_71216_a_("Preparing spawn area", i1 * 100 / 625);
+                        k1 = j2;
+                    }
 
-                if (j2 - k1 > 1000L)
-                {
-                    this.func_71216_a_("Preparing spawn area", i1 * 100 / 625);
-                    k1 = j2;
+                    ++i1;
+                    world.func_72863_F().func_186025_d(blockpos.func_177958_n() + l1 >> 4, blockpos.func_177952_p() + i2 >> 4);
                 }
-
-                ++i1;
-                worldserver.func_72863_F().func_186025_d(blockpos.func_177958_n() + l1 >> 4, blockpos.func_177952_p() + i2 >> 4);
             }
         }
-
+        for(World w : field_71305_c)
+        {
+            this.server.getPluginManager().callEvent(new org.bukkit.event.world.WorldLoadEvent(w.getWorld()));
+        }
         this.func_71243_i();
     }
 
@@ -375,6 +407,8 @@
     {
         this.field_71302_d = null;
         this.field_71303_e = 0;
+        this.server.enablePlugins(org.bukkit.plugin.PluginLoadOrder.POSTWORLD); // CraftBukkit
+
     }
 
     public void func_71267_a(boolean p_71267_1_)
@@ -399,10 +433,23 @@
             }
         }
     }
-
+    // CraftBukkit start
+    private boolean hasStopped = false;
+    private final Object stopLock = new Object();
+    // CraftBukkit end
     public void func_71260_j()
     {
+        // CraftBukkit start - prevent double stopping on multiple threads
+        synchronized(stopLock) {
+            if (hasStopped) return;
+            hasStopped = true;
+        }
         field_147145_h.info("Stopping server");
+        // CraftBukkit start
+        if (this.server != null) {
+            this.server.disablePlugins();
+        }
+        // CraftBukkit end
 
         if (this.func_147137_ag() != null)
         {
@@ -411,9 +458,16 @@
 
         if (this.field_71318_t != null)
         {
+            try{
             field_147145_h.info("Saving players");
             this.field_71318_t.func_72389_g();
+            Thread.sleep(2000);
             this.field_71318_t.func_72392_r();
+            Thread.sleep(1000); // CraftBukkit - SPIGOT-625 - give server at least a chance to send packets
+            }catch (Exception ex)
+            {
+
+            }
         }
 
         if (this.field_71305_c != null)
@@ -434,9 +488,16 @@
             {
                 if (worldserver1 != null)
                 {
+                    net.minecraftforge.common.MinecraftForge.EVENT_BUS.post(new net.minecraftforge.event.world.WorldEvent.Unload(worldserver1));
                     worldserver1.func_73041_k();
                 }
             }
+
+            WorldServer[] tmp = field_71305_c;
+            for (WorldServer world : tmp)
+            {
+                net.minecraftforge.common.DimensionManager.setWorld(world.field_73011_w.getDimension(), null, this);
+            }
         }
 
         if (this.field_71307_n.func_76468_d())
@@ -461,12 +522,13 @@
         {
             if (this.func_71197_b())
             {
+                net.minecraftforge.fml.common.FMLCommonHandler.instance().handleServerStarted();
                 this.field_175591_ab = func_130071_aq();
                 long i = 0L;
                 this.field_147147_p.func_151315_a(new TextComponentString(this.field_71286_C));
                 this.field_147147_p.func_151321_a(new ServerStatusResponse.Version("1.11.2", 316));
                 this.func_184107_a(this.field_147147_p);
-
+                time_start = func_130071_aq();
                 while (this.field_71317_u)
                 {
                     long k = func_130071_aq();
@@ -487,7 +549,14 @@
 
                     i += j;
                     this.field_175591_ab = k;
-
+                    long time_delta = field_175591_ab - time_start;
+                    if(time_delta > 300000)
+                    {
+                        recentTps[2] = recentTps[1];
+                        recentTps[1] = recentTps[0];
+                        recentTps[0] = (currentTick - tick_count_5m) / 300;
+                        tick_count_5m = currentTick;
+                    }
                     if (this.field_71305_c[0].func_73056_e())
                     {
                         this.func_71217_p();
@@ -497,6 +566,8 @@
                     {
                         while (i > 50L)
                         {
+                            net.minecraft.server.MinecraftServer.currentTick = (int) (System.currentTimeMillis() / 50); // CraftBukkit
+
                             i -= 50L;
                             this.func_71217_p();
                         }
@@ -505,12 +576,20 @@
                     Thread.sleep(Math.max(1L, 50L - i));
                     this.field_71296_Q = true;
                 }
+                net.minecraftforge.fml.common.FMLCommonHandler.instance().handleServerStopping();
+                net.minecraftforge.fml.common.FMLCommonHandler.instance().expectServerStopped(); // has to come before finalTick to avoid race conditions
             }
             else
             {
+                net.minecraftforge.fml.common.FMLCommonHandler.instance().expectServerStopped(); // has to come before finalTick to avoid race conditions
                 this.func_71228_a((CrashReport)null);
             }
         }
+        catch (net.minecraftforge.fml.common.StartupQuery.AbortedException e)
+        {
+            // ignore silently
+            net.minecraftforge.fml.common.FMLCommonHandler.instance().expectServerStopped(); // has to come before finalTick to avoid race conditions
+        }
         catch (Throwable throwable1)
         {
             field_147145_h.error("Encountered an unexpected exception", throwable1);
@@ -536,21 +615,32 @@
                 field_147145_h.error("We were unable to save this crash report to disk.");
             }
 
+            net.minecraftforge.fml.common.FMLCommonHandler.instance().expectServerStopped(); // has to come before finalTick to avoid race conditions
             this.func_71228_a(crashreport);
         }
         finally
         {
             try
             {
+                this.field_71296_Q = false;
                 this.field_71316_v = true;
                 this.func_71260_j();
+
             }
             catch (Throwable throwable)
             {
+                // CraftBukkit start - Restore terminal to original settings
+                try {
+                    reader.getTerminal().restore();
+                } catch (Exception ignored) {
+                }
+                // CraftBukkit end
                 field_147145_h.error("Exception stopping the server", throwable);
             }
             finally
             {
+                net.minecraftforge.fml.common.FMLCommonHandler.instance().handleServerStopped();
+                this.field_71316_v = true;
                 this.func_71240_o();
             }
         }
@@ -615,9 +705,10 @@
     {
     }
 
-    public void func_71217_p()
+    public void func_71217_p() throws MinecraftException // CraftBukkit - added throws
     {
         long i = System.nanoTime();
+        net.minecraftforge.fml.common.FMLCommonHandler.instance().onPreServerTick();
         ++this.field_71315_w;
 
         if (this.field_71295_T)
@@ -644,16 +735,17 @@
 
             Collections.shuffle(Arrays.asList(agameprofile));
             this.field_147147_p.func_151318_b().func_151330_a(agameprofile);
+            this.field_147147_p.invalidateJson();
         }
 
-        if (this.field_71315_w % 900 == 0)
-        {
+        if (autosavePeriod > 0 && this.field_71315_w % autosavePeriod == 0) { // CraftBukkit
             this.field_71304_b.func_76320_a("save");
             this.field_71318_t.func_72389_g();
             this.func_71267_a(true);
             this.field_71304_b.func_76319_b();
         }
 
+
         this.field_71304_b.func_76320_a("tallying");
         this.field_71311_j[this.field_71315_w % 100] = System.nanoTime() - i;
         this.field_71304_b.func_76319_b();
@@ -671,10 +763,12 @@
 
         this.field_71304_b.func_76319_b();
         this.field_71304_b.func_76319_b();
+        net.minecraftforge.fml.common.FMLCommonHandler.instance().onPostServerTick();
     }
 
     public void func_71190_q()
     {
+        this.server.getScheduler().mainThreadHeartbeat(this.field_71315_w); // CraftBukkit
         this.field_71304_b.func_76320_a("jobs");
 
         synchronized (this.field_175589_i)
@@ -684,26 +778,45 @@
                 Util.func_181617_a((FutureTask)this.field_175589_i.poll(), field_147145_h);
             }
         }
+        // CraftBukkit start
+        // Run tasks that are waiting on processing
+        while (!processQueue.isEmpty()) {
+            processQueue.remove().run();
+        }
 
+        //org.bukkit.craftbukkit.chunkio.ChunkIOExecutor.tick(); we shall redirect it to forge one
+
+
         this.field_71304_b.func_76318_c("levels");
+        net.minecraftforge.common.chunkio.ChunkIOExecutor.tick();
+        // Send time updates to everyone, it will get the right time from the world the player is in.
+        if (this.field_71315_w % 20 == 0) {
+            for (int i = 0; i < this.func_184103_al().field_72404_b.size(); ++i) {
+                EntityPlayerMP entityplayer = (EntityPlayerMP) this.func_184103_al().field_72404_b.get(i);
+                entityplayer.field_71135_a.func_147359_a(new SPacketTimeUpdate(entityplayer.field_70170_p.func_82737_E(), entityplayer.getPlayerTime(), entityplayer.field_70170_p.func_82736_K().func_82766_b("doDaylightCycle"))); // Add support for per player time
+            }
+        }
 
-        for (int j = 0; j < this.field_71305_c.length; ++j)
+        Integer[] ids = net.minecraftforge.common.DimensionManager.getIDs(this.field_71315_w % 200 == 0);
+        for (int x = 0; x < ids.length; x++)
         {
+            int id = ids[x];
             long i = System.nanoTime();
 
-            if (j == 0 || this.func_71255_r())
+            if (id == 0 || this.func_71255_r())
             {
-                WorldServer worldserver = this.field_71305_c[j];
+                WorldServer worldserver = net.minecraftforge.common.DimensionManager.getWorld(id);
                 this.field_71304_b.func_76320_a(worldserver.func_72912_H().func_76065_j());
 
                 if (this.field_71315_w % 20 == 0)
                 {
                     this.field_71304_b.func_76320_a("timeSync");
-                    this.field_71318_t.func_148537_a(new SPacketTimeUpdate(worldserver.func_82737_E(), worldserver.func_72820_D(), worldserver.func_82736_K().func_82766_b("doDaylightCycle")), worldserver.field_73011_w.func_186058_p().func_186068_a());
+                    this.field_71318_t.func_148537_a(new SPacketTimeUpdate(worldserver.func_82737_E(), worldserver.func_72820_D(), worldserver.func_82736_K().func_82766_b("doDaylightCycle")), worldserver.field_73011_w.getDimension());
                     this.field_71304_b.func_76319_b();
                 }
 
                 this.field_71304_b.func_76320_a("tick");
+                net.minecraftforge.fml.common.FMLCommonHandler.instance().onPreWorldTick(worldserver);
 
                 try
                 {
@@ -727,6 +840,7 @@
                     throw new ReportedException(crashreport1);
                 }
 
+                net.minecraftforge.fml.common.FMLCommonHandler.instance().onPostWorldTick(worldserver);
                 this.field_71304_b.func_76319_b();
                 this.field_71304_b.func_76320_a("tracker");
                 worldserver.func_73039_n().func_72788_a();
@@ -734,9 +848,11 @@
                 this.field_71304_b.func_76319_b();
             }
 
-            this.field_71312_k[j][this.field_71315_w % 100] = System.nanoTime() - i;
+            worldTickTimes.get(id)[this.field_71315_w % 100] = System.nanoTime() - i;
         }
 
+        this.field_71304_b.func_76318_c("dim_unloading");
+        net.minecraftforge.common.DimensionManager.unloadWorlds(worldTickTimes);
         this.field_71304_b.func_76318_c("connection");
         this.func_147137_ag().func_151269_c();
         this.field_71304_b.func_76318_c("players");
@@ -758,8 +874,10 @@
 
     public void func_71256_s()
     {
-        this.field_175590_aa = new Thread(this, "Server thread");
+        net.minecraftforge.fml.common.StartupQuery.reset();
+        this.field_175590_aa = new Thread(net.minecraftforge.fml.common.thread.SidedThreadGroups.SERVER, this, "Server thread");
         this.field_175590_aa.start();
+        primaryThread = field_175590_aa;
     }
 
     public File func_71209_f(String p_71209_1_)
@@ -774,7 +892,13 @@
 
     public WorldServer func_71218_a(int p_71218_1_)
     {
-        return p_71218_1_ == -1 ? this.field_71305_c[1] : (p_71218_1_ == 1 ? this.field_71305_c[2] : this.field_71305_c[0]);
+        WorldServer ret = net.minecraftforge.common.DimensionManager.getWorld(p_71218_1_);
+        if (ret == null)
+        {
+            net.minecraftforge.common.DimensionManager.initDimension(p_71218_1_);
+            ret = net.minecraftforge.common.DimensionManager.getWorld(p_71218_1_);
+        }
+        return ret;
     }
 
     public String func_71249_w()
@@ -804,7 +928,7 @@
 
     public String getServerModName()
     {
-        return "vanilla";
+        return net.minecraftforge.fml.common.FMLCommonHandler.instance().getModName();
     }
 
     public CrashReport func_71230_b(CrashReport p_71230_1_)
@@ -833,22 +957,23 @@
 
     public List<String> func_184104_a(ICommandSender p_184104_1_, String p_184104_2_, @Nullable BlockPos p_184104_3_, boolean p_184104_4_)
     {
+        /*
         List<String> list = Lists.<String>newArrayList();
-        boolean flag = p_184104_2_.startsWith("/");
+        boolean flag = input.startsWith("/");
 
         if (flag)
         {
-            p_184104_2_ = p_184104_2_.substring(1);
+            input = input.substring(1);
         }
 
-        if (!flag && !p_184104_4_)
+        if (!flag && !hasTargetBlock)
         {
-            String[] astring = p_184104_2_.split(" ", -1);
+            String[] astring = input.split(" ", -1);
             String s2 = astring[astring.length - 1];
 
-            for (String s1 : this.field_71318_t.func_72369_d())
+            for (String s1 : this.playerList.getOnlinePlayerNames())
             {
-                if (CommandBase.func_71523_a(s2, s1))
+                if (CommandBase.doesStringStartWith(s2, s1))
                 {
                     list.add(s1);
                 }
@@ -858,8 +983,8 @@
         }
         else
         {
-            boolean flag1 = !p_184104_2_.contains(" ");
-            List<String> list1 = this.field_71321_q.func_180524_a(p_184104_1_, p_184104_2_, p_184104_3_);
+            boolean flag1 = !input.contains(" ");
+            List<String> list1 = this.commandManager.getTabCompletions(sender, input, pos);
 
             if (!list1.isEmpty())
             {
@@ -877,7 +1002,8 @@
             }
 
             return list;
-        }
+        }*/
+        return server.tabComplete(p_184104_1_,p_184104_2_,p_184104_3_,p_184104_4_);
     }
 
     public boolean func_175578_N()
@@ -1510,7 +1636,10 @@
             {
                 dedicatedserver.func_120011_ar();
             }
-
+            /*
+                   Register bukkit elements
+            */
+            registerBukkitElements();
             dedicatedserver.func_71256_s();
             Runtime.getRuntime().addShutdownHook(new Thread("Server Shutdown Thread")
             {
@@ -1574,7 +1703,7 @@
     @SideOnly(Side.SERVER)
     public int func_82357_ak()
     {
-        return 16;
+        return func_184108_a(field_71305_c[0]);
     }
 
     @SideOnly(Side.SERVER)
@@ -1594,4 +1723,20 @@
     {
         return this.field_175590_aa;
     }
+    public static Map<World,ForgeChunkManager.Ticket> forcechunkmanager4bukkit = new HashMap<World, ForgeChunkManager.Ticket>();
+    protected static boolean registeredBukkitElements = false;
+    protected static void registerBukkitElements()
+    {
+        // CraftBukkit start
+        //Enchantment part
+        if(registeredBukkitElements)
+        {
+            return;
+        }
+        registeredBukkitElements = true;
+        for (Object enchantment : Enchantment.field_185264_b) {
+            org.bukkit.enchantments.Enchantment.registerEnchantment(new org.bukkit.craftbukkit.enchantments.CraftEnchantment((Enchantment) enchantment));
+        }
+        // CraftBukkit end
+    }
 }
